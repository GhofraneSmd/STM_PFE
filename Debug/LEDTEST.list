
LEDTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006b80  08006b80  00016b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe4  08006fe4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006fe4  08006fe4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fe4  08006fe4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d4  080071c0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080071c0  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdff  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002492  00000000  00000000  0002c03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00004db5  00000000  00000000  0002e4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000928  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000841  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000184a0  00000000  00000000  000343f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e8db  00000000  00000000  0004c891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00087d8b  00000000  00000000  0005b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ff4  00000000  00000000  000e2ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000e5eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b64 	.word	0x08006b64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006b64 	.word	0x08006b64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_d2lz>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4605      	mov	r5, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f7ff fd9d 	bl	8000b24 <__aeabi_dcmplt>
 8000fea:	b928      	cbnz	r0, 8000ff8 <__aeabi_d2lz+0x20>
 8000fec:	4628      	mov	r0, r5
 8000fee:	4621      	mov	r1, r4
 8000ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ff4:	f000 b80a 	b.w	800100c <__aeabi_d2ulz>
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ffe:	f000 f805 	bl	800100c <__aeabi_d2ulz>
 8001002:	4240      	negs	r0, r0
 8001004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	bf00      	nop

0800100c <__aeabi_d2ulz>:
 800100c:	b5d0      	push	{r4, r6, r7, lr}
 800100e:	2200      	movs	r2, #0
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <__aeabi_d2ulz+0x34>)
 8001012:	4606      	mov	r6, r0
 8001014:	460f      	mov	r7, r1
 8001016:	f7ff fb13 	bl	8000640 <__aeabi_dmul>
 800101a:	f7ff fde9 	bl	8000bf0 <__aeabi_d2uiz>
 800101e:	4604      	mov	r4, r0
 8001020:	f7ff fa94 	bl	800054c <__aeabi_ui2d>
 8001024:	2200      	movs	r2, #0
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <__aeabi_d2ulz+0x38>)
 8001028:	f7ff fb0a 	bl	8000640 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4630      	mov	r0, r6
 8001032:	4639      	mov	r1, r7
 8001034:	f7ff f94c 	bl	80002d0 <__aeabi_dsub>
 8001038:	f7ff fdda 	bl	8000bf0 <__aeabi_d2uiz>
 800103c:	4621      	mov	r1, r4
 800103e:	bdd0      	pop	{r4, r6, r7, pc}
 8001040:	3df00000 	.word	0x3df00000
 8001044:	41f00000 	.word	0x41f00000

08001048 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8001048:	b510      	push	{r4, lr}
	OneWire_Reset(&OneWire); // Reset the bus
 800104a:	4c07      	ldr	r4, [pc, #28]	; (8001068 <DS18B20_StartAll+0x20>)
 800104c:	4620      	mov	r0, r4
 800104e:	f000 fa73 	bl	8001538 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8001052:	4620      	mov	r0, r4
 8001054:	21cc      	movs	r1, #204	; 0xcc
 8001056:	f000 fac3 	bl	80015e0 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800105a:	4620      	mov	r0, r4
}
 800105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8001060:	2144      	movs	r1, #68	; 0x44
 8001062:	f000 babd 	b.w	80015e0 <OneWire_WriteByte>
 8001066:	bf00      	nop
 8001068:	200001f0 	.word	0x200001f0

0800106c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800106c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( number >= TempSensorCount) // If read sensor is not availible
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <DS18B20_Read+0xac>)
{
 8001070:	460d      	mov	r5, r1
	if( number >= TempSensorCount) // If read sensor is not availible
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4283      	cmp	r3, r0
 8001076:	d802      	bhi.n	800107e <DS18B20_Read+0x12>
		return 0;
 8001078:	2000      	movs	r0, #0
	}
	
	*destination = result;
	
	return 1; //temperature valid
}
 800107a:	b003      	add	sp, #12
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <DS18B20_Read+0xb0>)
 8001080:	0102      	lsls	r2, r0, #4
 8001082:	eb03 1400 	add.w	r4, r3, r0, lsl #4
	return 1;
}

uint8_t DS18B20_Is(uint8_t* ROM)
{
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001086:	5c9b      	ldrb	r3, [r3, r2]
 8001088:	2b28      	cmp	r3, #40	; 0x28
 800108a:	d1f5      	bne.n	8001078 <DS18B20_Read+0xc>
	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 800108c:	4824      	ldr	r0, [pc, #144]	; (8001120 <DS18B20_Read+0xb4>)
 800108e:	f000 fa8c 	bl	80015aa <OneWire_ReadBit>
 8001092:	2800      	cmp	r0, #0
 8001094:	d0f0      	beq.n	8001078 <DS18B20_Read+0xc>
	OneWire_Reset(&OneWire); // Reset the bus
 8001096:	4822      	ldr	r0, [pc, #136]	; (8001120 <DS18B20_Read+0xb4>)
 8001098:	f000 fa4e 	bl	8001538 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800109c:	4621      	mov	r1, r4
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <DS18B20_Read+0xb4>)
 80010a0:	f000 fb32 	bl	8001708 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80010a4:	21be      	movs	r1, #190	; 0xbe
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <DS18B20_Read+0xb4>)
 80010a8:	f000 fa9a 	bl	80015e0 <OneWire_WriteByte>
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80010ac:	466e      	mov	r6, sp
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80010ae:	2405      	movs	r4, #5
		data[i] = OneWire_ReadByte(&OneWire);
 80010b0:	4f1b      	ldr	r7, [pc, #108]	; (8001120 <DS18B20_Read+0xb4>)
 80010b2:	4638      	mov	r0, r7
 80010b4:	f000 faa4 	bl	8001600 <OneWire_ReadByte>
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80010b8:	3c01      	subs	r4, #1
 80010ba:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		data[i] = OneWire_ReadByte(&OneWire);
 80010be:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80010c2:	d1f6      	bne.n	80010b2 <DS18B20_Read+0x46>
	OneWire_Reset(&OneWire); // Reset the bus
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <DS18B20_Read+0xb4>)
 80010c6:	f8bd 4000 	ldrh.w	r4, [sp]
 80010ca:	f000 fa35 	bl	8001538 <OneWire_Reset>
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80010ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
			result = temperature*(float)DS18B20_STEP_9BIT;
 80010d2:	4620      	mov	r0, r4
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80010d4:	f3c3 1341 	ubfx	r3, r3, #5, #2
	switch (resolution) // Chceck the correct value dur to resolution
 80010d8:	2b02      	cmp	r3, #2
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80010da:	f103 0209 	add.w	r2, r3, #9
	switch (resolution) // Chceck the correct value dur to resolution
 80010de:	d011      	beq.n	8001104 <DS18B20_Read+0x98>
 80010e0:	2a0c      	cmp	r2, #12
 80010e2:	d014      	beq.n	800110e <DS18B20_Read+0xa2>
 80010e4:	2a0a      	cmp	r2, #10
 80010e6:	d008      	beq.n	80010fa <DS18B20_Read+0x8e>
			result = temperature*(float)DS18B20_STEP_9BIT;
 80010e8:	f7ff feac 	bl	8000e44 <__aeabi_i2f>
 80010ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
			result = temperature*(float)DS18B20_STEP_12BIT;
 80010f0:	f7ff f836 	bl	8000160 <__aeabi_fmul>
	*destination = result;
 80010f4:	6028      	str	r0, [r5, #0]
	return 1; //temperature valid
 80010f6:	2001      	movs	r0, #1
 80010f8:	e7bf      	b.n	800107a <DS18B20_Read+0xe>
			result = temperature*(float)DS18B20_STEP_10BIT;
 80010fa:	f7ff fea3 	bl	8000e44 <__aeabi_i2f>
 80010fe:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001102:	e7f5      	b.n	80010f0 <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_11BIT;
 8001104:	f7ff fe9e 	bl	8000e44 <__aeabi_i2f>
 8001108:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800110c:	e7f0      	b.n	80010f0 <DS18B20_Read+0x84>
			result = temperature*(float)DS18B20_STEP_12BIT;
 800110e:	f7ff fe99 	bl	8000e44 <__aeabi_i2f>
 8001112:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001116:	e7eb      	b.n	80010f0 <DS18B20_Read+0x84>
 8001118:	20000204 	.word	0x20000204
 800111c:	20000208 	.word	0x20000208
 8001120:	200001f0 	.word	0x200001f0

08001124 <DS18B20_SetResolution>:
{
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( number >= TempSensorCount)
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <DS18B20_SetResolution+0xdc>)
{
 800112a:	4688      	mov	r8, r1
	if( number >= TempSensorCount)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4283      	cmp	r3, r0
 8001130:	d964      	bls.n	80011fc <DS18B20_SetResolution+0xd8>
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <DS18B20_SetResolution+0xe0>)
 8001134:	0102      	lsls	r2, r0, #4
 8001136:	eb03 1500 	add.w	r5, r3, r0, lsl #4
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	2b28      	cmp	r3, #40	; 0x28
 800113e:	d15d      	bne.n	80011fc <DS18B20_SetResolution+0xd8>
	OneWire_Reset(&OneWire); // Reset the bus
 8001140:	4831      	ldr	r0, [pc, #196]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001142:	f000 f9f9 	bl	8001538 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001146:	4629      	mov	r1, r5
 8001148:	482f      	ldr	r0, [pc, #188]	; (8001208 <DS18B20_SetResolution+0xe4>)
 800114a:	f000 fadd 	bl	8001708 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 800114e:	21be      	movs	r1, #190	; 0xbe
 8001150:	482d      	ldr	r0, [pc, #180]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001152:	f000 fa45 	bl	80015e0 <OneWire_WriteByte>
	OneWire_ReadByte(&OneWire);
 8001156:	482c      	ldr	r0, [pc, #176]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001158:	f000 fa52 	bl	8001600 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 800115c:	482a      	ldr	r0, [pc, #168]	; (8001208 <DS18B20_SetResolution+0xe4>)
 800115e:	f000 fa4f 	bl	8001600 <OneWire_ReadByte>
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001164:	f000 fa4c 	bl	8001600 <OneWire_ReadByte>
 8001168:	4607      	mov	r7, r0
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <DS18B20_SetResolution+0xe4>)
 800116c:	f000 fa48 	bl	8001600 <OneWire_ReadByte>
 8001170:	4606      	mov	r6, r0
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8001172:	4825      	ldr	r0, [pc, #148]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001174:	f000 fa44 	bl	8001600 <OneWire_ReadByte>
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8001178:	f1b8 0f09 	cmp.w	r8, #9
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 800117c:	4604      	mov	r4, r0
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800117e:	d126      	bne.n	80011ce <DS18B20_SetResolution+0xaa>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001180:	f000 049f 	and.w	r4, r0, #159	; 0x9f
	OneWire_Reset(&OneWire); // Reset the bus
 8001184:	4820      	ldr	r0, [pc, #128]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001186:	f000 f9d7 	bl	8001538 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 800118a:	4629      	mov	r1, r5
 800118c:	481e      	ldr	r0, [pc, #120]	; (8001208 <DS18B20_SetResolution+0xe4>)
 800118e:	f000 fabb 	bl	8001708 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8001192:	214e      	movs	r1, #78	; 0x4e
 8001194:	481c      	ldr	r0, [pc, #112]	; (8001208 <DS18B20_SetResolution+0xe4>)
 8001196:	f000 fa23 	bl	80015e0 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800119a:	4639      	mov	r1, r7
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <DS18B20_SetResolution+0xe4>)
 800119e:	f000 fa1f 	bl	80015e0 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 80011a2:	4631      	mov	r1, r6
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <DS18B20_SetResolution+0xe4>)
 80011a6:	f000 fa1b 	bl	80015e0 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 80011aa:	4621      	mov	r1, r4
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <DS18B20_SetResolution+0xe4>)
 80011ae:	f000 fa17 	bl	80015e0 <OneWire_WriteByte>
	OneWire_Reset(&OneWire); // Reset the bus
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <DS18B20_SetResolution+0xe4>)
 80011b4:	f000 f9c0 	bl	8001538 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80011b8:	4629      	mov	r1, r5
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <DS18B20_SetResolution+0xe4>)
 80011bc:	f000 faa4 	bl	8001708 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <DS18B20_SetResolution+0xe4>)
 80011c2:	2148      	movs	r1, #72	; 0x48
 80011c4:	f000 fa0c 	bl	80015e0 <OneWire_WriteByte>
	return 1;
 80011c8:	2001      	movs	r0, #1
}
 80011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (resolution == DS18B20_Resolution_10bits) 
 80011ce:	f1b8 0f0a 	cmp.w	r8, #10
 80011d2:	d104      	bne.n	80011de <DS18B20_SetResolution+0xba>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80011d4:	f000 04bf 	and.w	r4, r0, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80011d8:	f044 0420 	orr.w	r4, r4, #32
 80011dc:	e7d2      	b.n	8001184 <DS18B20_SetResolution+0x60>
	else if (resolution == DS18B20_Resolution_11bits)
 80011de:	f1b8 0f0b 	cmp.w	r8, #11
 80011e2:	d104      	bne.n	80011ee <DS18B20_SetResolution+0xca>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80011e4:	f000 04df 	and.w	r4, r0, #223	; 0xdf
 80011e8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80011ec:	e7ca      	b.n	8001184 <DS18B20_SetResolution+0x60>
	else if (resolution == DS18B20_Resolution_12bits)
 80011ee:	f1b8 0f0c 	cmp.w	r8, #12
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80011f2:	bf04      	itt	eq
 80011f4:	f040 0460 	orreq.w	r4, r0, #96	; 0x60
 80011f8:	b2e4      	uxtbeq	r4, r4
 80011fa:	e7c3      	b.n	8001184 <DS18B20_SetResolution+0x60>
		return 0;
 80011fc:	2000      	movs	r0, #0
 80011fe:	e7e4      	b.n	80011ca <DS18B20_SetResolution+0xa6>
 8001200:	20000204 	.word	0x20000204
 8001204:	20000208 	.word	0x20000208
 8001208:	200001f0 	.word	0x200001f0

0800120c <DS18B20_AllDone>:
	return 0;
}

uint8_t DS18B20_AllDone(void)
{
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 800120c:	4801      	ldr	r0, [pc, #4]	; (8001214 <DS18B20_AllDone+0x8>)
 800120e:	f000 b9cc 	b.w	80015aa <OneWire_ReadBit>
 8001212:	bf00      	nop
 8001214:	200001f0 	.word	0x200001f0

08001218 <DS18B20_ReadAll>:
}

void DS18B20_ReadAll(void)
{
 8001218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;

	if (DS18B20_AllDone())
 800121c:	f7ff fff6 	bl	800120c <DS18B20_AllDone>
 8001220:	b9a0      	cbnz	r0, 800124c <DS18B20_ReadAll+0x34>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
			}
		}
	}
}
 8001222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ds18b20[i].ValidDataFlag = 0;
 8001226:	eb05 1600 	add.w	r6, r5, r0, lsl #4
 800122a:	0101      	lsls	r1, r0, #4
 800122c:	f886 800c 	strb.w	r8, [r6, #12]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8001230:	5c6b      	ldrb	r3, [r5, r1]
 8001232:	2b28      	cmp	r3, #40	; 0x28
 8001234:	d104      	bne.n	8001240 <DS18B20_ReadAll+0x28>
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001236:	3108      	adds	r1, #8
 8001238:	4429      	add	r1, r5
 800123a:	f7ff ff17 	bl	800106c <DS18B20_Read>
 800123e:	7330      	strb	r0, [r6, #12]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001240:	3401      	adds	r4, #1
 8001242:	783b      	ldrb	r3, [r7, #0]
 8001244:	b2e0      	uxtb	r0, r4
 8001246:	4283      	cmp	r3, r0
 8001248:	d8ed      	bhi.n	8001226 <DS18B20_ReadAll+0xe>
 800124a:	e7ea      	b.n	8001222 <DS18B20_ReadAll+0xa>
 800124c:	2400      	movs	r4, #0
 800124e:	4f02      	ldr	r7, [pc, #8]	; (8001258 <DS18B20_ReadAll+0x40>)
			ds18b20[i].ValidDataFlag = 0;
 8001250:	46a0      	mov	r8, r4
 8001252:	4d02      	ldr	r5, [pc, #8]	; (800125c <DS18B20_ReadAll+0x44>)
 8001254:	e7f5      	b.n	8001242 <DS18B20_ReadAll+0x2a>
 8001256:	bf00      	nop
 8001258:	20000204 	.word	0x20000204
 800125c:	20000208 	.word	0x20000208

08001260 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
	if( number >= TempSensorCount)
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <DS18B20_GetROM+0x24>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4298      	cmp	r0, r3
 8001266:	bf28      	it	cs
 8001268:	4618      	movcs	r0, r3
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <DS18B20_GetROM+0x28>)
 800126c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001270:	1e4b      	subs	r3, r1, #1
 8001272:	3107      	adds	r1, #7
		number = TempSensorCount;

	uint8_t i;

	for(i = 0; i < 8; i++)
		ROM[i] = ds18b20[number].Address[i];
 8001274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001278:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i = 0; i < 8; i++)
 800127c:	428b      	cmp	r3, r1
 800127e:	d1f9      	bne.n	8001274 <DS18B20_GetROM+0x14>
}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000204 	.word	0x20000204
 8001288:	20000208 	.word	0x20000208

0800128c <DS18B20_Quantity>:
}

uint8_t DS18B20_Quantity(void)
{
	return TempSensorCount;
}
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <DS18B20_Quantity+0x8>)
 800128e:	7818      	ldrb	r0, [r3, #0]
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000204 	.word	0x20000204

08001298 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
	if(!ds18b20[number].ValidDataFlag)
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <DS18B20_GetTemperature+0x14>)
 800129a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800129e:	7b18      	ldrb	r0, [r3, #12]
 80012a0:	b110      	cbz	r0, 80012a8 <DS18B20_GetTemperature+0x10>
		return 0;

	*destination = ds18b20[number].Temperature;
	return 1;
 80012a2:	2001      	movs	r0, #1
	*destination = ds18b20[number].Temperature;
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	600b      	str	r3, [r1, #0]

}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000208 	.word	0x20000208

080012b0 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t next = 0, i = 0, j;
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 80012b4:	4917      	ldr	r1, [pc, #92]	; (8001314 <DS18B20_Init+0x64>)
 80012b6:	2202      	movs	r2, #2
{
 80012b8:	4606      	mov	r6, r0
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <DS18B20_Init+0x68>)
 80012bc:	f000 fa32 	bl	8001724 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80012c0:	4815      	ldr	r0, [pc, #84]	; (8001318 <DS18B20_Init+0x68>)
 80012c2:	f000 fa08 	bl	80016d6 <OneWire_First>
	uint8_t next = 0, i = 0, j;
 80012c6:	2100      	movs	r1, #0
	while(next)
	{
		TempSensorCount++;
 80012c8:	4d14      	ldr	r5, [pc, #80]	; (800131c <DS18B20_Init+0x6c>)
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80012ca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001320 <DS18B20_Init+0x70>
 80012ce:	4f12      	ldr	r7, [pc, #72]	; (8001318 <DS18B20_Init+0x68>)
	while(next)
 80012d0:	b930      	cbnz	r0, 80012e0 <DS18B20_Init+0x30>
 80012d2:	460c      	mov	r4, r1
		next = OneWire_Next(&OneWire);
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
			break;
	}

	for(j = 0; j < i; j++)
 80012d4:	2500      	movs	r5, #0
 80012d6:	b2e8      	uxtb	r0, r5
 80012d8:	4284      	cmp	r4, r0
 80012da:	d813      	bhi.n	8001304 <DS18B20_Init+0x54>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor

		DS18B20_StartAll(); // Start conversion on all sensors
	}
}
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TempSensorCount++;
 80012e0:	782b      	ldrb	r3, [r5, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80012e2:	4638      	mov	r0, r7
		TempSensorCount++;
 80012e4:	3301      	adds	r3, #1
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80012e6:	1c4c      	adds	r4, r1, #1
 80012e8:	eb08 1101 	add.w	r1, r8, r1, lsl #4
		TempSensorCount++;
 80012ec:	702b      	strb	r3, [r5, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80012ee:	f000 fa0d 	bl	800170c <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80012f2:	4638      	mov	r0, r7
 80012f4:	f000 f9f5 	bl	80016e2 <OneWire_Next>
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80012f8:	782b      	ldrb	r3, [r5, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80012fa:	b2e4      	uxtb	r4, r4
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d8e9      	bhi.n	80012d4 <DS18B20_Init+0x24>
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8001300:	4621      	mov	r1, r4
 8001302:	e7e5      	b.n	80012d0 <DS18B20_Init+0x20>
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8001304:	4631      	mov	r1, r6
 8001306:	f7ff ff0d 	bl	8001124 <DS18B20_SetResolution>
		DS18B20_StartAll(); // Start conversion on all sensors
 800130a:	3501      	adds	r5, #1
 800130c:	f7ff fe9c 	bl	8001048 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8001310:	e7e1      	b.n	80012d6 <DS18B20_Init+0x26>
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800
 8001318:	200001f0 	.word	0x200001f0
 800131c:	20000204 	.word	0x20000204
 8001320:	20000208 	.word	0x20000208

08001324 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_GPIO_Init+0x7c>)
{
 8001326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	699a      	ldr	r2, [r3, #24]
{
 800132c:	b086      	sub	sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	f042 0204 	orr.w	r2, r2, #4
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Ensure required ports are enabled


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|DS18B20_Pin|LED_Pin, GPIO_PIN_RESET);
 8001336:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80013a4 <MX_GPIO_Init+0x80>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	f002 0204 	and.w	r2, r2, #4
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Ensure required ports are enabled
 8001342:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001344:	4c18      	ldr	r4, [pc, #96]	; (80013a8 <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Ensure required ports are enabled
 8001346:	f042 0208 	orr.w	r2, r2, #8
 800134a:	619a      	str	r2, [r3, #24]
 800134c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|DS18B20_Pin|LED_Pin, GPIO_PIN_RESET);
 800134e:	4640      	mov	r0, r8
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Ensure required ports are enabled
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|DS18B20_Pin|LED_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2107      	movs	r1, #7
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Ensure required ports are enabled
 800135a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|DS18B20_Pin|LED_Pin, GPIO_PIN_RESET);
 800135c:	f000 fc94 	bl	8001c88 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	4620      	mov	r0, r4
 8001364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001368:	f000 fc8e 	bl	8001c88 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TEST_Pin|DS18B20_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2701      	movs	r7, #1
 800136e:	2307      	movs	r3, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2600      	movs	r6, #0
 8001372:	2502      	movs	r5, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	4640      	mov	r0, r8
 8001376:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	e9cd 3702 	strd	r3, r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f000 fba6 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
   GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	4620      	mov	r0, r4
 800138a:	a902      	add	r1, sp, #8
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	e9cd 3702 	strd	r3, r7, [sp, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	e9cd 6504 	strd	r6, r5, [sp, #16]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f000 fb9c 	bl	8001ad0 <HAL_GPIO_Init>

}
 8001398:	b006      	add	sp, #24
 800139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b530      	push	{r4, r5, lr}
 80013ae:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b0:	2214      	movs	r2, #20
 80013b2:	2100      	movs	r1, #0
 80013b4:	a808      	add	r0, sp, #32
 80013b6:	f001 ffb2 	bl	800331e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ba:	2214      	movs	r2, #20
 80013bc:	2100      	movs	r1, #0
 80013be:	a801      	add	r0, sp, #4
 80013c0:	f001 ffad 	bl	800331e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c4:	2401      	movs	r4, #1
 80013c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d0:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013da:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013dc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f000 fc61 	bl	8001ca4 <HAL_RCC_OscConfig>
 80013e2:	b100      	cbz	r0, 80013e6 <SystemClock_Config+0x3a>
 80013e4:	e7fe      	b.n	80013e4 <SystemClock_Config+0x38>
  {
	  _Error_Handler(__FILE__, __LINE__);
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f2:	e9cd 3004 	strd	r3, r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013f6:	4621      	mov	r1, r4
 80013f8:	a801      	add	r0, sp, #4
 80013fa:	f000 fe15 	bl	8002028 <HAL_RCC_ClockConfig>
 80013fe:	b100      	cbz	r0, 8001402 <SystemClock_Config+0x56>
 8001400:	e7fe      	b.n	8001400 <SystemClock_Config+0x54>
  {
	  _Error_Handler(__FILE__, __LINE__);
  }

}
 8001402:	b011      	add	sp, #68	; 0x44
 8001404:	bd30      	pop	{r4, r5, pc}
	...

08001408 <main>:
{
 8001408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 800140c:	f000 fad4 	bl	80019b8 <HAL_Init>
  SystemClock_Config();
 8001410:	f7ff ffcc 	bl	80013ac <SystemClock_Config>
  MX_GPIO_Init();
 8001414:	f7ff ff86 	bl	8001324 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001418:	f000 fa3a 	bl	8001890 <MX_TIM1_Init>
  DS18B20_Init(DS18B20_Resolution_12bits);
 800141c:	200c      	movs	r0, #12
 800141e:	f7ff ff47 	bl	80012b0 <DS18B20_Init>
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2101      	movs	r1, #1
 8001426:	4826      	ldr	r0, [pc, #152]	; (80014c0 <main+0xb8>)
 8001428:	f000 fc2e 	bl	8001c88 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 1);
 800142c:	4c24      	ldr	r4, [pc, #144]	; (80014c0 <main+0xb8>)
	 				 if (Temperature > 30.0f) // Ajuster le seuil de température selon vos besoins
 800142e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80014c4 <main+0xbc>
	  DS18B20_ReadAll();
 8001432:	f7ff fef1 	bl	8001218 <DS18B20_ReadAll>
	  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	4620      	mov	r0, r4
 800143a:	4611      	mov	r1, r2
 800143c:	f000 fc24 	bl	8001c88 <HAL_GPIO_WritePin>
	       DS18B20_StartAll();
 8001440:	f7ff fe02 	bl	8001048 <DS18B20_StartAll>
	       HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	4620      	mov	r0, r4
 800144a:	f000 fc1d 	bl	8001c88 <HAL_GPIO_WritePin>
	 	for(i = 0; i < DS18B20_Quantity(); i++)
 800144e:	2600      	movs	r6, #0
	 			if(DS18B20_GetTemperature(i, &Temperature))
 8001450:	4f1d      	ldr	r7, [pc, #116]	; (80014c8 <main+0xc0>)
	 				memset(message, 0, sizeof(message));
 8001452:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80014cc <main+0xc4>
	 	for(i = 0; i < DS18B20_Quantity(); i++)
 8001456:	f7ff ff19 	bl	800128c <DS18B20_Quantity>
 800145a:	b2f5      	uxtb	r5, r6
 800145c:	42a8      	cmp	r0, r5
 800145e:	d808      	bhi.n	8001472 <main+0x6a>
	 	HAL_Delay(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f000 facc 	bl	8001a00 <HAL_Delay>
	 			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001468:	2104      	movs	r1, #4
 800146a:	4620      	mov	r0, r4
 800146c:	f000 fc11 	bl	8001c92 <HAL_GPIO_TogglePin>
	  DS18B20_ReadAll();
 8001470:	e7df      	b.n	8001432 <main+0x2a>
	 			if(DS18B20_GetTemperature(i, &Temperature))
 8001472:	4628      	mov	r0, r5
 8001474:	4914      	ldr	r1, [pc, #80]	; (80014c8 <main+0xc0>)
 8001476:	f7ff ff0f 	bl	8001298 <DS18B20_GetTemperature>
 800147a:	b1e0      	cbz	r0, 80014b6 <main+0xae>
	 				DS18B20_GetROM(i, ROM_tmp);
 800147c:	4669      	mov	r1, sp
 800147e:	4628      	mov	r0, r5
 8001480:	f7ff feee 	bl	8001260 <DS18B20_GetROM>
	 				memset(message, 0, sizeof(message));
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	2100      	movs	r1, #0
 8001488:	4640      	mov	r0, r8
 800148a:	f001 ff48 	bl	800331e <memset>
	 				sprintf(message, "%.2f C", Temperature);
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f7ff f87e 	bl	8000590 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4640      	mov	r0, r8
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <main+0xc8>)
 800149c:	f001 fedc 	bl	8003258 <siprintf>
	 				 if (Temperature > 30.0f) // Ajuster le seuil de température selon vos besoins
 80014a0:	4649      	mov	r1, r9
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f7ff fd8e 	bl	8000fc4 <__aeabi_fcmpgt>
 80014a8:	b138      	cbz	r0, 80014ba <main+0xb2>
	 				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Activer le relais pour allumer le ventilateur
 80014aa:	2200      	movs	r2, #0
	 			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Désactiver le relais pour éteindre le ventilateur
 80014ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <main+0xcc>)
 80014b2:	f000 fbe9 	bl	8001c88 <HAL_GPIO_WritePin>
	 	for(i = 0; i < DS18B20_Quantity(); i++)
 80014b6:	3601      	adds	r6, #1
 80014b8:	e7cd      	b.n	8001456 <main+0x4e>
	 			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Désactiver le relais pour éteindre le ventilateur
 80014ba:	2201      	movs	r2, #1
 80014bc:	e7f6      	b.n	80014ac <main+0xa4>
 80014be:	bf00      	nop
 80014c0:	40010800 	.word	0x40010800
 80014c4:	41f00000 	.word	0x41f00000
 80014c8:	20000248 	.word	0x20000248
 80014cc:	2000024c 	.word	0x2000024c
 80014d0:	08006b80 	.word	0x08006b80
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <_Error_Handler>:
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80014d8:	e7fe      	b.n	80014d8 <_Error_Handler>
	...

080014dc <OneWire_Delay>:
//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
	_DS18B20_TIMER.Instance->CNT = 0;
 80014dc:	2200      	movs	r2, #0
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <OneWire_Delay+0x10>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80014e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e6:	4282      	cmp	r2, r0
 80014e8:	d9fc      	bls.n	80014e4 <OneWire_Delay+0x8>
}
 80014ea:	4770      	bx	lr
 80014ec:	20000290 	.word	0x20000290

080014f0 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80014f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80014f2:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80014f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80014f8:	2301      	movs	r3, #1
 80014fa:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80014fc:	8883      	ldrh	r3, [r0, #4]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 80014fe:	4669      	mov	r1, sp
 8001500:	6800      	ldr	r0, [r0, #0]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001502:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001504:	f000 fae4 	bl	8001ad0 <HAL_GPIO_Init>
}	
 8001508:	b005      	add	sp, #20
 800150a:	f85d fb04 	ldr.w	pc, [sp], #4

0800150e <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 800150e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001510:	2211      	movs	r2, #17
 8001512:	2300      	movs	r3, #0
 8001514:	e9cd 2301 	strd	r2, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001518:	2301      	movs	r3, #1
 800151a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800151c:	8883      	ldrh	r3, [r0, #4]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800151e:	4669      	mov	r1, sp
 8001520:	6800      	ldr	r0, [r0, #0]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001522:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001524:	f000 fad4 	bl	8001ad0 <HAL_GPIO_Init>
}
 8001528:	b005      	add	sp, #20
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4

0800152e <OneWire_OutputLow>:
//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 800152e:	8883      	ldrh	r3, [r0, #4]
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	6113      	str	r3, [r2, #16]
}	
 8001536:	4770      	bx	lr

08001538 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8001538:	b510      	push	{r4, lr}
 800153a:	4604      	mov	r4, r0
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 800153c:	f7ff fff7 	bl	800152e <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001540:	f7ff ffe5 	bl	800150e <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8001544:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001548:	f7ff ffc8 	bl	80014dc <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff ffcf 	bl	80014f0 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001552:	2046      	movs	r0, #70	; 0x46
 8001554:	f7ff ffc2 	bl	80014dc <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001558:	88a1      	ldrh	r1, [r4, #4]
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f000 fb8e 	bl	8001c7c <HAL_GPIO_ReadPin>
 8001560:	4601      	mov	r1, r0
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001562:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001566:	f7ff ffb9 	bl	80014dc <OneWire_Delay>

	return i;
}
 800156a:	4608      	mov	r0, r1
 800156c:	bd10      	pop	{r4, pc}

0800156e <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 800156e:	b510      	push	{r4, lr}
 8001570:	4604      	mov	r4, r0
	if (bit) // Send '1',
 8001572:	b171      	cbz	r1, 8001592 <OneWire_WriteBit+0x24>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8001574:	f7ff ffdb 	bl	800152e <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001578:	f7ff ffc9 	bl	800150e <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 800157c:	2006      	movs	r0, #6
 800157e:	f7ff ffad 	bl	80014dc <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff ffb4 	bl	80014f0 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001588:	2040      	movs	r0, #64	; 0x40
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 800158a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		OneWire_Delay(10);
 800158e:	f7ff bfa5 	b.w	80014dc <OneWire_Delay>
		OneWire_OutputLow(onewire); // Set the bus low
 8001592:	f7ff ffcc 	bl	800152e <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001596:	f7ff ffba 	bl	800150e <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 800159a:	203c      	movs	r0, #60	; 0x3c
 800159c:	f7ff ff9e 	bl	80014dc <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff ffa5 	bl	80014f0 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	e7ef      	b.n	800158a <OneWire_WriteBit+0x1c>

080015aa <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
	uint8_t bit = 0; // Default read bit state is low
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 80015ae:	f7ff ffbe 	bl	800152e <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80015b2:	f7ff ffac 	bl	800150e <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff ff90 	bl	80014dc <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ff97 	bl	80014f0 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80015c2:	200a      	movs	r0, #10
 80015c4:	f7ff ff8a 	bl	80014dc <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80015c8:	88a1      	ldrh	r1, [r4, #4]
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	f000 fb56 	bl	8001c7c <HAL_GPIO_ReadPin>
 80015d0:	4601      	mov	r1, r0
		bit = 1;
	
	OneWire_Delay(50); // Wait for end of read cycle
 80015d2:	2032      	movs	r0, #50	; 0x32
 80015d4:	f7ff ff82 	bl	80014dc <OneWire_Delay>

	return bit;
}
 80015d8:	1e08      	subs	r0, r1, #0
 80015da:	bf18      	it	ne
 80015dc:	2001      	movne	r0, #1
 80015de:	bd10      	pop	{r4, pc}

080015e0 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	4606      	mov	r6, r0
 80015e4:	460d      	mov	r5, r1
 80015e6:	2408      	movs	r4, #8
	uint8_t i = 8;

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80015e8:	f005 0101 	and.w	r1, r5, #1
 80015ec:	4630      	mov	r0, r6
		byte >>= 1;
	} while(--i);
 80015ee:	3c01      	subs	r4, #1
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80015f0:	f7ff ffbd 	bl	800156e <OneWire_WriteBit>
	} while(--i);
 80015f4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte >>= 1;
 80015f8:	ea4f 0555 	mov.w	r5, r5, lsr #1
	} while(--i);
 80015fc:	d1f4      	bne.n	80015e8 <OneWire_WriteByte+0x8>
}
 80015fe:	bd70      	pop	{r4, r5, r6, pc}

08001600 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4606      	mov	r6, r0
 8001604:	2508      	movs	r5, #8
	uint8_t i = 8, byte = 0;
 8001606:	2000      	movs	r0, #0

	do{
		byte >>= 1;
 8001608:	0844      	lsrs	r4, r0, #1
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 800160a:	4630      	mov	r0, r6
 800160c:	f7ff ffcd 	bl	80015aa <OneWire_ReadBit>
	} while(--i);
 8001610:	3d01      	subs	r5, #1
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001612:	ea44 10c0 	orr.w	r0, r4, r0, lsl #7
	} while(--i);
 8001616:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 800161a:	b2c0      	uxtb	r0, r0
	} while(--i);
 800161c:	d1f4      	bne.n	8001608 <OneWire_ReadByte+0x8>
	
	return byte;
}
 800161e:	bd70      	pop	{r4, r5, r6, pc}

08001620 <OneWire_Search>:
	onewire->LastDeviceFlag = 0;
	onewire->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	last_zero = 0;
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8001624:	7a03      	ldrb	r3, [r0, #8]
{
 8001626:	4604      	mov	r4, r0
 8001628:	460e      	mov	r6, r1
	if (!onewire->LastDeviceFlag) // If last device flag is not set
 800162a:	b91b      	cbnz	r3, 8001634 <OneWire_Search+0x14>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 800162c:	f7ff ff84 	bl	8001538 <OneWire_Reset>
 8001630:	4605      	mov	r5, r0
 8001632:	b120      	cbz	r0, 800163e <OneWire_Search+0x1e>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8001634:	2000      	movs	r0, #0
 8001636:	80e0      	strh	r0, [r4, #6]
			onewire->LastDeviceFlag = 0;
 8001638:	7220      	strb	r0, [r4, #8]
		onewire->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 800163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rom_byte_mask = 1;
 800163e:	2701      	movs	r7, #1
		OneWire_WriteByte(onewire, command); // Send searching command
 8001640:	4631      	mov	r1, r6
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff ffcc 	bl	80015e0 <OneWire_WriteByte>
	last_zero = 0;
 8001648:	46a9      	mov	r9, r5
	id_bit_number = 1;
 800164a:	463e      	mov	r6, r7
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffac 	bl	80015aa <OneWire_ReadBit>
 8001652:	4680      	mov	r8, r0
 8001654:	4682      	mov	sl, r0
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff ffa7 	bl	80015aa <OneWire_ReadBit>
			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 800165c:	f1b8 0f01 	cmp.w	r8, #1
 8001660:	d10f      	bne.n	8001682 <OneWire_Search+0x62>
 8001662:	2801      	cmp	r0, #1
 8001664:	d116      	bne.n	8001694 <OneWire_Search+0x74>
		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8001666:	2e40      	cmp	r6, #64	; 0x40
 8001668:	d9e4      	bls.n	8001634 <OneWire_Search+0x14>
			onewire->LastDiscrepancy = last_zero;
 800166a:	f884 9006 	strb.w	r9, [r4, #6]
			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 800166e:	f1b9 0f00 	cmp.w	r9, #0
 8001672:	d101      	bne.n	8001678 <OneWire_Search+0x58>
				onewire->LastDeviceFlag = 1; // Set the flag
 8001674:	2301      	movs	r3, #1
 8001676:	7223      	strb	r3, [r4, #8]
	if (!search_result || !onewire->ROM_NO[0])
 8001678:	7a63      	ldrb	r3, [r4, #9]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0da      	beq.n	8001634 <OneWire_Search+0x14>
			search_result = 1; // Searching successful
 800167e:	2001      	movs	r0, #1
 8001680:	e7db      	b.n	800163a <OneWire_Search+0x1a>
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001682:	1962      	adds	r2, r4, r5
				if (id_bit != cmp_id_bit)
 8001684:	4580      	cmp	r8, r0
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001686:	7a53      	ldrb	r3, [r2, #9]
				if (id_bit != cmp_id_bit)
 8001688:	d121      	bne.n	80016ce <OneWire_Search+0xae>
					if (id_bit_number < onewire->LastDiscrepancy)
 800168a:	79a1      	ldrb	r1, [r4, #6]
 800168c:	42b1      	cmp	r1, r6
 800168e:	d917      	bls.n	80016c0 <OneWire_Search+0xa0>
					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001690:	423b      	tst	r3, r7
 8001692:	d016      	beq.n	80016c2 <OneWire_Search+0xa2>
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001694:	f04f 0a01 	mov.w	sl, #1
 8001698:	1962      	adds	r2, r4, r5
 800169a:	7a53      	ldrb	r3, [r2, #9]
 800169c:	433b      	orrs	r3, r7
 800169e:	7253      	strb	r3, [r2, #9]
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80016a0:	4651      	mov	r1, sl
 80016a2:	4620      	mov	r0, r4
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80016a4:	007f      	lsls	r7, r7, #1
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 80016a6:	f7ff ff62 	bl	800156e <OneWire_WriteBit>
				id_bit_number++; // Next bit search - increase the id
 80016aa:	3601      	adds	r6, #1
				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80016ac:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
				id_bit_number++; // Next bit search - increase the id
 80016b0:	b2f6      	uxtb	r6, r6
				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80016b2:	d1cb      	bne.n	800164c <OneWire_Search+0x2c>
					rom_byte_number++; // Next byte number
 80016b4:	3501      	adds	r5, #1
 80016b6:	b2ed      	uxtb	r5, r5
		} while(rom_byte_number < 8);  // Read 8 bytes
 80016b8:	2d08      	cmp	r5, #8
 80016ba:	d0d4      	beq.n	8001666 <OneWire_Search+0x46>
					rom_byte_mask = 1; // Reset the mask - first bit
 80016bc:	2701      	movs	r7, #1
 80016be:	e7c5      	b.n	800164c <OneWire_Search+0x2c>
					if (search_direction == 0) // If 0 was picked, write it to LastZero
 80016c0:	d0e8      	beq.n	8001694 <OneWire_Search+0x74>
						if (last_zero < 9) // Check for last discrepancy in family
 80016c2:	2e08      	cmp	r6, #8
 80016c4:	d800      	bhi.n	80016c8 <OneWire_Search+0xa8>
							onewire->LastFamilyDiscrepancy = last_zero;
 80016c6:	71e6      	strb	r6, [r4, #7]
				if (search_direction == 1)
 80016c8:	f04f 0a00 	mov.w	sl, #0
 80016cc:	46b1      	mov	r9, r6
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 80016ce:	ea23 0307 	bic.w	r3, r3, r7
 80016d2:	7253      	strb	r3, [r2, #9]
 80016d4:	e7e4      	b.n	80016a0 <OneWire_Search+0x80>

080016d6 <OneWire_First>:
	onewire->LastDiscrepancy = 0;
 80016d6:	2200      	movs	r2, #0
//
uint8_t OneWire_First(OneWire_t* onewire)
{
	OneWire_ResetSearch(onewire);

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80016d8:	21f0      	movs	r1, #240	; 0xf0
	onewire->LastDiscrepancy = 0;
 80016da:	80c2      	strh	r2, [r0, #6]
	onewire->LastDeviceFlag = 0;
 80016dc:	7202      	strb	r2, [r0, #8]
	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80016de:	f7ff bf9f 	b.w	8001620 <OneWire_Search>

080016e2 <OneWire_Next>:
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80016e2:	21f0      	movs	r1, #240	; 0xf0
 80016e4:	f7ff bf9c 	b.w	8001620 <OneWire_Search>

080016e8 <OneWire_Select>:

//
//	Select a device on bus by address
//
void OneWire_Select(OneWire_t* onewire, uint8_t* addr)
{
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	460c      	mov	r4, r1
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80016ec:	2155      	movs	r1, #85	; 0x55
{
 80016ee:	4606      	mov	r6, r0
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80016f0:	f7ff ff76 	bl	80015e0 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 80016f4:	1e65      	subs	r5, r4, #1
 80016f6:	3407      	adds	r4, #7
	{
		OneWire_WriteByte(onewire, *(addr + i));
 80016f8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80016fc:	4630      	mov	r0, r6
 80016fe:	f7ff ff6f 	bl	80015e0 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001702:	42a5      	cmp	r5, r4
 8001704:	d1f8      	bne.n	80016f8 <OneWire_Select+0x10>
	}
}
 8001706:	bd70      	pop	{r4, r5, r6, pc}

08001708 <OneWire_SelectWithPointer>:
 8001708:	f7ff bfee 	b.w	80016e8 <OneWire_Select>

0800170c <OneWire_GetFullROM>:
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800170c:	f100 0308 	add.w	r3, r0, #8
 8001710:	3901      	subs	r1, #1
 8001712:	3010      	adds	r0, #16
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001714:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
 8001718:	4283      	cmp	r3, r0
		*(firstIndex + i) = onewire->ROM_NO[i];
 800171a:	f801 2f01 	strb.w	r2, [r1, #1]!
	for (i = 0; i < 8; i++) {
 800171e:	d1f9      	bne.n	8001714 <OneWire_GetFullROM+0x8>
	}
}
 8001720:	4770      	bx	lr
	...

08001724 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4604      	mov	r4, r0
 8001728:	460e      	mov	r6, r1
 800172a:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <OneWire_Init+0x40>)
 800172e:	f000 fd17 	bl	8002160 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
	onewire->GPIO_Pin = GPIO_Pin;

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8001732:	4620      	mov	r0, r4
	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001734:	6026      	str	r6, [r4, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001736:	80a5      	strh	r5, [r4, #4]
	OneWire_BusOutputDirection(onewire);
 8001738:	f7ff fee9 	bl	800150e <OneWire_BusOutputDirection>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001742:	611a      	str	r2, [r3, #16]
	HAL_Delay(100);
 8001744:	f000 f95c 	bl	8001a00 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fef0 	bl	800152e <OneWire_OutputLow>
	HAL_Delay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f000 f956 	bl	8001a00 <HAL_Delay>
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	88a2      	ldrh	r2, [r4, #4]
	OneWire_OutputHigh(onewire);
	HAL_Delay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
}
 800175a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 800175e:	611a      	str	r2, [r3, #16]
	HAL_Delay(200);
 8001760:	f000 b94e 	b.w	8001a00 <HAL_Delay>
 8001764:	20000290 	.word	0x20000290

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f95a 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	f06f 000b 	mvn.w	r0, #11
 8001776:	4611      	mov	r1, r2
 8001778:	f000 f966 	bl	8001a48 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	f06f 000a 	mvn.w	r0, #10
 8001782:	4611      	mov	r1, r2
 8001784:	f000 f960 	bl	8001a48 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	f06f 0009 	mvn.w	r0, #9
 800178e:	4611      	mov	r1, r2
 8001790:	f000 f95a 	bl	8001a48 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	f06f 0004 	mvn.w	r0, #4
 800179a:	4611      	mov	r1, r2
 800179c:	f000 f954 	bl	8001a48 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f06f 0003 	mvn.w	r0, #3
 80017a6:	4611      	mov	r1, r2
 80017a8:	f000 f94e 	bl	8001a48 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f06f 0001 	mvn.w	r0, #1
 80017b2:	4611      	mov	r1, r2
 80017b4:	f000 f948 	bl	8001a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	4611      	mov	r1, r2
 80017c4:	f000 b940 	b.w	8001a48 <HAL_NVIC_SetPriority>

080017c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler>

080017ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler>

080017cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler>

080017ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler>

080017d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler>

080017d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 b900 	b.w	80019dc <HAL_IncTick>

080017dc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80017dc:	2001      	movs	r0, #1
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e2:	f001 fdef 	bl	80033c4 <__errno>
 80017e6:	2316      	movs	r3, #22
 80017e8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80017ea:	f04f 30ff 	mov.w	r0, #4294967295
 80017ee:	bd08      	pop	{r3, pc}

080017f0 <_exit>:

void _exit (int status)
{
 80017f0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80017f2:	f001 fde7 	bl	80033c4 <__errno>
 80017f6:	2316      	movs	r3, #22
 80017f8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80017fa:	e7fe      	b.n	80017fa <_exit+0xa>

080017fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	460d      	mov	r5, r1
 8001800:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	460e      	mov	r6, r1
 8001804:	1b73      	subs	r3, r6, r5
 8001806:	429c      	cmp	r4, r3
 8001808:	dc01      	bgt.n	800180e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800180a:	4620      	mov	r0, r4
 800180c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	e7f5      	b.n	8001804 <_read+0x8>

08001818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	460d      	mov	r5, r1
 800181c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	460e      	mov	r6, r1
 8001820:	1b73      	subs	r3, r6, r5
 8001822:	429c      	cmp	r4, r3
 8001824:	dc01      	bgt.n	800182a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001826:	4620      	mov	r0, r4
 8001828:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800182a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800182e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	e7f5      	b.n	8001820 <_write+0x8>

08001834 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800183a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800183e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001840:	604b      	str	r3, [r1, #4]
}
 8001842:	4770      	bx	lr

08001844 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001844:	2001      	movs	r0, #1
 8001846:	4770      	bx	lr

08001848 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001848:	2000      	movs	r0, #0
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <_sbrk+0x30>)
{
 800184e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001850:	6811      	ldr	r1, [r2, #0]
{
 8001852:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001854:	b909      	cbnz	r1, 800185a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <_sbrk+0x34>)
 8001858:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	6810      	ldr	r0, [r2, #0]
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <_sbrk+0x38>)
 800185e:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <_sbrk+0x3c>)
 8001860:	4403      	add	r3, r0
 8001862:	1b09      	subs	r1, r1, r4
 8001864:	428b      	cmp	r3, r1
 8001866:	d906      	bls.n	8001876 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001868:	f001 fdac 	bl	80033c4 <__errno>
 800186c:	230c      	movs	r3, #12
 800186e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001870:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001874:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001876:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001878:	e7fc      	b.n	8001874 <_sbrk+0x28>
 800187a:	bf00      	nop
 800187c:	2000028c 	.word	0x2000028c
 8001880:	20000428 	.word	0x20000428
 8001884:	20002800 	.word	0x20002800
 8001888:	00000400 	.word	0x00000400

0800188c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	4770      	bx	lr
	...

08001890 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 63;
 8001892:	233f      	movs	r3, #63	; 0x3f
  htim1.Instance = TIM1;
 8001894:	4816      	ldr	r0, [pc, #88]	; (80018f0 <MX_TIM1_Init+0x60>)
  htim1.Init.Prescaler = 63;
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <MX_TIM1_Init+0x64>)
 8001898:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 800189c:	2300      	movs	r3, #0
 800189e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 80018a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim1.Init.Period = 65535;
 80018a6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018aa:	f000 fcad 	bl	8002208 <HAL_TIM_Base_Init>
 80018ae:	b118      	cbz	r0, 80018b8 <MX_TIM1_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	4811      	ldr	r0, [pc, #68]	; (80018f8 <MX_TIM1_Init+0x68>)
 80018b4:	f7ff fe10 	bl	80014d8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_TIM1_Init+0x60>)
 80018be:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c2:	f000 fcd7 	bl	8002274 <HAL_TIM_ConfigClockSource>
 80018c6:	b118      	cbz	r0, 80018d0 <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018c8:	2146      	movs	r1, #70	; 0x46
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <MX_TIM1_Init+0x68>)
 80018cc:	f7ff fe04 	bl	80014d8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d2:	4669      	mov	r1, sp
 80018d4:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018da:	f000 fd65 	bl	80023a8 <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	b118      	cbz	r0, 80018e8 <MX_TIM1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018e0:	214d      	movs	r1, #77	; 0x4d
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM1_Init+0x68>)
 80018e4:	f7ff fdf8 	bl	80014d8 <_Error_Handler>
  }

}
 80018e8:	b007      	add	sp, #28
 80018ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ee:	bf00      	nop
 80018f0:	20000290 	.word	0x20000290
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	08006b97 	.word	0x08006b97

080018fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80018fc:	6802      	ldr	r2, [r0, #0]
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_TIM_Base_MspInit+0x24>)
{
 8001900:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001902:	429a      	cmp	r2, r3
 8001904:	d10a      	bne.n	800191c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800191c:	b002      	add	sp, #8
 800191e:	4770      	bx	lr
 8001920:	40012c00 	.word	0x40012c00

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ffb2 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800192a:	490c      	ldr	r1, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <LoopFillZerobss+0x16>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001940:	4c09      	ldr	r4, [pc, #36]	; (8001968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f001 fd3f 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fd59 	bl	8001408 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001960:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 8001964:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001968:	20000428 	.word	0x20000428

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_InitTick+0x3c>)
{
 8001974:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_InitTick+0x40>)
 8001982:	6810      	ldr	r0, [r2, #0]
 8001984:	fbb0 f0f3 	udiv	r0, r0, r3
 8001988:	f000 f88e 	bl	8001aa8 <HAL_SYSTICK_Config>
 800198c:	4604      	mov	r4, r0
 800198e:	b958      	cbnz	r0, 80019a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001990:	2d0f      	cmp	r5, #15
 8001992:	d809      	bhi.n	80019a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	4602      	mov	r2, r0
 8001996:	4629      	mov	r1, r5
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f854 	bl	8001a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4620      	mov	r0, r4
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_InitTick+0x44>)
 80019a4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
 80019aa:	e7fc      	b.n	80019a6 <HAL_InitTick+0x36>
 80019ac:	20000004 	.word	0x20000004
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000008 	.word	0x20000008

080019b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x20>)
{
 80019ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	f000 f82d 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f7ff ffd0 	bl	8001970 <HAL_InitTick>
  HAL_MspInit();
 80019d0:	f7ff feca 	bl	8001768 <HAL_MspInit>
}
 80019d4:	2000      	movs	r0, #0
 80019d6:	bd08      	pop	{r3, pc}
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_IncTick+0x10>)
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_IncTick+0x14>)
 80019e0:	6811      	ldr	r1, [r2, #0]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	440b      	add	r3, r1
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200002d8 	.word	0x200002d8
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <HAL_GetTick+0x8>)
 80019f6:	6818      	ldr	r0, [r3, #0]
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200002d8 	.word	0x200002d8

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff6 	bl	80019f4 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0c:	bf1e      	ittt	ne
 8001a0e:	4b04      	ldrne	r3, [pc, #16]	; (8001a20 <HAL_Delay+0x20>)
 8001a10:	781b      	ldrbne	r3, [r3, #0]
 8001a12:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	1b43      	subs	r3, r0, r5
 8001a1a:	42a3      	cmp	r3, r4
 8001a1c:	d3fa      	bcc.n	8001a14 <HAL_Delay+0x14>
  {
  }
}
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4907      	ldr	r1, [pc, #28]	; (8001a44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a26:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a32:	0412      	lsls	r2, r2, #16
 8001a34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b530      	push	{r4, r5, lr}
 8001a4c:	68dc      	ldr	r4, [r3, #12]
 8001a4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	bf28      	it	cs
 8001a5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a64:	bf94      	ite	ls
 8001a66:	2400      	movls	r4, #0
 8001a68:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6a:	fa05 f303 	lsl.w	r3, r5, r3
 8001a6e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a72:	40a5      	lsls	r5, r4
 8001a74:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	bfac      	ite	ge
 8001a82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	4a07      	ldrlt	r2, [pc, #28]	; (8001aa4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	bfab      	itete	ge
 8001a90:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a9e:	bd30      	pop	{r4, r5, pc}
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	e000ed14 	.word	0xe000ed14

08001aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	3801      	subs	r0, #1
 8001aaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001aae:	d20b      	bcs.n	8001ac8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	21f0      	movs	r1, #240	; 0xf0
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ac8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ad4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001ad6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad8:	4f61      	ldr	r7, [pc, #388]	; (8001c60 <HAL_GPIO_Init+0x190>)
 8001ada:	4b62      	ldr	r3, [pc, #392]	; (8001c64 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8001adc:	f8df c188 	ldr.w	ip, [pc, #392]	; 8001c68 <HAL_GPIO_Init+0x198>
 8001ae0:	f8df e188 	ldr.w	lr, [pc, #392]	; 8001c6c <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae4:	680d      	ldr	r5, [r1, #0]
 8001ae6:	fa35 f406 	lsrs.w	r4, r5, r6
 8001aea:	d102      	bne.n	8001af2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001aec:	b003      	add	sp, #12
 8001aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001af2:	f04f 0801 	mov.w	r8, #1
 8001af6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001afe:	ea38 0505 	bics.w	r5, r8, r5
 8001b02:	d176      	bne.n	8001bf2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001b04:	684d      	ldr	r5, [r1, #4]
 8001b06:	2d03      	cmp	r5, #3
 8001b08:	d807      	bhi.n	8001b1a <HAL_GPIO_Init+0x4a>
 8001b0a:	3d01      	subs	r5, #1
 8001b0c:	2d02      	cmp	r5, #2
 8001b0e:	f200 8081 	bhi.w	8001c14 <HAL_GPIO_Init+0x144>
 8001b12:	e8df f005 	tbb	[pc, r5]
 8001b16:	9691      	.short	0x9691
 8001b18:	9c          	.byte	0x9c
 8001b19:	00          	.byte	0x00
 8001b1a:	2d12      	cmp	r5, #18
 8001b1c:	f000 8094 	beq.w	8001c48 <HAL_GPIO_Init+0x178>
 8001b20:	d869      	bhi.n	8001bf6 <HAL_GPIO_Init+0x126>
 8001b22:	2d11      	cmp	r5, #17
 8001b24:	f000 808a 	beq.w	8001c3c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b28:	2cff      	cmp	r4, #255	; 0xff
 8001b2a:	bf98      	it	ls
 8001b2c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b2e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b32:	bf88      	it	hi
 8001b34:	f100 0a04 	addhi.w	sl, r0, #4
 8001b38:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b3c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b40:	bf88      	it	hi
 8001b42:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	fa09 fb05 	lsl.w	fp, r9, r5
 8001b48:	ea28 080b 	bic.w	r8, r8, fp
 8001b4c:	fa02 f505 	lsl.w	r5, r2, r5
 8001b50:	ea48 0505 	orr.w	r5, r8, r5
 8001b54:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b58:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001b5c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001b60:	d047      	beq.n	8001bf2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b62:	69bd      	ldr	r5, [r7, #24]
 8001b64:	f026 0803 	bic.w	r8, r6, #3
 8001b68:	f045 0501 	orr.w	r5, r5, #1
 8001b6c:	61bd      	str	r5, [r7, #24]
 8001b6e:	69bd      	ldr	r5, [r7, #24]
 8001b70:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001b74:	f005 0501 	and.w	r5, r5, #1
 8001b78:	9501      	str	r5, [sp, #4]
 8001b7a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b7e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b82:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b84:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b90:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b94:	4d36      	ldr	r5, [pc, #216]	; (8001c70 <HAL_GPIO_Init+0x1a0>)
 8001b96:	42a8      	cmp	r0, r5
 8001b98:	d05d      	beq.n	8001c56 <HAL_GPIO_Init+0x186>
 8001b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9e:	42a8      	cmp	r0, r5
 8001ba0:	d05b      	beq.n	8001c5a <HAL_GPIO_Init+0x18a>
 8001ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ba6:	42a8      	cmp	r0, r5
 8001ba8:	bf0c      	ite	eq
 8001baa:	2502      	moveq	r5, #2
 8001bac:	2503      	movne	r5, #3
 8001bae:	fa05 f50b 	lsl.w	r5, r5, fp
 8001bb2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc0:	bf14      	ite	ne
 8001bc2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bc4:	43a5      	biceq	r5, r4
 8001bc6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bce:	bf14      	ite	ne
 8001bd0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd2:	43a5      	biceq	r5, r4
 8001bd4:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001bdc:	bf14      	ite	ne
 8001bde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001be0:	43a5      	biceq	r5, r4
 8001be2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001bea:	bf14      	ite	ne
 8001bec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bee:	43a5      	biceq	r5, r4
 8001bf0:	601d      	str	r5, [r3, #0]
	position++;
 8001bf2:	3601      	adds	r6, #1
 8001bf4:	e776      	b.n	8001ae4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001bf6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001c74 <HAL_GPIO_Init+0x1a4>
 8001bfa:	454d      	cmp	r5, r9
 8001bfc:	d00a      	beq.n	8001c14 <HAL_GPIO_Init+0x144>
 8001bfe:	d815      	bhi.n	8001c2c <HAL_GPIO_Init+0x15c>
 8001c00:	4575      	cmp	r5, lr
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x144>
 8001c04:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8001c08:	454d      	cmp	r5, r9
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x144>
 8001c0c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001c10:	454d      	cmp	r5, r9
 8001c12:	d189      	bne.n	8001b28 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c14:	688a      	ldr	r2, [r1, #8]
 8001c16:	b1e2      	cbz	r2, 8001c52 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c18:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001c1a:	bf08      	it	eq
 8001c1c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001c24:	bf18      	it	ne
 8001c26:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001c2a:	e77d      	b.n	8001b28 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001c2c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001c78 <HAL_GPIO_Init+0x1a8>
 8001c30:	454d      	cmp	r5, r9
 8001c32:	d0ef      	beq.n	8001c14 <HAL_GPIO_Init+0x144>
 8001c34:	4565      	cmp	r5, ip
 8001c36:	e7ec      	b.n	8001c12 <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c38:	68ca      	ldr	r2, [r1, #12]
          break;
 8001c3a:	e775      	b.n	8001b28 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c3c:	68ca      	ldr	r2, [r1, #12]
 8001c3e:	3204      	adds	r2, #4
          break;
 8001c40:	e772      	b.n	8001b28 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c42:	68ca      	ldr	r2, [r1, #12]
 8001c44:	3208      	adds	r2, #8
          break;
 8001c46:	e76f      	b.n	8001b28 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c48:	68ca      	ldr	r2, [r1, #12]
 8001c4a:	320c      	adds	r2, #12
          break;
 8001c4c:	e76c      	b.n	8001b28 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	e76a      	b.n	8001b28 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c52:	2204      	movs	r2, #4
 8001c54:	e768      	b.n	8001b28 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c56:	2500      	movs	r5, #0
 8001c58:	e7a9      	b.n	8001bae <HAL_GPIO_Init+0xde>
 8001c5a:	2501      	movs	r5, #1
 8001c5c:	e7a7      	b.n	8001bae <HAL_GPIO_Init+0xde>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010400 	.word	0x40010400
 8001c68:	10320000 	.word	0x10320000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	40010800 	.word	0x40010800
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10310000 	.word	0x10310000

08001c7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	6883      	ldr	r3, [r0, #8]
 8001c7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c80:	bf14      	ite	ne
 8001c82:	2001      	movne	r0, #1
 8001c84:	2000      	moveq	r0, #0
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c88:	b10a      	cbz	r2, 8001c8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	6101      	str	r1, [r0, #16]
  }
}
 8001c8c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8e:	0409      	lsls	r1, r1, #16
 8001c90:	e7fb      	b.n	8001c8a <HAL_GPIO_WritePin+0x2>

08001c92 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c92:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c94:	ea01 0203 	and.w	r2, r1, r3
 8001c98:	ea21 0103 	bic.w	r1, r1, r3
 8001c9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001ca0:	6101      	str	r1, [r0, #16]
}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca8:	4605      	mov	r5, r0
 8001caa:	b338      	cbz	r0, 8001cfc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cac:	6803      	ldr	r3, [r0, #0]
 8001cae:	07db      	lsls	r3, r3, #31
 8001cb0:	d410      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	079f      	lsls	r7, r3, #30
 8001cb6:	d45e      	bmi.n	8001d76 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	0719      	lsls	r1, r3, #28
 8001cbc:	f100 8095 	bmi.w	8001dea <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	075a      	lsls	r2, r3, #29
 8001cc4:	f100 80c1 	bmi.w	8001e4a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	69e8      	ldr	r0, [r5, #28]
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f040 812c 	bne.w	8001f28 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	e029      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd4:	4c90      	ldr	r4, [pc, #576]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d10a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	03de      	lsls	r6, r3, #15
 8001cee:	d507      	bpl.n	8001d00 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	039c      	lsls	r4, r3, #14
 8001cf4:	d5dd      	bpl.n	8001cb2 <HAL_RCC_OscConfig+0xe>
 8001cf6:	686b      	ldr	r3, [r5, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1da      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	e013      	b.n	8001d28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	686b      	ldr	r3, [r5, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_OscConfig+0x8a>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d10:	f7ff fe70 	bl	80019f4 <HAL_GetTick>
 8001d14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	0398      	lsls	r0, r3, #14
 8001d1a:	d4ca      	bmi.n	8001cb2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fe6a 	bl	80019f4 <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	2864      	cmp	r0, #100	; 0x64
 8001d24:	d9f7      	bls.n	8001d16 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
}
 8001d28:	b002      	add	sp, #8
 8001d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2e:	b99b      	cbnz	r3, 8001d58 <HAL_RCC_OscConfig+0xb4>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6023      	str	r3, [r4, #0]
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d40:	f7ff fe58 	bl	80019f4 <HAL_GetTick>
 8001d44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	0399      	lsls	r1, r3, #14
 8001d4a:	d5b2      	bpl.n	8001cb2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fe52 	bl	80019f4 <HAL_GetTick>
 8001d50:	1b80      	subs	r0, r0, r6
 8001d52:	2864      	cmp	r0, #100	; 0x64
 8001d54:	d9f7      	bls.n	8001d46 <HAL_RCC_OscConfig+0xa2>
 8001d56:	e7e6      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	d103      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc4>
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	e7cf      	b.n	8001d08 <HAL_RCC_OscConfig+0x64>
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	e7cb      	b.n	8001d0e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d76:	4c68      	ldr	r4, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d78:	6863      	ldr	r3, [r4, #4]
 8001d7a:	f013 0f0c 	tst.w	r3, #12
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d80:	6863      	ldr	r3, [r4, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d110      	bne.n	8001dac <HAL_RCC_OscConfig+0x108>
 8001d8a:	6863      	ldr	r3, [r4, #4]
 8001d8c:	03da      	lsls	r2, r3, #15
 8001d8e:	d40d      	bmi.n	8001dac <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	079b      	lsls	r3, r3, #30
 8001d94:	d502      	bpl.n	8001d9c <HAL_RCC_OscConfig+0xf8>
 8001d96:	692b      	ldr	r3, [r5, #16]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d1af      	bne.n	8001cfc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	696a      	ldr	r2, [r5, #20]
 8001da0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001da4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da8:	6023      	str	r3, [r4, #0]
 8001daa:	e785      	b.n	8001cb8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	692a      	ldr	r2, [r5, #16]
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001db0:	b16a      	cbz	r2, 8001dce <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db6:	f7ff fe1d 	bl	80019f4 <HAL_GetTick>
 8001dba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	079f      	lsls	r7, r3, #30
 8001dc0:	d4ec      	bmi.n	8001d9c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fe17 	bl	80019f4 <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d9f7      	bls.n	8001dbc <HAL_RCC_OscConfig+0x118>
 8001dcc:	e7ab      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001dce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fe10 	bl	80019f4 <HAL_GetTick>
 8001dd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	0798      	lsls	r0, r3, #30
 8001dda:	f57f af6d 	bpl.w	8001cb8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff fe09 	bl	80019f4 <HAL_GetTick>
 8001de2:	1b80      	subs	r0, r0, r6
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f6      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x132>
 8001de8:	e79d      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dea:	69aa      	ldr	r2, [r5, #24]
 8001dec:	4e4a      	ldr	r6, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dee:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001df0:	b1e2      	cbz	r2, 8001e2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001df2:	2201      	movs	r2, #1
 8001df4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001df8:	f7ff fdfc 	bl	80019f4 <HAL_GetTick>
 8001dfc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001e00:	079b      	lsls	r3, r3, #30
 8001e02:	d50d      	bpl.n	8001e20 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e08:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e10:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e12:	bf00      	nop
  }
  while (Delay --);
 8001e14:	9b01      	ldr	r3, [sp, #4]
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_RCC_OscConfig+0x16e>
 8001e1e:	e74f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fde8 	bl	80019f4 <HAL_GetTick>
 8001e24:	1b00      	subs	r0, r0, r4
 8001e26:	2802      	cmp	r0, #2
 8001e28:	d9e9      	bls.n	8001dfe <HAL_RCC_OscConfig+0x15a>
 8001e2a:	e77c      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001e2c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001e30:	f7ff fde0 	bl	80019f4 <HAL_GetTick>
 8001e34:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001e38:	079f      	lsls	r7, r3, #30
 8001e3a:	f57f af41 	bpl.w	8001cc0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fdd9 	bl	80019f4 <HAL_GetTick>
 8001e42:	1b00      	subs	r0, r0, r4
 8001e44:	2802      	cmp	r0, #2
 8001e46:	d9f6      	bls.n	8001e36 <HAL_RCC_OscConfig+0x192>
 8001e48:	e76d      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4c33      	ldr	r4, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	69e3      	ldr	r3, [r4, #28]
 8001e4e:	00d8      	lsls	r0, r3, #3
 8001e50:	d424      	bmi.n	8001e9c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001e52:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61e3      	str	r3, [r4, #28]
 8001e5c:	69e3      	ldr	r3, [r4, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4e2f      	ldr	r6, [pc, #188]	; (8001f24 <HAL_RCC_OscConfig+0x280>)
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	05d9      	lsls	r1, r3, #23
 8001e6c:	d518      	bpl.n	8001ea0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	68eb      	ldr	r3, [r5, #12]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d126      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x21e>
 8001e74:	6a23      	ldr	r3, [r4, #32]
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fdba 	bl	80019f4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	6a23      	ldr	r3, [r4, #32]
 8001e88:	079b      	lsls	r3, r3, #30
 8001e8a:	d53f      	bpl.n	8001f0c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001e8c:	2f00      	cmp	r7, #0
 8001e8e:	f43f af1b 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	69e3      	ldr	r3, [r4, #28]
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61e3      	str	r3, [r4, #28]
 8001e9a:	e715      	b.n	8001cc8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001e9c:	2700      	movs	r7, #0
 8001e9e:	e7e2      	b.n	8001e66 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea0:	6833      	ldr	r3, [r6, #0]
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fda4 	bl	80019f4 <HAL_GetTick>
 8001eac:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	6833      	ldr	r3, [r6, #0]
 8001eb0:	05da      	lsls	r2, r3, #23
 8001eb2:	d4dc      	bmi.n	8001e6e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb4:	f7ff fd9e 	bl	80019f4 <HAL_GetTick>
 8001eb8:	eba0 0008 	sub.w	r0, r0, r8
 8001ebc:	2864      	cmp	r0, #100	; 0x64
 8001ebe:	d9f6      	bls.n	8001eae <HAL_RCC_OscConfig+0x20a>
 8001ec0:	e731      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec2:	b9ab      	cbnz	r3, 8001ef0 <HAL_RCC_OscConfig+0x24c>
 8001ec4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6223      	str	r3, [r4, #32]
 8001ed0:	6a23      	ldr	r3, [r4, #32]
 8001ed2:	f023 0304 	bic.w	r3, r3, #4
 8001ed6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fd8c 	bl	80019f4 <HAL_GetTick>
 8001edc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	6a23      	ldr	r3, [r4, #32]
 8001ee0:	0798      	lsls	r0, r3, #30
 8001ee2:	d5d3      	bpl.n	8001e8c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fd86 	bl	80019f4 <HAL_GetTick>
 8001ee8:	1b80      	subs	r0, r0, r6
 8001eea:	4540      	cmp	r0, r8
 8001eec:	d9f7      	bls.n	8001ede <HAL_RCC_OscConfig+0x23a>
 8001eee:	e71a      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	6a23      	ldr	r3, [r4, #32]
 8001ef4:	d103      	bne.n	8001efe <HAL_RCC_OscConfig+0x25a>
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6223      	str	r3, [r4, #32]
 8001efc:	e7ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x1d0>
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6223      	str	r3, [r4, #32]
 8001f04:	6a23      	ldr	r3, [r4, #32]
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	e7b6      	b.n	8001e7a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fd72 	bl	80019f4 <HAL_GetTick>
 8001f10:	1b80      	subs	r0, r0, r6
 8001f12:	4540      	cmp	r0, r8
 8001f14:	d9b7      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1e2>
 8001f16:	e706      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	42420000 	.word	0x42420000
 8001f20:	20000000 	.word	0x20000000
 8001f24:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4c2a      	ldr	r4, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d03e      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	2200      	movs	r2, #0
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f38:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3c:	d12c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fd59 	bl	80019f4 <HAL_GetTick>
 8001f42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	0199      	lsls	r1, r3, #6
 8001f48:	d420      	bmi.n	8001f8c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4a:	6a2b      	ldr	r3, [r5, #32]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	68a9      	ldr	r1, [r5, #8]
 8001f56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f68:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001f6a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_OscConfig+0x334>)
 8001f70:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001f72:	f7ff fd3f 	bl	80019f4 <HAL_GetTick>
 8001f76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	019a      	lsls	r2, r3, #6
 8001f7c:	f53f aea8 	bmi.w	8001cd0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fd38 	bl	80019f4 <HAL_GetTick>
 8001f84:	1b40      	subs	r0, r0, r5
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2d4>
 8001f8a:	e6cc      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fd32 	bl	80019f4 <HAL_GetTick>
 8001f90:	1b80      	subs	r0, r0, r6
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9d6      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2a0>
 8001f96:	e6c6      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001f98:	f7ff fd2c 	bl	80019f4 <HAL_GetTick>
 8001f9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	019b      	lsls	r3, r3, #6
 8001fa2:	f57f ae95 	bpl.w	8001cd0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fd25 	bl	80019f4 <HAL_GetTick>
 8001faa:	1b40      	subs	r0, r0, r5
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2fa>
 8001fb0:	e6b9      	b.n	8001d26 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb2:	2801      	cmp	r0, #1
 8001fb4:	f43f aeb8 	beq.w	8001d28 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001fb8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	6a2a      	ldr	r2, [r5, #32]
 8001fbc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001fc0:	4291      	cmp	r1, r2
 8001fc2:	f47f ae9b 	bne.w	8001cfc <HAL_RCC_OscConfig+0x58>
 8001fc6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	f43f ae7f 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x2c>
 8001fd2:	e693      	b.n	8001cfc <HAL_RCC_OscConfig+0x58>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	42420000 	.word	0x42420000

08001fdc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_RCC_GetSysClockFreq+0x38>)
 8001fde:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	f003 010c 	and.w	r1, r3, #12
 8001fe4:	2908      	cmp	r1, #8
 8001fe6:	d112      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fea:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fee:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff2:	d509      	bpl.n	8002008 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ffc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_RCC_GetSysClockFreq+0x44>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	fbb0 f0f3 	udiv	r0, r0, r3
 8002006:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetSysClockFreq+0x48>)
 800200a:	4358      	muls	r0, r3
 800200c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800200e:	4803      	ldr	r0, [pc, #12]	; (800201c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	08006ba9 	.word	0x08006ba9
 800201c:	007a1200 	.word	0x007a1200
 8002020:	08006bb9 	.word	0x08006bb9
 8002024:	003d0900 	.word	0x003d0900

08002028 <HAL_RCC_ClockConfig>:
{
 8002028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800202c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800202e:	4604      	mov	r4, r0
 8002030:	b910      	cbnz	r0, 8002038 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
}
 8002034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4a44      	ldr	r2, [pc, #272]	; (800214c <HAL_RCC_ClockConfig+0x124>)
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	428b      	cmp	r3, r1
 8002042:	d328      	bcc.n	8002096 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	6821      	ldr	r1, [r4, #0]
 8002046:	078e      	lsls	r6, r1, #30
 8002048:	d430      	bmi.n	80020ac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	07ca      	lsls	r2, r1, #31
 800204c:	d443      	bmi.n	80020d6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x124>)
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	42ab      	cmp	r3, r5
 8002058:	d865      	bhi.n	8002126 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	4d3c      	ldr	r5, [pc, #240]	; (8002150 <HAL_RCC_ClockConfig+0x128>)
 800205e:	f012 0f04 	tst.w	r2, #4
 8002062:	d16c      	bne.n	800213e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	0713      	lsls	r3, r2, #28
 8002066:	d506      	bpl.n	8002076 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002068:	686b      	ldr	r3, [r5, #4]
 800206a:	6922      	ldr	r2, [r4, #16]
 800206c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002070:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002074:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002076:	f7ff ffb1 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 800207a:	686b      	ldr	r3, [r5, #4]
 800207c:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_ClockConfig+0x12c>)
 800207e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	40d8      	lsrs	r0, r3
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_ClockConfig+0x130>)
 8002088:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCC_ClockConfig+0x134>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f7ff fc6f 	bl	8001970 <HAL_InitTick>
  return HAL_OK;
 8002092:	2000      	movs	r0, #0
 8002094:	e7ce      	b.n	8002034 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	f023 0307 	bic.w	r3, r3, #7
 800209c:	430b      	orrs	r3, r1
 800209e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	6813      	ldr	r3, [r2, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	428b      	cmp	r3, r1
 80020a8:	d1c3      	bne.n	8002032 <HAL_RCC_ClockConfig+0xa>
 80020aa:	e7cb      	b.n	8002044 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_ClockConfig+0x128>)
 80020ae:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b2:	bf1e      	ittt	ne
 80020b4:	685a      	ldrne	r2, [r3, #4]
 80020b6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80020ba:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020be:	bf42      	ittt	mi
 80020c0:	685a      	ldrmi	r2, [r3, #4]
 80020c2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80020c6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68a0      	ldr	r0, [r4, #8]
 80020cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020d0:	4302      	orrs	r2, r0
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	e7b9      	b.n	800204a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	4e1d      	ldr	r6, [pc, #116]	; (8002150 <HAL_RCC_ClockConfig+0x128>)
 80020da:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020dc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	d11a      	bne.n	8002116 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	d0a5      	beq.n	8002032 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ec:	f023 0303 	bic.w	r3, r3, #3
 80020f0:	4313      	orrs	r3, r2
 80020f2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80020f4:	f7ff fc7e 	bl	80019f4 <HAL_GetTick>
 80020f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	6873      	ldr	r3, [r6, #4]
 80020fc:	6862      	ldr	r2, [r4, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002106:	d0a2      	beq.n	800204e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fc74 	bl	80019f4 <HAL_GetTick>
 800210c:	1bc0      	subs	r0, r0, r7
 800210e:	4540      	cmp	r0, r8
 8002110:	d9f3      	bls.n	80020fa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002112:	2003      	movs	r0, #3
 8002114:	e78e      	b.n	8002034 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	2a02      	cmp	r2, #2
 8002118:	d102      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800211e:	e7e1      	b.n	80020e4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	f013 0f02 	tst.w	r3, #2
 8002124:	e7de      	b.n	80020e4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	6813      	ldr	r3, [r2, #0]
 8002128:	f023 0307 	bic.w	r3, r3, #7
 800212c:	432b      	orrs	r3, r5
 800212e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	42ab      	cmp	r3, r5
 8002138:	f47f af7b 	bne.w	8002032 <HAL_RCC_ClockConfig+0xa>
 800213c:	e78d      	b.n	800205a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213e:	686b      	ldr	r3, [r5, #4]
 8002140:	68e1      	ldr	r1, [r4, #12]
 8002142:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002146:	430b      	orrs	r3, r1
 8002148:	606b      	str	r3, [r5, #4]
 800214a:	e78b      	b.n	8002064 <HAL_RCC_ClockConfig+0x3c>
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	08006b87 	.word	0x08006b87
 8002158:	20000000 	.word	0x20000000
 800215c:	20000008 	.word	0x20000008

08002160 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002160:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002164:	2b01      	cmp	r3, #1
 8002166:	d118      	bne.n	800219a <HAL_TIM_Base_Start+0x3a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216a:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	4293      	cmp	r3, r2
 8002174:	d006      	beq.n	8002184 <HAL_TIM_Base_Start+0x24>
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d003      	beq.n	8002184 <HAL_TIM_Base_Start+0x24>
 800217c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002180:	4293      	cmp	r3, r2
 8002182:	d104      	bne.n	800218e <HAL_TIM_Base_Start+0x2e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	2a06      	cmp	r2, #6
 800218c:	d003      	beq.n	8002196 <HAL_TIM_Base_Start+0x36>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2000      	movs	r0, #0
}
 8002198:	4770      	bx	lr
    return HAL_ERROR;
 800219a:	2001      	movs	r0, #1
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40012c00 	.word	0x40012c00

080021a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <TIM_Base_SetConfig+0x5c>)
{
 80021a6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80021aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ac:	d005      	beq.n	80021ba <TIM_Base_SetConfig+0x16>
 80021ae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021b2:	d002      	beq.n	80021ba <TIM_Base_SetConfig+0x16>
 80021b4:	4c13      	ldr	r4, [pc, #76]	; (8002204 <TIM_Base_SetConfig+0x60>)
 80021b6:	42a0      	cmp	r0, r4
 80021b8:	d110      	bne.n	80021dc <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80021ba:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80021c2:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c6:	d005      	beq.n	80021d4 <TIM_Base_SetConfig+0x30>
 80021c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021cc:	d002      	beq.n	80021d4 <TIM_Base_SetConfig+0x30>
 80021ce:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <TIM_Base_SetConfig+0x60>)
 80021d0:	4290      	cmp	r0, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021dc:	694a      	ldr	r2, [r1, #20]
 80021de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80021e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e6:	688b      	ldr	r3, [r1, #8]
 80021e8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ea:	680b      	ldr	r3, [r1, #0]
 80021ec:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <TIM_Base_SetConfig+0x5c>)
 80021f0:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f2:	bf04      	itt	eq
 80021f4:	690b      	ldreq	r3, [r1, #16]
 80021f6:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f8:	2301      	movs	r3, #1
 80021fa:	6143      	str	r3, [r0, #20]
}
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400

08002208 <HAL_TIM_Base_Init>:
{
 8002208:	b510      	push	{r4, lr}
  if (htim == NULL)
 800220a:	4604      	mov	r4, r0
 800220c:	b330      	cbz	r0, 800225c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002216:	b91b      	cbnz	r3, 8002220 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002218:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800221c:	f7ff fb6e 	bl	80018fc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002222:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	1d21      	adds	r1, r4, #4
 800222a:	f7ff ffbb 	bl	80021a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800222e:	2301      	movs	r3, #1
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002232:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002236:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800223a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800223e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800224a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800224e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800225a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	e7fc      	b.n	800225a <HAL_TIM_Base_Init+0x52>

08002260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002260:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002262:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002264:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002266:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800226a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800226e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002270:	6082      	str	r2, [r0, #8]
}
 8002272:	bd10      	pop	{r4, pc}

08002274 <HAL_TIM_ConfigClockSource>:
{
 8002274:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002276:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800227a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800227c:	2b01      	cmp	r3, #1
 800227e:	f04f 0002 	mov.w	r0, #2
 8002282:	f000 808e 	beq.w	80023a2 <HAL_TIM_ConfigClockSource+0x12e>
 8002286:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800228c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800228e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002292:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002298:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800229c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800229e:	680b      	ldr	r3, [r1, #0]
 80022a0:	2b60      	cmp	r3, #96	; 0x60
 80022a2:	d04f      	beq.n	8002344 <HAL_TIM_ConfigClockSource+0xd0>
 80022a4:	d832      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x98>
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d064      	beq.n	8002374 <HAL_TIM_ConfigClockSource+0x100>
 80022aa:	d816      	bhi.n	80022da <HAL_TIM_ConfigClockSource+0x66>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d00d      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x58>
 80022b0:	d80a      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x54>
 80022b2:	f033 0110 	bics.w	r1, r3, #16
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80022c4:	4610      	mov	r0, r2
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80022c8:	2b30      	cmp	r3, #48	; 0x30
 80022ca:	d1f5      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80022cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f043 0307 	orr.w	r3, r3, #7
 80022d8:	e028      	b.n	800232c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80022da:	2b50      	cmp	r3, #80	; 0x50
 80022dc:	d1ec      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80022de:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80022e0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80022e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022e6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80022f2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80022fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80022fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002300:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002306:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800230a:	e00f      	b.n	800232c <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002310:	d00d      	beq.n	800232e <HAL_TIM_ConfigClockSource+0xba>
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002316:	d00c      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0xbe>
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d1cd      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800231c:	68cb      	ldr	r3, [r1, #12]
 800231e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002322:	f7ff ff9d 	bl	8002260 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002326:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 800232c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2200      	movs	r2, #0
 8002330:	e7c2      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002332:	68cb      	ldr	r3, [r1, #12]
 8002334:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002338:	f7ff ff92 	bl	8002260 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800233c:	6883      	ldr	r3, [r0, #8]
 800233e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002342:	e7f3      	b.n	800232c <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8002344:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002346:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002348:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800234a:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800234e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002350:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002352:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002358:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800235c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002360:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002364:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002366:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002368:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800236e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002372:	e7db      	b.n	800232c <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8002374:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002378:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800237c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002386:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002388:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800238a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800238e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002392:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002394:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002396:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800239c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80023a0:	e7c4      	b.n	800232c <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80023a2:	4602      	mov	r2, r0
 80023a4:	e78e      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x50>
	...

080023a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023aa:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 80023ae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80023b0:	2a01      	cmp	r2, #1
 80023b2:	f04f 0002 	mov.w	r0, #2
 80023b6:	d01e      	beq.n	80023f6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b8:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023ba:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80023be:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80023c8:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ca:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80023ce:	42a2      	cmp	r2, r4
 80023d0:	d006      	beq.n	80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80023d2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80023d6:	d003      	beq.n	80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80023d8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80023dc:	42a2      	cmp	r2, r4
 80023de:	d104      	bne.n	80023ea <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023e8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 80023ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023f2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80023f6:	bd30      	pop	{r4, r5, pc}
 80023f8:	40012c00 	.word	0x40012c00

080023fc <__cvt>:
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002402:	461f      	mov	r7, r3
 8002404:	bfbb      	ittet	lt
 8002406:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800240a:	461f      	movlt	r7, r3
 800240c:	2300      	movge	r3, #0
 800240e:	232d      	movlt	r3, #45	; 0x2d
 8002410:	b088      	sub	sp, #32
 8002412:	4614      	mov	r4, r2
 8002414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002416:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002418:	7013      	strb	r3, [r2, #0]
 800241a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800241c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002420:	f023 0820 	bic.w	r8, r3, #32
 8002424:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002428:	d005      	beq.n	8002436 <__cvt+0x3a>
 800242a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800242e:	d100      	bne.n	8002432 <__cvt+0x36>
 8002430:	3501      	adds	r5, #1
 8002432:	2302      	movs	r3, #2
 8002434:	e000      	b.n	8002438 <__cvt+0x3c>
 8002436:	2303      	movs	r3, #3
 8002438:	aa07      	add	r2, sp, #28
 800243a:	9204      	str	r2, [sp, #16]
 800243c:	aa06      	add	r2, sp, #24
 800243e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002442:	e9cd 3500 	strd	r3, r5, [sp]
 8002446:	4622      	mov	r2, r4
 8002448:	463b      	mov	r3, r7
 800244a:	f001 f885 	bl	8003558 <_dtoa_r>
 800244e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002452:	4606      	mov	r6, r0
 8002454:	d102      	bne.n	800245c <__cvt+0x60>
 8002456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002458:	07db      	lsls	r3, r3, #31
 800245a:	d522      	bpl.n	80024a2 <__cvt+0xa6>
 800245c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002460:	eb06 0905 	add.w	r9, r6, r5
 8002464:	d110      	bne.n	8002488 <__cvt+0x8c>
 8002466:	7833      	ldrb	r3, [r6, #0]
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d10a      	bne.n	8002482 <__cvt+0x86>
 800246c:	2200      	movs	r2, #0
 800246e:	2300      	movs	r3, #0
 8002470:	4620      	mov	r0, r4
 8002472:	4639      	mov	r1, r7
 8002474:	f7fe fb4c 	bl	8000b10 <__aeabi_dcmpeq>
 8002478:	b918      	cbnz	r0, 8002482 <__cvt+0x86>
 800247a:	f1c5 0501 	rsb	r5, r5, #1
 800247e:	f8ca 5000 	str.w	r5, [sl]
 8002482:	f8da 3000 	ldr.w	r3, [sl]
 8002486:	4499      	add	r9, r3
 8002488:	2200      	movs	r2, #0
 800248a:	2300      	movs	r3, #0
 800248c:	4620      	mov	r0, r4
 800248e:	4639      	mov	r1, r7
 8002490:	f7fe fb3e 	bl	8000b10 <__aeabi_dcmpeq>
 8002494:	b108      	cbz	r0, 800249a <__cvt+0x9e>
 8002496:	f8cd 901c 	str.w	r9, [sp, #28]
 800249a:	2230      	movs	r2, #48	; 0x30
 800249c:	9b07      	ldr	r3, [sp, #28]
 800249e:	454b      	cmp	r3, r9
 80024a0:	d307      	bcc.n	80024b2 <__cvt+0xb6>
 80024a2:	4630      	mov	r0, r6
 80024a4:	9b07      	ldr	r3, [sp, #28]
 80024a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80024a8:	1b9b      	subs	r3, r3, r6
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	b008      	add	sp, #32
 80024ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	9107      	str	r1, [sp, #28]
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e7f0      	b.n	800249c <__cvt+0xa0>

080024ba <__exponent>:
 80024ba:	4603      	mov	r3, r0
 80024bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024be:	2900      	cmp	r1, #0
 80024c0:	f803 2b02 	strb.w	r2, [r3], #2
 80024c4:	bfb6      	itet	lt
 80024c6:	222d      	movlt	r2, #45	; 0x2d
 80024c8:	222b      	movge	r2, #43	; 0x2b
 80024ca:	4249      	neglt	r1, r1
 80024cc:	2909      	cmp	r1, #9
 80024ce:	7042      	strb	r2, [r0, #1]
 80024d0:	dd2a      	ble.n	8002528 <__exponent+0x6e>
 80024d2:	f10d 0207 	add.w	r2, sp, #7
 80024d6:	4617      	mov	r7, r2
 80024d8:	260a      	movs	r6, #10
 80024da:	fb91 f5f6 	sdiv	r5, r1, r6
 80024de:	4694      	mov	ip, r2
 80024e0:	fb06 1415 	mls	r4, r6, r5, r1
 80024e4:	3430      	adds	r4, #48	; 0x30
 80024e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80024ea:	460c      	mov	r4, r1
 80024ec:	2c63      	cmp	r4, #99	; 0x63
 80024ee:	4629      	mov	r1, r5
 80024f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80024f4:	dcf1      	bgt.n	80024da <__exponent+0x20>
 80024f6:	3130      	adds	r1, #48	; 0x30
 80024f8:	f1ac 0402 	sub.w	r4, ip, #2
 80024fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002500:	4622      	mov	r2, r4
 8002502:	1c41      	adds	r1, r0, #1
 8002504:	42ba      	cmp	r2, r7
 8002506:	d30a      	bcc.n	800251e <__exponent+0x64>
 8002508:	f10d 0209 	add.w	r2, sp, #9
 800250c:	eba2 020c 	sub.w	r2, r2, ip
 8002510:	42bc      	cmp	r4, r7
 8002512:	bf88      	it	hi
 8002514:	2200      	movhi	r2, #0
 8002516:	4413      	add	r3, r2
 8002518:	1a18      	subs	r0, r3, r0
 800251a:	b003      	add	sp, #12
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002522:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002526:	e7ed      	b.n	8002504 <__exponent+0x4a>
 8002528:	2330      	movs	r3, #48	; 0x30
 800252a:	3130      	adds	r1, #48	; 0x30
 800252c:	7083      	strb	r3, [r0, #2]
 800252e:	70c1      	strb	r1, [r0, #3]
 8002530:	1d03      	adds	r3, r0, #4
 8002532:	e7f1      	b.n	8002518 <__exponent+0x5e>

08002534 <_printf_float>:
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	b091      	sub	sp, #68	; 0x44
 800253a:	460c      	mov	r4, r1
 800253c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002540:	4616      	mov	r6, r2
 8002542:	461f      	mov	r7, r3
 8002544:	4605      	mov	r5, r0
 8002546:	f000 fef3 	bl	8003330 <_localeconv_r>
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	9309      	str	r3, [sp, #36]	; 0x24
 8002550:	f7fd fdfe 	bl	8000150 <strlen>
 8002554:	2300      	movs	r3, #0
 8002556:	930e      	str	r3, [sp, #56]	; 0x38
 8002558:	f8d8 3000 	ldr.w	r3, [r8]
 800255c:	900a      	str	r0, [sp, #40]	; 0x28
 800255e:	3307      	adds	r3, #7
 8002560:	f023 0307 	bic.w	r3, r3, #7
 8002564:	f103 0208 	add.w	r2, r3, #8
 8002568:	f894 9018 	ldrb.w	r9, [r4, #24]
 800256c:	f8d4 b000 	ldr.w	fp, [r4]
 8002570:	f8c8 2000 	str.w	r2, [r8]
 8002574:	e9d3 a800 	ldrd	sl, r8, [r3]
 8002578:	4652      	mov	r2, sl
 800257a:	4643      	mov	r3, r8
 800257c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002580:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002584:	930b      	str	r3, [sp, #44]	; 0x2c
 8002586:	f04f 32ff 	mov.w	r2, #4294967295
 800258a:	4650      	mov	r0, sl
 800258c:	4b9c      	ldr	r3, [pc, #624]	; (8002800 <_printf_float+0x2cc>)
 800258e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002590:	f7fe faf0 	bl	8000b74 <__aeabi_dcmpun>
 8002594:	bb70      	cbnz	r0, 80025f4 <_printf_float+0xc0>
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	4650      	mov	r0, sl
 800259c:	4b98      	ldr	r3, [pc, #608]	; (8002800 <_printf_float+0x2cc>)
 800259e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80025a0:	f7fe faca 	bl	8000b38 <__aeabi_dcmple>
 80025a4:	bb30      	cbnz	r0, 80025f4 <_printf_float+0xc0>
 80025a6:	2200      	movs	r2, #0
 80025a8:	2300      	movs	r3, #0
 80025aa:	4650      	mov	r0, sl
 80025ac:	4641      	mov	r1, r8
 80025ae:	f7fe fab9 	bl	8000b24 <__aeabi_dcmplt>
 80025b2:	b110      	cbz	r0, 80025ba <_printf_float+0x86>
 80025b4:	232d      	movs	r3, #45	; 0x2d
 80025b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ba:	4a92      	ldr	r2, [pc, #584]	; (8002804 <_printf_float+0x2d0>)
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <_printf_float+0x2d4>)
 80025be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80025c2:	bf94      	ite	ls
 80025c4:	4690      	movls	r8, r2
 80025c6:	4698      	movhi	r8, r3
 80025c8:	2303      	movs	r3, #3
 80025ca:	f04f 0a00 	mov.w	sl, #0
 80025ce:	6123      	str	r3, [r4, #16]
 80025d0:	f02b 0304 	bic.w	r3, fp, #4
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	4633      	mov	r3, r6
 80025d8:	4621      	mov	r1, r4
 80025da:	4628      	mov	r0, r5
 80025dc:	9700      	str	r7, [sp, #0]
 80025de:	aa0f      	add	r2, sp, #60	; 0x3c
 80025e0:	f000 f9d6 	bl	8002990 <_printf_common>
 80025e4:	3001      	adds	r0, #1
 80025e6:	f040 8090 	bne.w	800270a <_printf_float+0x1d6>
 80025ea:	f04f 30ff 	mov.w	r0, #4294967295
 80025ee:	b011      	add	sp, #68	; 0x44
 80025f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f4:	4652      	mov	r2, sl
 80025f6:	4643      	mov	r3, r8
 80025f8:	4650      	mov	r0, sl
 80025fa:	4641      	mov	r1, r8
 80025fc:	f7fe faba 	bl	8000b74 <__aeabi_dcmpun>
 8002600:	b148      	cbz	r0, 8002616 <_printf_float+0xe2>
 8002602:	f1b8 0f00 	cmp.w	r8, #0
 8002606:	bfb8      	it	lt
 8002608:	232d      	movlt	r3, #45	; 0x2d
 800260a:	4a80      	ldr	r2, [pc, #512]	; (800280c <_printf_float+0x2d8>)
 800260c:	bfb8      	it	lt
 800260e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <_printf_float+0x2dc>)
 8002614:	e7d3      	b.n	80025be <_printf_float+0x8a>
 8002616:	6863      	ldr	r3, [r4, #4]
 8002618:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	d142      	bne.n	80026a6 <_printf_float+0x172>
 8002620:	2306      	movs	r3, #6
 8002622:	6063      	str	r3, [r4, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	9206      	str	r2, [sp, #24]
 8002628:	aa0e      	add	r2, sp, #56	; 0x38
 800262a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800262e:	aa0d      	add	r2, sp, #52	; 0x34
 8002630:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002634:	9203      	str	r2, [sp, #12]
 8002636:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800263a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	4652      	mov	r2, sl
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4628      	mov	r0, r5
 8002648:	4643      	mov	r3, r8
 800264a:	910b      	str	r1, [sp, #44]	; 0x2c
 800264c:	f7ff fed6 	bl	80023fc <__cvt>
 8002650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002652:	4680      	mov	r8, r0
 8002654:	2947      	cmp	r1, #71	; 0x47
 8002656:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002658:	d108      	bne.n	800266c <_printf_float+0x138>
 800265a:	1cc8      	adds	r0, r1, #3
 800265c:	db02      	blt.n	8002664 <_printf_float+0x130>
 800265e:	6863      	ldr	r3, [r4, #4]
 8002660:	4299      	cmp	r1, r3
 8002662:	dd40      	ble.n	80026e6 <_printf_float+0x1b2>
 8002664:	f1a9 0902 	sub.w	r9, r9, #2
 8002668:	fa5f f989 	uxtb.w	r9, r9
 800266c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002670:	d81f      	bhi.n	80026b2 <_printf_float+0x17e>
 8002672:	464a      	mov	r2, r9
 8002674:	3901      	subs	r1, #1
 8002676:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800267a:	910d      	str	r1, [sp, #52]	; 0x34
 800267c:	f7ff ff1d 	bl	80024ba <__exponent>
 8002680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002682:	4682      	mov	sl, r0
 8002684:	1813      	adds	r3, r2, r0
 8002686:	2a01      	cmp	r2, #1
 8002688:	6123      	str	r3, [r4, #16]
 800268a:	dc02      	bgt.n	8002692 <_printf_float+0x15e>
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	07d2      	lsls	r2, r2, #31
 8002690:	d501      	bpl.n	8002696 <_printf_float+0x162>
 8002692:	3301      	adds	r3, #1
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800269a:	2b00      	cmp	r3, #0
 800269c:	d09b      	beq.n	80025d6 <_printf_float+0xa2>
 800269e:	232d      	movs	r3, #45	; 0x2d
 80026a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026a4:	e797      	b.n	80025d6 <_printf_float+0xa2>
 80026a6:	2947      	cmp	r1, #71	; 0x47
 80026a8:	d1bc      	bne.n	8002624 <_printf_float+0xf0>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ba      	bne.n	8002624 <_printf_float+0xf0>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e7b7      	b.n	8002622 <_printf_float+0xee>
 80026b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80026b6:	d118      	bne.n	80026ea <_printf_float+0x1b6>
 80026b8:	2900      	cmp	r1, #0
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	dd0b      	ble.n	80026d6 <_printf_float+0x1a2>
 80026be:	6121      	str	r1, [r4, #16]
 80026c0:	b913      	cbnz	r3, 80026c8 <_printf_float+0x194>
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	07d0      	lsls	r0, r2, #31
 80026c6:	d502      	bpl.n	80026ce <_printf_float+0x19a>
 80026c8:	3301      	adds	r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	6123      	str	r3, [r4, #16]
 80026ce:	f04f 0a00 	mov.w	sl, #0
 80026d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80026d4:	e7df      	b.n	8002696 <_printf_float+0x162>
 80026d6:	b913      	cbnz	r3, 80026de <_printf_float+0x1aa>
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	07d2      	lsls	r2, r2, #31
 80026dc:	d501      	bpl.n	80026e2 <_printf_float+0x1ae>
 80026de:	3302      	adds	r3, #2
 80026e0:	e7f4      	b.n	80026cc <_printf_float+0x198>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e7f2      	b.n	80026cc <_printf_float+0x198>
 80026e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80026ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ec:	4299      	cmp	r1, r3
 80026ee:	db05      	blt.n	80026fc <_printf_float+0x1c8>
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	6121      	str	r1, [r4, #16]
 80026f4:	07d8      	lsls	r0, r3, #31
 80026f6:	d5ea      	bpl.n	80026ce <_printf_float+0x19a>
 80026f8:	1c4b      	adds	r3, r1, #1
 80026fa:	e7e7      	b.n	80026cc <_printf_float+0x198>
 80026fc:	2900      	cmp	r1, #0
 80026fe:	bfcc      	ite	gt
 8002700:	2201      	movgt	r2, #1
 8002702:	f1c1 0202 	rsble	r2, r1, #2
 8002706:	4413      	add	r3, r2
 8002708:	e7e0      	b.n	80026cc <_printf_float+0x198>
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	055a      	lsls	r2, r3, #21
 800270e:	d407      	bmi.n	8002720 <_printf_float+0x1ec>
 8002710:	6923      	ldr	r3, [r4, #16]
 8002712:	4642      	mov	r2, r8
 8002714:	4631      	mov	r1, r6
 8002716:	4628      	mov	r0, r5
 8002718:	47b8      	blx	r7
 800271a:	3001      	adds	r0, #1
 800271c:	d12b      	bne.n	8002776 <_printf_float+0x242>
 800271e:	e764      	b.n	80025ea <_printf_float+0xb6>
 8002720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002724:	f240 80dd 	bls.w	80028e2 <_printf_float+0x3ae>
 8002728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800272c:	2200      	movs	r2, #0
 800272e:	2300      	movs	r3, #0
 8002730:	f7fe f9ee 	bl	8000b10 <__aeabi_dcmpeq>
 8002734:	2800      	cmp	r0, #0
 8002736:	d033      	beq.n	80027a0 <_printf_float+0x26c>
 8002738:	2301      	movs	r3, #1
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <_printf_float+0x2e0>)
 8002740:	47b8      	blx	r7
 8002742:	3001      	adds	r0, #1
 8002744:	f43f af51 	beq.w	80025ea <_printf_float+0xb6>
 8002748:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800274c:	429a      	cmp	r2, r3
 800274e:	db02      	blt.n	8002756 <_printf_float+0x222>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	07d8      	lsls	r0, r3, #31
 8002754:	d50f      	bpl.n	8002776 <_printf_float+0x242>
 8002756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800275a:	4631      	mov	r1, r6
 800275c:	4628      	mov	r0, r5
 800275e:	47b8      	blx	r7
 8002760:	3001      	adds	r0, #1
 8002762:	f43f af42 	beq.w	80025ea <_printf_float+0xb6>
 8002766:	f04f 0800 	mov.w	r8, #0
 800276a:	f104 091a 	add.w	r9, r4, #26
 800276e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002770:	3b01      	subs	r3, #1
 8002772:	4543      	cmp	r3, r8
 8002774:	dc09      	bgt.n	800278a <_printf_float+0x256>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	079b      	lsls	r3, r3, #30
 800277a:	f100 8104 	bmi.w	8002986 <_printf_float+0x452>
 800277e:	68e0      	ldr	r0, [r4, #12]
 8002780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002782:	4298      	cmp	r0, r3
 8002784:	bfb8      	it	lt
 8002786:	4618      	movlt	r0, r3
 8002788:	e731      	b.n	80025ee <_printf_float+0xba>
 800278a:	2301      	movs	r3, #1
 800278c:	464a      	mov	r2, r9
 800278e:	4631      	mov	r1, r6
 8002790:	4628      	mov	r0, r5
 8002792:	47b8      	blx	r7
 8002794:	3001      	adds	r0, #1
 8002796:	f43f af28 	beq.w	80025ea <_printf_float+0xb6>
 800279a:	f108 0801 	add.w	r8, r8, #1
 800279e:	e7e6      	b.n	800276e <_printf_float+0x23a>
 80027a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	dc38      	bgt.n	8002818 <_printf_float+0x2e4>
 80027a6:	2301      	movs	r3, #1
 80027a8:	4631      	mov	r1, r6
 80027aa:	4628      	mov	r0, r5
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <_printf_float+0x2e0>)
 80027ae:	47b8      	blx	r7
 80027b0:	3001      	adds	r0, #1
 80027b2:	f43f af1a 	beq.w	80025ea <_printf_float+0xb6>
 80027b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80027ba:	4313      	orrs	r3, r2
 80027bc:	d102      	bne.n	80027c4 <_printf_float+0x290>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	07d9      	lsls	r1, r3, #31
 80027c2:	d5d8      	bpl.n	8002776 <_printf_float+0x242>
 80027c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027c8:	4631      	mov	r1, r6
 80027ca:	4628      	mov	r0, r5
 80027cc:	47b8      	blx	r7
 80027ce:	3001      	adds	r0, #1
 80027d0:	f43f af0b 	beq.w	80025ea <_printf_float+0xb6>
 80027d4:	f04f 0900 	mov.w	r9, #0
 80027d8:	f104 0a1a 	add.w	sl, r4, #26
 80027dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027de:	425b      	negs	r3, r3
 80027e0:	454b      	cmp	r3, r9
 80027e2:	dc01      	bgt.n	80027e8 <_printf_float+0x2b4>
 80027e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027e6:	e794      	b.n	8002712 <_printf_float+0x1de>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4652      	mov	r2, sl
 80027ec:	4631      	mov	r1, r6
 80027ee:	4628      	mov	r0, r5
 80027f0:	47b8      	blx	r7
 80027f2:	3001      	adds	r0, #1
 80027f4:	f43f aef9 	beq.w	80025ea <_printf_float+0xb6>
 80027f8:	f109 0901 	add.w	r9, r9, #1
 80027fc:	e7ee      	b.n	80027dc <_printf_float+0x2a8>
 80027fe:	bf00      	nop
 8002800:	7fefffff 	.word	0x7fefffff
 8002804:	08006bbb 	.word	0x08006bbb
 8002808:	08006bbf 	.word	0x08006bbf
 800280c:	08006bc3 	.word	0x08006bc3
 8002810:	08006bc7 	.word	0x08006bc7
 8002814:	08006bcb 	.word	0x08006bcb
 8002818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800281a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800281c:	429a      	cmp	r2, r3
 800281e:	bfa8      	it	ge
 8002820:	461a      	movge	r2, r3
 8002822:	2a00      	cmp	r2, #0
 8002824:	4691      	mov	r9, r2
 8002826:	dc37      	bgt.n	8002898 <_printf_float+0x364>
 8002828:	f04f 0b00 	mov.w	fp, #0
 800282c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002830:	f104 021a 	add.w	r2, r4, #26
 8002834:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002838:	ebaa 0309 	sub.w	r3, sl, r9
 800283c:	455b      	cmp	r3, fp
 800283e:	dc33      	bgt.n	80028a8 <_printf_float+0x374>
 8002840:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002844:	429a      	cmp	r2, r3
 8002846:	db3b      	blt.n	80028c0 <_printf_float+0x38c>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	07da      	lsls	r2, r3, #31
 800284c:	d438      	bmi.n	80028c0 <_printf_float+0x38c>
 800284e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002852:	eba2 0903 	sub.w	r9, r2, r3
 8002856:	eba2 020a 	sub.w	r2, r2, sl
 800285a:	4591      	cmp	r9, r2
 800285c:	bfa8      	it	ge
 800285e:	4691      	movge	r9, r2
 8002860:	f1b9 0f00 	cmp.w	r9, #0
 8002864:	dc34      	bgt.n	80028d0 <_printf_float+0x39c>
 8002866:	f04f 0800 	mov.w	r8, #0
 800286a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800286e:	f104 0a1a 	add.w	sl, r4, #26
 8002872:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	eba3 0309 	sub.w	r3, r3, r9
 800287c:	4543      	cmp	r3, r8
 800287e:	f77f af7a 	ble.w	8002776 <_printf_float+0x242>
 8002882:	2301      	movs	r3, #1
 8002884:	4652      	mov	r2, sl
 8002886:	4631      	mov	r1, r6
 8002888:	4628      	mov	r0, r5
 800288a:	47b8      	blx	r7
 800288c:	3001      	adds	r0, #1
 800288e:	f43f aeac 	beq.w	80025ea <_printf_float+0xb6>
 8002892:	f108 0801 	add.w	r8, r8, #1
 8002896:	e7ec      	b.n	8002872 <_printf_float+0x33e>
 8002898:	4613      	mov	r3, r2
 800289a:	4631      	mov	r1, r6
 800289c:	4642      	mov	r2, r8
 800289e:	4628      	mov	r0, r5
 80028a0:	47b8      	blx	r7
 80028a2:	3001      	adds	r0, #1
 80028a4:	d1c0      	bne.n	8002828 <_printf_float+0x2f4>
 80028a6:	e6a0      	b.n	80025ea <_printf_float+0xb6>
 80028a8:	2301      	movs	r3, #1
 80028aa:	4631      	mov	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80028b0:	47b8      	blx	r7
 80028b2:	3001      	adds	r0, #1
 80028b4:	f43f ae99 	beq.w	80025ea <_printf_float+0xb6>
 80028b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80028ba:	f10b 0b01 	add.w	fp, fp, #1
 80028be:	e7b9      	b.n	8002834 <_printf_float+0x300>
 80028c0:	4631      	mov	r1, r6
 80028c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028c6:	4628      	mov	r0, r5
 80028c8:	47b8      	blx	r7
 80028ca:	3001      	adds	r0, #1
 80028cc:	d1bf      	bne.n	800284e <_printf_float+0x31a>
 80028ce:	e68c      	b.n	80025ea <_printf_float+0xb6>
 80028d0:	464b      	mov	r3, r9
 80028d2:	4631      	mov	r1, r6
 80028d4:	4628      	mov	r0, r5
 80028d6:	eb08 020a 	add.w	r2, r8, sl
 80028da:	47b8      	blx	r7
 80028dc:	3001      	adds	r0, #1
 80028de:	d1c2      	bne.n	8002866 <_printf_float+0x332>
 80028e0:	e683      	b.n	80025ea <_printf_float+0xb6>
 80028e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028e4:	2a01      	cmp	r2, #1
 80028e6:	dc01      	bgt.n	80028ec <_printf_float+0x3b8>
 80028e8:	07db      	lsls	r3, r3, #31
 80028ea:	d539      	bpl.n	8002960 <_printf_float+0x42c>
 80028ec:	2301      	movs	r3, #1
 80028ee:	4642      	mov	r2, r8
 80028f0:	4631      	mov	r1, r6
 80028f2:	4628      	mov	r0, r5
 80028f4:	47b8      	blx	r7
 80028f6:	3001      	adds	r0, #1
 80028f8:	f43f ae77 	beq.w	80025ea <_printf_float+0xb6>
 80028fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002900:	4631      	mov	r1, r6
 8002902:	4628      	mov	r0, r5
 8002904:	47b8      	blx	r7
 8002906:	3001      	adds	r0, #1
 8002908:	f43f ae6f 	beq.w	80025ea <_printf_float+0xb6>
 800290c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002910:	2200      	movs	r2, #0
 8002912:	2300      	movs	r3, #0
 8002914:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8002918:	f7fe f8fa 	bl	8000b10 <__aeabi_dcmpeq>
 800291c:	b9d8      	cbnz	r0, 8002956 <_printf_float+0x422>
 800291e:	f109 33ff 	add.w	r3, r9, #4294967295
 8002922:	f108 0201 	add.w	r2, r8, #1
 8002926:	4631      	mov	r1, r6
 8002928:	4628      	mov	r0, r5
 800292a:	47b8      	blx	r7
 800292c:	3001      	adds	r0, #1
 800292e:	d10e      	bne.n	800294e <_printf_float+0x41a>
 8002930:	e65b      	b.n	80025ea <_printf_float+0xb6>
 8002932:	2301      	movs	r3, #1
 8002934:	464a      	mov	r2, r9
 8002936:	4631      	mov	r1, r6
 8002938:	4628      	mov	r0, r5
 800293a:	47b8      	blx	r7
 800293c:	3001      	adds	r0, #1
 800293e:	f43f ae54 	beq.w	80025ea <_printf_float+0xb6>
 8002942:	f108 0801 	add.w	r8, r8, #1
 8002946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002948:	3b01      	subs	r3, #1
 800294a:	4543      	cmp	r3, r8
 800294c:	dcf1      	bgt.n	8002932 <_printf_float+0x3fe>
 800294e:	4653      	mov	r3, sl
 8002950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002954:	e6de      	b.n	8002714 <_printf_float+0x1e0>
 8002956:	f04f 0800 	mov.w	r8, #0
 800295a:	f104 091a 	add.w	r9, r4, #26
 800295e:	e7f2      	b.n	8002946 <_printf_float+0x412>
 8002960:	2301      	movs	r3, #1
 8002962:	4642      	mov	r2, r8
 8002964:	e7df      	b.n	8002926 <_printf_float+0x3f2>
 8002966:	2301      	movs	r3, #1
 8002968:	464a      	mov	r2, r9
 800296a:	4631      	mov	r1, r6
 800296c:	4628      	mov	r0, r5
 800296e:	47b8      	blx	r7
 8002970:	3001      	adds	r0, #1
 8002972:	f43f ae3a 	beq.w	80025ea <_printf_float+0xb6>
 8002976:	f108 0801 	add.w	r8, r8, #1
 800297a:	68e3      	ldr	r3, [r4, #12]
 800297c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	4543      	cmp	r3, r8
 8002982:	dcf0      	bgt.n	8002966 <_printf_float+0x432>
 8002984:	e6fb      	b.n	800277e <_printf_float+0x24a>
 8002986:	f04f 0800 	mov.w	r8, #0
 800298a:	f104 0919 	add.w	r9, r4, #25
 800298e:	e7f4      	b.n	800297a <_printf_float+0x446>

08002990 <_printf_common>:
 8002990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002994:	4616      	mov	r6, r2
 8002996:	4699      	mov	r9, r3
 8002998:	688a      	ldr	r2, [r1, #8]
 800299a:	690b      	ldr	r3, [r1, #16]
 800299c:	4607      	mov	r7, r0
 800299e:	4293      	cmp	r3, r2
 80029a0:	bfb8      	it	lt
 80029a2:	4613      	movlt	r3, r2
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029aa:	460c      	mov	r4, r1
 80029ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029b0:	b10a      	cbz	r2, 80029b6 <_printf_common+0x26>
 80029b2:	3301      	adds	r3, #1
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	0699      	lsls	r1, r3, #26
 80029ba:	bf42      	ittt	mi
 80029bc:	6833      	ldrmi	r3, [r6, #0]
 80029be:	3302      	addmi	r3, #2
 80029c0:	6033      	strmi	r3, [r6, #0]
 80029c2:	6825      	ldr	r5, [r4, #0]
 80029c4:	f015 0506 	ands.w	r5, r5, #6
 80029c8:	d106      	bne.n	80029d8 <_printf_common+0x48>
 80029ca:	f104 0a19 	add.w	sl, r4, #25
 80029ce:	68e3      	ldr	r3, [r4, #12]
 80029d0:	6832      	ldr	r2, [r6, #0]
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	42ab      	cmp	r3, r5
 80029d6:	dc2b      	bgt.n	8002a30 <_printf_common+0xa0>
 80029d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029dc:	1e13      	subs	r3, r2, #0
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	bf18      	it	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	0692      	lsls	r2, r2, #26
 80029e6:	d430      	bmi.n	8002a4a <_printf_common+0xba>
 80029e8:	4649      	mov	r1, r9
 80029ea:	4638      	mov	r0, r7
 80029ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029f0:	47c0      	blx	r8
 80029f2:	3001      	adds	r0, #1
 80029f4:	d023      	beq.n	8002a3e <_printf_common+0xae>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	6922      	ldr	r2, [r4, #16]
 80029fa:	f003 0306 	and.w	r3, r3, #6
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf14      	ite	ne
 8002a02:	2500      	movne	r5, #0
 8002a04:	6833      	ldreq	r3, [r6, #0]
 8002a06:	f04f 0600 	mov.w	r6, #0
 8002a0a:	bf08      	it	eq
 8002a0c:	68e5      	ldreq	r5, [r4, #12]
 8002a0e:	f104 041a 	add.w	r4, r4, #26
 8002a12:	bf08      	it	eq
 8002a14:	1aed      	subeq	r5, r5, r3
 8002a16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a1a:	bf08      	it	eq
 8002a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfc4      	itt	gt
 8002a24:	1a9b      	subgt	r3, r3, r2
 8002a26:	18ed      	addgt	r5, r5, r3
 8002a28:	42b5      	cmp	r5, r6
 8002a2a:	d11a      	bne.n	8002a62 <_printf_common+0xd2>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e008      	b.n	8002a42 <_printf_common+0xb2>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4652      	mov	r2, sl
 8002a34:	4649      	mov	r1, r9
 8002a36:	4638      	mov	r0, r7
 8002a38:	47c0      	blx	r8
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d103      	bne.n	8002a46 <_printf_common+0xb6>
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a46:	3501      	adds	r5, #1
 8002a48:	e7c1      	b.n	80029ce <_printf_common+0x3e>
 8002a4a:	2030      	movs	r0, #48	; 0x30
 8002a4c:	18e1      	adds	r1, r4, r3
 8002a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a58:	4422      	add	r2, r4
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a60:	e7c2      	b.n	80029e8 <_printf_common+0x58>
 8002a62:	2301      	movs	r3, #1
 8002a64:	4622      	mov	r2, r4
 8002a66:	4649      	mov	r1, r9
 8002a68:	4638      	mov	r0, r7
 8002a6a:	47c0      	blx	r8
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d0e6      	beq.n	8002a3e <_printf_common+0xae>
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7d9      	b.n	8002a28 <_printf_common+0x98>

08002a74 <_printf_i>:
 8002a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	7e0f      	ldrb	r7, [r1, #24]
 8002a7a:	4691      	mov	r9, r2
 8002a7c:	2f78      	cmp	r7, #120	; 0x78
 8002a7e:	4680      	mov	r8, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	469a      	mov	sl, r3
 8002a84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a8a:	d807      	bhi.n	8002a9c <_printf_i+0x28>
 8002a8c:	2f62      	cmp	r7, #98	; 0x62
 8002a8e:	d80a      	bhi.n	8002aa6 <_printf_i+0x32>
 8002a90:	2f00      	cmp	r7, #0
 8002a92:	f000 80d5 	beq.w	8002c40 <_printf_i+0x1cc>
 8002a96:	2f58      	cmp	r7, #88	; 0x58
 8002a98:	f000 80c1 	beq.w	8002c1e <_printf_i+0x1aa>
 8002a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002aa4:	e03a      	b.n	8002b1c <_printf_i+0xa8>
 8002aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aaa:	2b15      	cmp	r3, #21
 8002aac:	d8f6      	bhi.n	8002a9c <_printf_i+0x28>
 8002aae:	a101      	add	r1, pc, #4	; (adr r1, 8002ab4 <_printf_i+0x40>)
 8002ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ab4:	08002b0d 	.word	0x08002b0d
 8002ab8:	08002b21 	.word	0x08002b21
 8002abc:	08002a9d 	.word	0x08002a9d
 8002ac0:	08002a9d 	.word	0x08002a9d
 8002ac4:	08002a9d 	.word	0x08002a9d
 8002ac8:	08002a9d 	.word	0x08002a9d
 8002acc:	08002b21 	.word	0x08002b21
 8002ad0:	08002a9d 	.word	0x08002a9d
 8002ad4:	08002a9d 	.word	0x08002a9d
 8002ad8:	08002a9d 	.word	0x08002a9d
 8002adc:	08002a9d 	.word	0x08002a9d
 8002ae0:	08002c27 	.word	0x08002c27
 8002ae4:	08002b4d 	.word	0x08002b4d
 8002ae8:	08002be1 	.word	0x08002be1
 8002aec:	08002a9d 	.word	0x08002a9d
 8002af0:	08002a9d 	.word	0x08002a9d
 8002af4:	08002c49 	.word	0x08002c49
 8002af8:	08002a9d 	.word	0x08002a9d
 8002afc:	08002b4d 	.word	0x08002b4d
 8002b00:	08002a9d 	.word	0x08002a9d
 8002b04:	08002a9d 	.word	0x08002a9d
 8002b08:	08002be9 	.word	0x08002be9
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	602a      	str	r2, [r5, #0]
 8002b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0a0      	b.n	8002c62 <_printf_i+0x1ee>
 8002b20:	6820      	ldr	r0, [r4, #0]
 8002b22:	682b      	ldr	r3, [r5, #0]
 8002b24:	0607      	lsls	r7, r0, #24
 8002b26:	f103 0104 	add.w	r1, r3, #4
 8002b2a:	6029      	str	r1, [r5, #0]
 8002b2c:	d501      	bpl.n	8002b32 <_printf_i+0xbe>
 8002b2e:	681e      	ldr	r6, [r3, #0]
 8002b30:	e003      	b.n	8002b3a <_printf_i+0xc6>
 8002b32:	0646      	lsls	r6, r0, #25
 8002b34:	d5fb      	bpl.n	8002b2e <_printf_i+0xba>
 8002b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b3a:	2e00      	cmp	r6, #0
 8002b3c:	da03      	bge.n	8002b46 <_printf_i+0xd2>
 8002b3e:	232d      	movs	r3, #45	; 0x2d
 8002b40:	4276      	negs	r6, r6
 8002b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b46:	230a      	movs	r3, #10
 8002b48:	4859      	ldr	r0, [pc, #356]	; (8002cb0 <_printf_i+0x23c>)
 8002b4a:	e012      	b.n	8002b72 <_printf_i+0xfe>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	6820      	ldr	r0, [r4, #0]
 8002b50:	1d19      	adds	r1, r3, #4
 8002b52:	6029      	str	r1, [r5, #0]
 8002b54:	0605      	lsls	r5, r0, #24
 8002b56:	d501      	bpl.n	8002b5c <_printf_i+0xe8>
 8002b58:	681e      	ldr	r6, [r3, #0]
 8002b5a:	e002      	b.n	8002b62 <_printf_i+0xee>
 8002b5c:	0641      	lsls	r1, r0, #25
 8002b5e:	d5fb      	bpl.n	8002b58 <_printf_i+0xe4>
 8002b60:	881e      	ldrh	r6, [r3, #0]
 8002b62:	2f6f      	cmp	r7, #111	; 0x6f
 8002b64:	bf0c      	ite	eq
 8002b66:	2308      	moveq	r3, #8
 8002b68:	230a      	movne	r3, #10
 8002b6a:	4851      	ldr	r0, [pc, #324]	; (8002cb0 <_printf_i+0x23c>)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b72:	6865      	ldr	r5, [r4, #4]
 8002b74:	2d00      	cmp	r5, #0
 8002b76:	bfa8      	it	ge
 8002b78:	6821      	ldrge	r1, [r4, #0]
 8002b7a:	60a5      	str	r5, [r4, #8]
 8002b7c:	bfa4      	itt	ge
 8002b7e:	f021 0104 	bicge.w	r1, r1, #4
 8002b82:	6021      	strge	r1, [r4, #0]
 8002b84:	b90e      	cbnz	r6, 8002b8a <_printf_i+0x116>
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	d04b      	beq.n	8002c22 <_printf_i+0x1ae>
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b90:	fb03 6711 	mls	r7, r3, r1, r6
 8002b94:	5dc7      	ldrb	r7, [r0, r7]
 8002b96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b9a:	4637      	mov	r7, r6
 8002b9c:	42bb      	cmp	r3, r7
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	d9f4      	bls.n	8002b8c <_printf_i+0x118>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d10b      	bne.n	8002bbe <_printf_i+0x14a>
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	07de      	lsls	r6, r3, #31
 8002baa:	d508      	bpl.n	8002bbe <_printf_i+0x14a>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	6861      	ldr	r1, [r4, #4]
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	bfde      	ittt	le
 8002bb4:	2330      	movle	r3, #48	; 0x30
 8002bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bbe:	1b52      	subs	r2, r2, r5
 8002bc0:	6122      	str	r2, [r4, #16]
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	4640      	mov	r0, r8
 8002bc8:	f8cd a000 	str.w	sl, [sp]
 8002bcc:	aa03      	add	r2, sp, #12
 8002bce:	f7ff fedf 	bl	8002990 <_printf_common>
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d14a      	bne.n	8002c6c <_printf_i+0x1f8>
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bda:	b004      	add	sp, #16
 8002bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f043 0320 	orr.w	r3, r3, #32
 8002be6:	6023      	str	r3, [r4, #0]
 8002be8:	2778      	movs	r7, #120	; 0x78
 8002bea:	4832      	ldr	r0, [pc, #200]	; (8002cb4 <_printf_i+0x240>)
 8002bec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	6829      	ldr	r1, [r5, #0]
 8002bf4:	061f      	lsls	r7, r3, #24
 8002bf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bfa:	d402      	bmi.n	8002c02 <_printf_i+0x18e>
 8002bfc:	065f      	lsls	r7, r3, #25
 8002bfe:	bf48      	it	mi
 8002c00:	b2b6      	uxthmi	r6, r6
 8002c02:	07df      	lsls	r7, r3, #31
 8002c04:	bf48      	it	mi
 8002c06:	f043 0320 	orrmi.w	r3, r3, #32
 8002c0a:	6029      	str	r1, [r5, #0]
 8002c0c:	bf48      	it	mi
 8002c0e:	6023      	strmi	r3, [r4, #0]
 8002c10:	b91e      	cbnz	r6, 8002c1a <_printf_i+0x1a6>
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f023 0320 	bic.w	r3, r3, #32
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	e7a6      	b.n	8002b6c <_printf_i+0xf8>
 8002c1e:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <_printf_i+0x23c>)
 8002c20:	e7e4      	b.n	8002bec <_printf_i+0x178>
 8002c22:	4615      	mov	r5, r2
 8002c24:	e7bd      	b.n	8002ba2 <_printf_i+0x12e>
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	6826      	ldr	r6, [r4, #0]
 8002c2a:	1d18      	adds	r0, r3, #4
 8002c2c:	6961      	ldr	r1, [r4, #20]
 8002c2e:	6028      	str	r0, [r5, #0]
 8002c30:	0635      	lsls	r5, r6, #24
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	d501      	bpl.n	8002c3a <_printf_i+0x1c6>
 8002c36:	6019      	str	r1, [r3, #0]
 8002c38:	e002      	b.n	8002c40 <_printf_i+0x1cc>
 8002c3a:	0670      	lsls	r0, r6, #25
 8002c3c:	d5fb      	bpl.n	8002c36 <_printf_i+0x1c2>
 8002c3e:	8019      	strh	r1, [r3, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	4615      	mov	r5, r2
 8002c44:	6123      	str	r3, [r4, #16]
 8002c46:	e7bc      	b.n	8002bc2 <_printf_i+0x14e>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	602a      	str	r2, [r5, #0]
 8002c50:	681d      	ldr	r5, [r3, #0]
 8002c52:	6862      	ldr	r2, [r4, #4]
 8002c54:	4628      	mov	r0, r5
 8002c56:	f000 fbe2 	bl	800341e <memchr>
 8002c5a:	b108      	cbz	r0, 8002c60 <_printf_i+0x1ec>
 8002c5c:	1b40      	subs	r0, r0, r5
 8002c5e:	6060      	str	r0, [r4, #4]
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	6123      	str	r3, [r4, #16]
 8002c64:	2300      	movs	r3, #0
 8002c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c6a:	e7aa      	b.n	8002bc2 <_printf_i+0x14e>
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	4649      	mov	r1, r9
 8002c70:	4640      	mov	r0, r8
 8002c72:	6923      	ldr	r3, [r4, #16]
 8002c74:	47d0      	blx	sl
 8002c76:	3001      	adds	r0, #1
 8002c78:	d0ad      	beq.n	8002bd6 <_printf_i+0x162>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	079b      	lsls	r3, r3, #30
 8002c7e:	d413      	bmi.n	8002ca8 <_printf_i+0x234>
 8002c80:	68e0      	ldr	r0, [r4, #12]
 8002c82:	9b03      	ldr	r3, [sp, #12]
 8002c84:	4298      	cmp	r0, r3
 8002c86:	bfb8      	it	lt
 8002c88:	4618      	movlt	r0, r3
 8002c8a:	e7a6      	b.n	8002bda <_printf_i+0x166>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4632      	mov	r2, r6
 8002c90:	4649      	mov	r1, r9
 8002c92:	4640      	mov	r0, r8
 8002c94:	47d0      	blx	sl
 8002c96:	3001      	adds	r0, #1
 8002c98:	d09d      	beq.n	8002bd6 <_printf_i+0x162>
 8002c9a:	3501      	adds	r5, #1
 8002c9c:	68e3      	ldr	r3, [r4, #12]
 8002c9e:	9903      	ldr	r1, [sp, #12]
 8002ca0:	1a5b      	subs	r3, r3, r1
 8002ca2:	42ab      	cmp	r3, r5
 8002ca4:	dcf2      	bgt.n	8002c8c <_printf_i+0x218>
 8002ca6:	e7eb      	b.n	8002c80 <_printf_i+0x20c>
 8002ca8:	2500      	movs	r5, #0
 8002caa:	f104 0619 	add.w	r6, r4, #25
 8002cae:	e7f5      	b.n	8002c9c <_printf_i+0x228>
 8002cb0:	08006bcd 	.word	0x08006bcd
 8002cb4:	08006bde 	.word	0x08006bde

08002cb8 <_scanf_float>:
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	688b      	ldr	r3, [r1, #8]
 8002cc2:	4617      	mov	r7, r2
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002cca:	bf85      	ittet	hi
 8002ccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002cd0:	195b      	addhi	r3, r3, r5
 8002cd2:	2300      	movls	r3, #0
 8002cd4:	9302      	strhi	r3, [sp, #8]
 8002cd6:	bf88      	it	hi
 8002cd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002cdc:	468b      	mov	fp, r1
 8002cde:	f04f 0500 	mov.w	r5, #0
 8002ce2:	bf8c      	ite	hi
 8002ce4:	608b      	strhi	r3, [r1, #8]
 8002ce6:	9302      	strls	r3, [sp, #8]
 8002ce8:	680b      	ldr	r3, [r1, #0]
 8002cea:	4680      	mov	r8, r0
 8002cec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002cf0:	f84b 3b1c 	str.w	r3, [fp], #28
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	465e      	mov	r6, fp
 8002cf8:	46aa      	mov	sl, r5
 8002cfa:	46a9      	mov	r9, r5
 8002cfc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002d00:	9501      	str	r5, [sp, #4]
 8002d02:	68a2      	ldr	r2, [r4, #8]
 8002d04:	b152      	cbz	r2, 8002d1c <_scanf_float+0x64>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8002d0c:	d864      	bhi.n	8002dd8 <_scanf_float+0x120>
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d83c      	bhi.n	8002d8c <_scanf_float+0xd4>
 8002d12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002d16:	b2c8      	uxtb	r0, r1
 8002d18:	280e      	cmp	r0, #14
 8002d1a:	d93a      	bls.n	8002d92 <_scanf_float+0xda>
 8002d1c:	f1b9 0f00 	cmp.w	r9, #0
 8002d20:	d003      	beq.n	8002d2a <_scanf_float+0x72>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d2e:	f1ba 0f01 	cmp.w	sl, #1
 8002d32:	f200 8113 	bhi.w	8002f5c <_scanf_float+0x2a4>
 8002d36:	455e      	cmp	r6, fp
 8002d38:	f200 8105 	bhi.w	8002f46 <_scanf_float+0x28e>
 8002d3c:	2501      	movs	r5, #1
 8002d3e:	4628      	mov	r0, r5
 8002d40:	b007      	add	sp, #28
 8002d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002d4a:	2a0d      	cmp	r2, #13
 8002d4c:	d8e6      	bhi.n	8002d1c <_scanf_float+0x64>
 8002d4e:	a101      	add	r1, pc, #4	; (adr r1, 8002d54 <_scanf_float+0x9c>)
 8002d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002d54:	08002e93 	.word	0x08002e93
 8002d58:	08002d1d 	.word	0x08002d1d
 8002d5c:	08002d1d 	.word	0x08002d1d
 8002d60:	08002d1d 	.word	0x08002d1d
 8002d64:	08002ef3 	.word	0x08002ef3
 8002d68:	08002ecb 	.word	0x08002ecb
 8002d6c:	08002d1d 	.word	0x08002d1d
 8002d70:	08002d1d 	.word	0x08002d1d
 8002d74:	08002ea1 	.word	0x08002ea1
 8002d78:	08002d1d 	.word	0x08002d1d
 8002d7c:	08002d1d 	.word	0x08002d1d
 8002d80:	08002d1d 	.word	0x08002d1d
 8002d84:	08002d1d 	.word	0x08002d1d
 8002d88:	08002e59 	.word	0x08002e59
 8002d8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002d90:	e7db      	b.n	8002d4a <_scanf_float+0x92>
 8002d92:	290e      	cmp	r1, #14
 8002d94:	d8c2      	bhi.n	8002d1c <_scanf_float+0x64>
 8002d96:	a001      	add	r0, pc, #4	; (adr r0, 8002d9c <_scanf_float+0xe4>)
 8002d98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002d9c:	08002e4b 	.word	0x08002e4b
 8002da0:	08002d1d 	.word	0x08002d1d
 8002da4:	08002e4b 	.word	0x08002e4b
 8002da8:	08002edf 	.word	0x08002edf
 8002dac:	08002d1d 	.word	0x08002d1d
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002e35 	.word	0x08002e35
 8002db8:	08002e35 	.word	0x08002e35
 8002dbc:	08002e35 	.word	0x08002e35
 8002dc0:	08002e35 	.word	0x08002e35
 8002dc4:	08002e35 	.word	0x08002e35
 8002dc8:	08002e35 	.word	0x08002e35
 8002dcc:	08002e35 	.word	0x08002e35
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002e35 	.word	0x08002e35
 8002dd8:	2b6e      	cmp	r3, #110	; 0x6e
 8002dda:	d809      	bhi.n	8002df0 <_scanf_float+0x138>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d8b2      	bhi.n	8002d46 <_scanf_float+0x8e>
 8002de0:	2b54      	cmp	r3, #84	; 0x54
 8002de2:	d077      	beq.n	8002ed4 <_scanf_float+0x21c>
 8002de4:	2b59      	cmp	r3, #89	; 0x59
 8002de6:	d199      	bne.n	8002d1c <_scanf_float+0x64>
 8002de8:	2d07      	cmp	r5, #7
 8002dea:	d197      	bne.n	8002d1c <_scanf_float+0x64>
 8002dec:	2508      	movs	r5, #8
 8002dee:	e029      	b.n	8002e44 <_scanf_float+0x18c>
 8002df0:	2b74      	cmp	r3, #116	; 0x74
 8002df2:	d06f      	beq.n	8002ed4 <_scanf_float+0x21c>
 8002df4:	2b79      	cmp	r3, #121	; 0x79
 8002df6:	e7f6      	b.n	8002de6 <_scanf_float+0x12e>
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	05c8      	lsls	r0, r1, #23
 8002dfc:	d51a      	bpl.n	8002e34 <_scanf_float+0x17c>
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002e04:	6021      	str	r1, [r4, #0]
 8002e06:	f109 0901 	add.w	r9, r9, #1
 8002e0a:	b11b      	cbz	r3, 8002e14 <_scanf_float+0x15c>
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	3201      	adds	r2, #1
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	60a2      	str	r2, [r4, #8]
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	6923      	ldr	r3, [r4, #16]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	6123      	str	r3, [r4, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	f340 8084 	ble.w	8002f34 <_scanf_float+0x27c>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	e766      	b.n	8002d02 <_scanf_float+0x4a>
 8002e34:	eb1a 0f05 	cmn.w	sl, r5
 8002e38:	f47f af70 	bne.w	8002d1c <_scanf_float+0x64>
 8002e3c:	6822      	ldr	r2, [r4, #0]
 8002e3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002e42:	6022      	str	r2, [r4, #0]
 8002e44:	f806 3b01 	strb.w	r3, [r6], #1
 8002e48:	e7e4      	b.n	8002e14 <_scanf_float+0x15c>
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	0610      	lsls	r0, r2, #24
 8002e4e:	f57f af65 	bpl.w	8002d1c <_scanf_float+0x64>
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	e7f4      	b.n	8002e42 <_scanf_float+0x18a>
 8002e58:	f1ba 0f00 	cmp.w	sl, #0
 8002e5c:	d10e      	bne.n	8002e7c <_scanf_float+0x1c4>
 8002e5e:	f1b9 0f00 	cmp.w	r9, #0
 8002e62:	d10e      	bne.n	8002e82 <_scanf_float+0x1ca>
 8002e64:	6822      	ldr	r2, [r4, #0]
 8002e66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002e6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e6e:	d108      	bne.n	8002e82 <_scanf_float+0x1ca>
 8002e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002e74:	f04f 0a01 	mov.w	sl, #1
 8002e78:	6022      	str	r2, [r4, #0]
 8002e7a:	e7e3      	b.n	8002e44 <_scanf_float+0x18c>
 8002e7c:	f1ba 0f02 	cmp.w	sl, #2
 8002e80:	d055      	beq.n	8002f2e <_scanf_float+0x276>
 8002e82:	2d01      	cmp	r5, #1
 8002e84:	d002      	beq.n	8002e8c <_scanf_float+0x1d4>
 8002e86:	2d04      	cmp	r5, #4
 8002e88:	f47f af48 	bne.w	8002d1c <_scanf_float+0x64>
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	b2ed      	uxtb	r5, r5
 8002e90:	e7d8      	b.n	8002e44 <_scanf_float+0x18c>
 8002e92:	f1ba 0f01 	cmp.w	sl, #1
 8002e96:	f47f af41 	bne.w	8002d1c <_scanf_float+0x64>
 8002e9a:	f04f 0a02 	mov.w	sl, #2
 8002e9e:	e7d1      	b.n	8002e44 <_scanf_float+0x18c>
 8002ea0:	b97d      	cbnz	r5, 8002ec2 <_scanf_float+0x20a>
 8002ea2:	f1b9 0f00 	cmp.w	r9, #0
 8002ea6:	f47f af3c 	bne.w	8002d22 <_scanf_float+0x6a>
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002eb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002eb4:	f47f af39 	bne.w	8002d2a <_scanf_float+0x72>
 8002eb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002ebc:	2501      	movs	r5, #1
 8002ebe:	6022      	str	r2, [r4, #0]
 8002ec0:	e7c0      	b.n	8002e44 <_scanf_float+0x18c>
 8002ec2:	2d03      	cmp	r5, #3
 8002ec4:	d0e2      	beq.n	8002e8c <_scanf_float+0x1d4>
 8002ec6:	2d05      	cmp	r5, #5
 8002ec8:	e7de      	b.n	8002e88 <_scanf_float+0x1d0>
 8002eca:	2d02      	cmp	r5, #2
 8002ecc:	f47f af26 	bne.w	8002d1c <_scanf_float+0x64>
 8002ed0:	2503      	movs	r5, #3
 8002ed2:	e7b7      	b.n	8002e44 <_scanf_float+0x18c>
 8002ed4:	2d06      	cmp	r5, #6
 8002ed6:	f47f af21 	bne.w	8002d1c <_scanf_float+0x64>
 8002eda:	2507      	movs	r5, #7
 8002edc:	e7b2      	b.n	8002e44 <_scanf_float+0x18c>
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	0591      	lsls	r1, r2, #22
 8002ee2:	f57f af1b 	bpl.w	8002d1c <_scanf_float+0x64>
 8002ee6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ef0:	e7a8      	b.n	8002e44 <_scanf_float+0x18c>
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002ef8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002efc:	d006      	beq.n	8002f0c <_scanf_float+0x254>
 8002efe:	0550      	lsls	r0, r2, #21
 8002f00:	f57f af0c 	bpl.w	8002d1c <_scanf_float+0x64>
 8002f04:	f1b9 0f00 	cmp.w	r9, #0
 8002f08:	f43f af0f 	beq.w	8002d2a <_scanf_float+0x72>
 8002f0c:	0591      	lsls	r1, r2, #22
 8002f0e:	bf58      	it	pl
 8002f10:	9901      	ldrpl	r1, [sp, #4]
 8002f12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002f16:	bf58      	it	pl
 8002f18:	eba9 0101 	subpl.w	r1, r9, r1
 8002f1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002f20:	f04f 0900 	mov.w	r9, #0
 8002f24:	bf58      	it	pl
 8002f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002f2a:	6022      	str	r2, [r4, #0]
 8002f2c:	e78a      	b.n	8002e44 <_scanf_float+0x18c>
 8002f2e:	f04f 0a03 	mov.w	sl, #3
 8002f32:	e787      	b.n	8002e44 <_scanf_float+0x18c>
 8002f34:	4639      	mov	r1, r7
 8002f36:	4640      	mov	r0, r8
 8002f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002f3c:	4798      	blx	r3
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	f43f aedf 	beq.w	8002d02 <_scanf_float+0x4a>
 8002f44:	e6ea      	b.n	8002d1c <_scanf_float+0x64>
 8002f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f4a:	463a      	mov	r2, r7
 8002f4c:	4640      	mov	r0, r8
 8002f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f52:	4798      	blx	r3
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	e6ec      	b.n	8002d36 <_scanf_float+0x7e>
 8002f5c:	1e6b      	subs	r3, r5, #1
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d825      	bhi.n	8002fae <_scanf_float+0x2f6>
 8002f62:	2d02      	cmp	r5, #2
 8002f64:	d836      	bhi.n	8002fd4 <_scanf_float+0x31c>
 8002f66:	455e      	cmp	r6, fp
 8002f68:	f67f aee8 	bls.w	8002d3c <_scanf_float+0x84>
 8002f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f70:	463a      	mov	r2, r7
 8002f72:	4640      	mov	r0, r8
 8002f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f78:	4798      	blx	r3
 8002f7a:	6923      	ldr	r3, [r4, #16]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	6123      	str	r3, [r4, #16]
 8002f80:	e7f1      	b.n	8002f66 <_scanf_float+0x2ae>
 8002f82:	9802      	ldr	r0, [sp, #8]
 8002f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002f8c:	463a      	mov	r2, r7
 8002f8e:	9002      	str	r0, [sp, #8]
 8002f90:	4640      	mov	r0, r8
 8002f92:	4798      	blx	r3
 8002f94:	6923      	ldr	r3, [r4, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6123      	str	r3, [r4, #16]
 8002f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f9e:	fa5f fa8a 	uxtb.w	sl, sl
 8002fa2:	f1ba 0f02 	cmp.w	sl, #2
 8002fa6:	d1ec      	bne.n	8002f82 <_scanf_float+0x2ca>
 8002fa8:	3d03      	subs	r5, #3
 8002faa:	b2ed      	uxtb	r5, r5
 8002fac:	1b76      	subs	r6, r6, r5
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	05da      	lsls	r2, r3, #23
 8002fb2:	d52f      	bpl.n	8003014 <_scanf_float+0x35c>
 8002fb4:	055b      	lsls	r3, r3, #21
 8002fb6:	d510      	bpl.n	8002fda <_scanf_float+0x322>
 8002fb8:	455e      	cmp	r6, fp
 8002fba:	f67f aebf 	bls.w	8002d3c <_scanf_float+0x84>
 8002fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fc2:	463a      	mov	r2, r7
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002fca:	4798      	blx	r3
 8002fcc:	6923      	ldr	r3, [r4, #16]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6123      	str	r3, [r4, #16]
 8002fd2:	e7f1      	b.n	8002fb8 <_scanf_float+0x300>
 8002fd4:	46aa      	mov	sl, r5
 8002fd6:	9602      	str	r6, [sp, #8]
 8002fd8:	e7df      	b.n	8002f9a <_scanf_float+0x2e2>
 8002fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	2965      	cmp	r1, #101	; 0x65
 8002fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002fe6:	f106 35ff 	add.w	r5, r6, #4294967295
 8002fea:	6123      	str	r3, [r4, #16]
 8002fec:	d00c      	beq.n	8003008 <_scanf_float+0x350>
 8002fee:	2945      	cmp	r1, #69	; 0x45
 8002ff0:	d00a      	beq.n	8003008 <_scanf_float+0x350>
 8002ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ff6:	463a      	mov	r2, r7
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	4798      	blx	r3
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003002:	3b01      	subs	r3, #1
 8003004:	1eb5      	subs	r5, r6, #2
 8003006:	6123      	str	r3, [r4, #16]
 8003008:	463a      	mov	r2, r7
 800300a:	4640      	mov	r0, r8
 800300c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003010:	4798      	blx	r3
 8003012:	462e      	mov	r6, r5
 8003014:	6825      	ldr	r5, [r4, #0]
 8003016:	f015 0510 	ands.w	r5, r5, #16
 800301a:	d155      	bne.n	80030c8 <_scanf_float+0x410>
 800301c:	7035      	strb	r5, [r6, #0]
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d11d      	bne.n	8003066 <_scanf_float+0x3ae>
 800302a:	9b01      	ldr	r3, [sp, #4]
 800302c:	454b      	cmp	r3, r9
 800302e:	eba3 0209 	sub.w	r2, r3, r9
 8003032:	d125      	bne.n	8003080 <_scanf_float+0x3c8>
 8003034:	2200      	movs	r2, #0
 8003036:	4659      	mov	r1, fp
 8003038:	4640      	mov	r0, r8
 800303a:	f002 fc21 	bl	8005880 <_strtod_r>
 800303e:	9b03      	ldr	r3, [sp, #12]
 8003040:	f8d4 c000 	ldr.w	ip, [r4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f01c 0f02 	tst.w	ip, #2
 800304a:	4606      	mov	r6, r0
 800304c:	460f      	mov	r7, r1
 800304e:	f103 0204 	add.w	r2, r3, #4
 8003052:	d020      	beq.n	8003096 <_scanf_float+0x3de>
 8003054:	9903      	ldr	r1, [sp, #12]
 8003056:	600a      	str	r2, [r1, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e9c3 6700 	strd	r6, r7, [r3]
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60e3      	str	r3, [r4, #12]
 8003064:	e66b      	b.n	8002d3e <_scanf_float+0x86>
 8003066:	9b04      	ldr	r3, [sp, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0e3      	beq.n	8003034 <_scanf_float+0x37c>
 800306c:	9905      	ldr	r1, [sp, #20]
 800306e:	230a      	movs	r3, #10
 8003070:	462a      	mov	r2, r5
 8003072:	4640      	mov	r0, r8
 8003074:	3101      	adds	r1, #1
 8003076:	f002 fc87 	bl	8005988 <_strtol_r>
 800307a:	9b04      	ldr	r3, [sp, #16]
 800307c:	9e05      	ldr	r6, [sp, #20]
 800307e:	1ac2      	subs	r2, r0, r3
 8003080:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003084:	429e      	cmp	r6, r3
 8003086:	bf28      	it	cs
 8003088:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800308c:	4630      	mov	r0, r6
 800308e:	490f      	ldr	r1, [pc, #60]	; (80030cc <_scanf_float+0x414>)
 8003090:	f000 f8e2 	bl	8003258 <siprintf>
 8003094:	e7ce      	b.n	8003034 <_scanf_float+0x37c>
 8003096:	f01c 0f04 	tst.w	ip, #4
 800309a:	d1db      	bne.n	8003054 <_scanf_float+0x39c>
 800309c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80030a0:	f8cc 2000 	str.w	r2, [ip]
 80030a4:	f8d3 8000 	ldr.w	r8, [r3]
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	f7fd fd62 	bl	8000b74 <__aeabi_dcmpun>
 80030b0:	b128      	cbz	r0, 80030be <_scanf_float+0x406>
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <_scanf_float+0x418>)
 80030b4:	f000 f9c2 	bl	800343c <nanf>
 80030b8:	f8c8 0000 	str.w	r0, [r8]
 80030bc:	e7cf      	b.n	800305e <_scanf_float+0x3a6>
 80030be:	4630      	mov	r0, r6
 80030c0:	4639      	mov	r1, r7
 80030c2:	f7fd fdb5 	bl	8000c30 <__aeabi_d2f>
 80030c6:	e7f7      	b.n	80030b8 <_scanf_float+0x400>
 80030c8:	2500      	movs	r5, #0
 80030ca:	e638      	b.n	8002d3e <_scanf_float+0x86>
 80030cc:	08006bef 	.word	0x08006bef
 80030d0:	08006f83 	.word	0x08006f83

080030d4 <std>:
 80030d4:	2300      	movs	r3, #0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
 80030da:	e9c0 3300 	strd	r3, r3, [r0]
 80030de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030e2:	6083      	str	r3, [r0, #8]
 80030e4:	8181      	strh	r1, [r0, #12]
 80030e6:	6643      	str	r3, [r0, #100]	; 0x64
 80030e8:	81c2      	strh	r2, [r0, #14]
 80030ea:	6183      	str	r3, [r0, #24]
 80030ec:	4619      	mov	r1, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	305c      	adds	r0, #92	; 0x5c
 80030f2:	f000 f914 	bl	800331e <memset>
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <std+0x58>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	6263      	str	r3, [r4, #36]	; 0x24
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <std+0x5c>)
 80030fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <std+0x60>)
 8003102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <std+0x64>)
 8003106:	6323      	str	r3, [r4, #48]	; 0x30
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <std+0x68>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d006      	beq.n	800311c <std+0x48>
 800310e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003112:	4294      	cmp	r4, r2
 8003114:	d002      	beq.n	800311c <std+0x48>
 8003116:	33d0      	adds	r3, #208	; 0xd0
 8003118:	429c      	cmp	r4, r3
 800311a:	d105      	bne.n	8003128 <std+0x54>
 800311c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f000 b978 	b.w	8003418 <__retarget_lock_init_recursive>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	bf00      	nop
 800312c:	08003299 	.word	0x08003299
 8003130:	080032bb 	.word	0x080032bb
 8003134:	080032f3 	.word	0x080032f3
 8003138:	08003317 	.word	0x08003317
 800313c:	200002dc 	.word	0x200002dc

08003140 <stdio_exit_handler>:
 8003140:	4a02      	ldr	r2, [pc, #8]	; (800314c <stdio_exit_handler+0xc>)
 8003142:	4903      	ldr	r1, [pc, #12]	; (8003150 <stdio_exit_handler+0x10>)
 8003144:	4803      	ldr	r0, [pc, #12]	; (8003154 <stdio_exit_handler+0x14>)
 8003146:	f000 b869 	b.w	800321c <_fwalk_sglue>
 800314a:	bf00      	nop
 800314c:	2000000c 	.word	0x2000000c
 8003150:	08005d41 	.word	0x08005d41
 8003154:	20000018 	.word	0x20000018

08003158 <cleanup_stdio>:
 8003158:	6841      	ldr	r1, [r0, #4]
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <cleanup_stdio+0x34>)
 800315c:	b510      	push	{r4, lr}
 800315e:	4299      	cmp	r1, r3
 8003160:	4604      	mov	r4, r0
 8003162:	d001      	beq.n	8003168 <cleanup_stdio+0x10>
 8003164:	f002 fdec 	bl	8005d40 <_fflush_r>
 8003168:	68a1      	ldr	r1, [r4, #8]
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <cleanup_stdio+0x38>)
 800316c:	4299      	cmp	r1, r3
 800316e:	d002      	beq.n	8003176 <cleanup_stdio+0x1e>
 8003170:	4620      	mov	r0, r4
 8003172:	f002 fde5 	bl	8005d40 <_fflush_r>
 8003176:	68e1      	ldr	r1, [r4, #12]
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <cleanup_stdio+0x3c>)
 800317a:	4299      	cmp	r1, r3
 800317c:	d004      	beq.n	8003188 <cleanup_stdio+0x30>
 800317e:	4620      	mov	r0, r4
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003184:	f002 bddc 	b.w	8005d40 <_fflush_r>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	bf00      	nop
 800318c:	200002dc 	.word	0x200002dc
 8003190:	20000344 	.word	0x20000344
 8003194:	200003ac 	.word	0x200003ac

08003198 <global_stdio_init.part.0>:
 8003198:	b510      	push	{r4, lr}
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <global_stdio_init.part.0+0x30>)
 800319c:	4c0b      	ldr	r4, [pc, #44]	; (80031cc <global_stdio_init.part.0+0x34>)
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <global_stdio_init.part.0+0x38>)
 80031a0:	4620      	mov	r0, r4
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	2104      	movs	r1, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	f7ff ff94 	bl	80030d4 <std>
 80031ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031b0:	2201      	movs	r2, #1
 80031b2:	2109      	movs	r1, #9
 80031b4:	f7ff ff8e 	bl	80030d4 <std>
 80031b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031bc:	2202      	movs	r2, #2
 80031be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c2:	2112      	movs	r1, #18
 80031c4:	f7ff bf86 	b.w	80030d4 <std>
 80031c8:	20000414 	.word	0x20000414
 80031cc:	200002dc 	.word	0x200002dc
 80031d0:	08003141 	.word	0x08003141

080031d4 <__sfp_lock_acquire>:
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <__sfp_lock_acquire+0x8>)
 80031d6:	f000 b920 	b.w	800341a <__retarget_lock_acquire_recursive>
 80031da:	bf00      	nop
 80031dc:	2000041d 	.word	0x2000041d

080031e0 <__sfp_lock_release>:
 80031e0:	4801      	ldr	r0, [pc, #4]	; (80031e8 <__sfp_lock_release+0x8>)
 80031e2:	f000 b91b 	b.w	800341c <__retarget_lock_release_recursive>
 80031e6:	bf00      	nop
 80031e8:	2000041d 	.word	0x2000041d

080031ec <__sinit>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
 80031f0:	f7ff fff0 	bl	80031d4 <__sfp_lock_acquire>
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	b11b      	cbz	r3, 8003200 <__sinit+0x14>
 80031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fc:	f7ff bff0 	b.w	80031e0 <__sfp_lock_release>
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__sinit+0x28>)
 8003202:	6223      	str	r3, [r4, #32]
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__sinit+0x2c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f5      	bne.n	80031f8 <__sinit+0xc>
 800320c:	f7ff ffc4 	bl	8003198 <global_stdio_init.part.0>
 8003210:	e7f2      	b.n	80031f8 <__sinit+0xc>
 8003212:	bf00      	nop
 8003214:	08003159 	.word	0x08003159
 8003218:	20000414 	.word	0x20000414

0800321c <_fwalk_sglue>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	4607      	mov	r7, r0
 8003222:	4688      	mov	r8, r1
 8003224:	4614      	mov	r4, r2
 8003226:	2600      	movs	r6, #0
 8003228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800322c:	f1b9 0901 	subs.w	r9, r9, #1
 8003230:	d505      	bpl.n	800323e <_fwalk_sglue+0x22>
 8003232:	6824      	ldr	r4, [r4, #0]
 8003234:	2c00      	cmp	r4, #0
 8003236:	d1f7      	bne.n	8003228 <_fwalk_sglue+0xc>
 8003238:	4630      	mov	r0, r6
 800323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d907      	bls.n	8003254 <_fwalk_sglue+0x38>
 8003244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003248:	3301      	adds	r3, #1
 800324a:	d003      	beq.n	8003254 <_fwalk_sglue+0x38>
 800324c:	4629      	mov	r1, r5
 800324e:	4638      	mov	r0, r7
 8003250:	47c0      	blx	r8
 8003252:	4306      	orrs	r6, r0
 8003254:	3568      	adds	r5, #104	; 0x68
 8003256:	e7e9      	b.n	800322c <_fwalk_sglue+0x10>

08003258 <siprintf>:
 8003258:	b40e      	push	{r1, r2, r3}
 800325a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800325e:	b500      	push	{lr}
 8003260:	b09c      	sub	sp, #112	; 0x70
 8003262:	ab1d      	add	r3, sp, #116	; 0x74
 8003264:	9002      	str	r0, [sp, #8]
 8003266:	9006      	str	r0, [sp, #24]
 8003268:	9107      	str	r1, [sp, #28]
 800326a:	9104      	str	r1, [sp, #16]
 800326c:	4808      	ldr	r0, [pc, #32]	; (8003290 <siprintf+0x38>)
 800326e:	4909      	ldr	r1, [pc, #36]	; (8003294 <siprintf+0x3c>)
 8003270:	f853 2b04 	ldr.w	r2, [r3], #4
 8003274:	9105      	str	r1, [sp, #20]
 8003276:	6800      	ldr	r0, [r0, #0]
 8003278:	a902      	add	r1, sp, #8
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	f002 fbe0 	bl	8005a40 <_svfiprintf_r>
 8003280:	2200      	movs	r2, #0
 8003282:	9b02      	ldr	r3, [sp, #8]
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	b01c      	add	sp, #112	; 0x70
 8003288:	f85d eb04 	ldr.w	lr, [sp], #4
 800328c:	b003      	add	sp, #12
 800328e:	4770      	bx	lr
 8003290:	20000064 	.word	0x20000064
 8003294:	ffff0208 	.word	0xffff0208

08003298 <__sread>:
 8003298:	b510      	push	{r4, lr}
 800329a:	460c      	mov	r4, r1
 800329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a0:	f000 f86c 	bl	800337c <_read_r>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	bfab      	itete	ge
 80032a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032aa:	89a3      	ldrhlt	r3, [r4, #12]
 80032ac:	181b      	addge	r3, r3, r0
 80032ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032b2:	bfac      	ite	ge
 80032b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80032b6:	81a3      	strhlt	r3, [r4, #12]
 80032b8:	bd10      	pop	{r4, pc}

080032ba <__swrite>:
 80032ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032be:	461f      	mov	r7, r3
 80032c0:	898b      	ldrh	r3, [r1, #12]
 80032c2:	4605      	mov	r5, r0
 80032c4:	05db      	lsls	r3, r3, #23
 80032c6:	460c      	mov	r4, r1
 80032c8:	4616      	mov	r6, r2
 80032ca:	d505      	bpl.n	80032d8 <__swrite+0x1e>
 80032cc:	2302      	movs	r3, #2
 80032ce:	2200      	movs	r2, #0
 80032d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d4:	f000 f840 	bl	8003358 <_lseek_r>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	4632      	mov	r2, r6
 80032dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	4628      	mov	r0, r5
 80032e4:	463b      	mov	r3, r7
 80032e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ee:	f000 b857 	b.w	80033a0 <_write_r>

080032f2 <__sseek>:
 80032f2:	b510      	push	{r4, lr}
 80032f4:	460c      	mov	r4, r1
 80032f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fa:	f000 f82d 	bl	8003358 <_lseek_r>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	bf15      	itete	ne
 8003304:	6560      	strne	r0, [r4, #84]	; 0x54
 8003306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800330a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800330e:	81a3      	strheq	r3, [r4, #12]
 8003310:	bf18      	it	ne
 8003312:	81a3      	strhne	r3, [r4, #12]
 8003314:	bd10      	pop	{r4, pc}

08003316 <__sclose>:
 8003316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331a:	f000 b80d 	b.w	8003338 <_close_r>

0800331e <memset>:
 800331e:	4603      	mov	r3, r0
 8003320:	4402      	add	r2, r0
 8003322:	4293      	cmp	r3, r2
 8003324:	d100      	bne.n	8003328 <memset+0xa>
 8003326:	4770      	bx	lr
 8003328:	f803 1b01 	strb.w	r1, [r3], #1
 800332c:	e7f9      	b.n	8003322 <memset+0x4>
	...

08003330 <_localeconv_r>:
 8003330:	4800      	ldr	r0, [pc, #0]	; (8003334 <_localeconv_r+0x4>)
 8003332:	4770      	bx	lr
 8003334:	20000158 	.word	0x20000158

08003338 <_close_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	2300      	movs	r3, #0
 800333c:	4d05      	ldr	r5, [pc, #20]	; (8003354 <_close_r+0x1c>)
 800333e:	4604      	mov	r4, r0
 8003340:	4608      	mov	r0, r1
 8003342:	602b      	str	r3, [r5, #0]
 8003344:	f7fe fa76 	bl	8001834 <_close>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_close_r+0x1a>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_close_r+0x1a>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000418 	.word	0x20000418

08003358 <_lseek_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	2200      	movs	r2, #0
 8003362:	4d05      	ldr	r5, [pc, #20]	; (8003378 <_lseek_r+0x20>)
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fe fa6e 	bl	8001848 <_lseek>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_lseek_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_lseek_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000418 	.word	0x20000418

0800337c <_read_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	2200      	movs	r2, #0
 8003386:	4d05      	ldr	r5, [pc, #20]	; (800339c <_read_r+0x20>)
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fe fa36 	bl	80017fc <_read>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_read_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_read_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000418 	.word	0x20000418

080033a0 <_write_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	4d05      	ldr	r5, [pc, #20]	; (80033c0 <_write_r+0x20>)
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fe fa32 	bl	8001818 <_write>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_write_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_write_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000418 	.word	0x20000418

080033c4 <__errno>:
 80033c4:	4b01      	ldr	r3, [pc, #4]	; (80033cc <__errno+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000064 	.word	0x20000064

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2600      	movs	r6, #0
 80033d4:	4d0c      	ldr	r5, [pc, #48]	; (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	f003 fbc0 	bl	8006b64 <_init>
 80033e4:	2600      	movs	r6, #0
 80033e6:	4d0a      	ldr	r5, [pc, #40]	; (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <__libc_init_array+0x44>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08006fe4 	.word	0x08006fe4
 800340c:	08006fe4 	.word	0x08006fe4
 8003410:	08006fe4 	.word	0x08006fe4
 8003414:	08006fe8 	.word	0x08006fe8

08003418 <__retarget_lock_init_recursive>:
 8003418:	4770      	bx	lr

0800341a <__retarget_lock_acquire_recursive>:
 800341a:	4770      	bx	lr

0800341c <__retarget_lock_release_recursive>:
 800341c:	4770      	bx	lr

0800341e <memchr>:
 800341e:	4603      	mov	r3, r0
 8003420:	b510      	push	{r4, lr}
 8003422:	b2c9      	uxtb	r1, r1
 8003424:	4402      	add	r2, r0
 8003426:	4293      	cmp	r3, r2
 8003428:	4618      	mov	r0, r3
 800342a:	d101      	bne.n	8003430 <memchr+0x12>
 800342c:	2000      	movs	r0, #0
 800342e:	e003      	b.n	8003438 <memchr+0x1a>
 8003430:	7804      	ldrb	r4, [r0, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	428c      	cmp	r4, r1
 8003436:	d1f6      	bne.n	8003426 <memchr+0x8>
 8003438:	bd10      	pop	{r4, pc}
	...

0800343c <nanf>:
 800343c:	4800      	ldr	r0, [pc, #0]	; (8003440 <nanf+0x4>)
 800343e:	4770      	bx	lr
 8003440:	7fc00000 	.word	0x7fc00000

08003444 <quorem>:
 8003444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	6903      	ldr	r3, [r0, #16]
 800344a:	690c      	ldr	r4, [r1, #16]
 800344c:	4607      	mov	r7, r0
 800344e:	42a3      	cmp	r3, r4
 8003450:	db7f      	blt.n	8003552 <quorem+0x10e>
 8003452:	3c01      	subs	r4, #1
 8003454:	f100 0514 	add.w	r5, r0, #20
 8003458:	f101 0814 	add.w	r8, r1, #20
 800345c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800346a:	3301      	adds	r3, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003472:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003476:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800347a:	d331      	bcc.n	80034e0 <quorem+0x9c>
 800347c:	f04f 0e00 	mov.w	lr, #0
 8003480:	4640      	mov	r0, r8
 8003482:	46ac      	mov	ip, r5
 8003484:	46f2      	mov	sl, lr
 8003486:	f850 2b04 	ldr.w	r2, [r0], #4
 800348a:	b293      	uxth	r3, r2
 800348c:	fb06 e303 	mla	r3, r6, r3, lr
 8003490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003494:	0c1a      	lsrs	r2, r3, #16
 8003496:	b29b      	uxth	r3, r3
 8003498:	fb06 220e 	mla	r2, r6, lr, r2
 800349c:	ebaa 0303 	sub.w	r3, sl, r3
 80034a0:	f8dc a000 	ldr.w	sl, [ip]
 80034a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80034a8:	fa1f fa8a 	uxth.w	sl, sl
 80034ac:	4453      	add	r3, sl
 80034ae:	f8dc a000 	ldr.w	sl, [ip]
 80034b2:	b292      	uxth	r2, r2
 80034b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80034b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034bc:	b29b      	uxth	r3, r3
 80034be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034c2:	4581      	cmp	r9, r0
 80034c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80034c8:	f84c 3b04 	str.w	r3, [ip], #4
 80034cc:	d2db      	bcs.n	8003486 <quorem+0x42>
 80034ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80034d2:	b92b      	cbnz	r3, 80034e0 <quorem+0x9c>
 80034d4:	9b01      	ldr	r3, [sp, #4]
 80034d6:	3b04      	subs	r3, #4
 80034d8:	429d      	cmp	r5, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	d32d      	bcc.n	800353a <quorem+0xf6>
 80034de:	613c      	str	r4, [r7, #16]
 80034e0:	4638      	mov	r0, r7
 80034e2:	f001 f9dd 	bl	80048a0 <__mcmp>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	db23      	blt.n	8003532 <quorem+0xee>
 80034ea:	4629      	mov	r1, r5
 80034ec:	2000      	movs	r0, #0
 80034ee:	3601      	adds	r6, #1
 80034f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80034f4:	f8d1 c000 	ldr.w	ip, [r1]
 80034f8:	b293      	uxth	r3, r2
 80034fa:	1ac3      	subs	r3, r0, r3
 80034fc:	0c12      	lsrs	r2, r2, #16
 80034fe:	fa1f f08c 	uxth.w	r0, ip
 8003502:	4403      	add	r3, r0
 8003504:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800350c:	b29b      	uxth	r3, r3
 800350e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003512:	45c1      	cmp	r9, r8
 8003514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003518:	f841 3b04 	str.w	r3, [r1], #4
 800351c:	d2e8      	bcs.n	80034f0 <quorem+0xac>
 800351e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003526:	b922      	cbnz	r2, 8003532 <quorem+0xee>
 8003528:	3b04      	subs	r3, #4
 800352a:	429d      	cmp	r5, r3
 800352c:	461a      	mov	r2, r3
 800352e:	d30a      	bcc.n	8003546 <quorem+0x102>
 8003530:	613c      	str	r4, [r7, #16]
 8003532:	4630      	mov	r0, r6
 8003534:	b003      	add	sp, #12
 8003536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	3b04      	subs	r3, #4
 800353e:	2a00      	cmp	r2, #0
 8003540:	d1cd      	bne.n	80034de <quorem+0x9a>
 8003542:	3c01      	subs	r4, #1
 8003544:	e7c8      	b.n	80034d8 <quorem+0x94>
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	3b04      	subs	r3, #4
 800354a:	2a00      	cmp	r2, #0
 800354c:	d1f0      	bne.n	8003530 <quorem+0xec>
 800354e:	3c01      	subs	r4, #1
 8003550:	e7eb      	b.n	800352a <quorem+0xe6>
 8003552:	2000      	movs	r0, #0
 8003554:	e7ee      	b.n	8003534 <quorem+0xf0>
	...

08003558 <_dtoa_r>:
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355c:	4616      	mov	r6, r2
 800355e:	461f      	mov	r7, r3
 8003560:	69c4      	ldr	r4, [r0, #28]
 8003562:	b099      	sub	sp, #100	; 0x64
 8003564:	4605      	mov	r5, r0
 8003566:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800356a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800356e:	b974      	cbnz	r4, 800358e <_dtoa_r+0x36>
 8003570:	2010      	movs	r0, #16
 8003572:	f000 fe1d 	bl	80041b0 <malloc>
 8003576:	4602      	mov	r2, r0
 8003578:	61e8      	str	r0, [r5, #28]
 800357a:	b920      	cbnz	r0, 8003586 <_dtoa_r+0x2e>
 800357c:	21ef      	movs	r1, #239	; 0xef
 800357e:	4bac      	ldr	r3, [pc, #688]	; (8003830 <_dtoa_r+0x2d8>)
 8003580:	48ac      	ldr	r0, [pc, #688]	; (8003834 <_dtoa_r+0x2dc>)
 8003582:	f002 fc55 	bl	8005e30 <__assert_func>
 8003586:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800358a:	6004      	str	r4, [r0, #0]
 800358c:	60c4      	str	r4, [r0, #12]
 800358e:	69eb      	ldr	r3, [r5, #28]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	b151      	cbz	r1, 80035aa <_dtoa_r+0x52>
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	2301      	movs	r3, #1
 8003598:	4093      	lsls	r3, r2
 800359a:	604a      	str	r2, [r1, #4]
 800359c:	608b      	str	r3, [r1, #8]
 800359e:	4628      	mov	r0, r5
 80035a0:	f000 fefa 	bl	8004398 <_Bfree>
 80035a4:	2200      	movs	r2, #0
 80035a6:	69eb      	ldr	r3, [r5, #28]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	1e3b      	subs	r3, r7, #0
 80035ac:	bfaf      	iteee	ge
 80035ae:	2300      	movge	r3, #0
 80035b0:	2201      	movlt	r2, #1
 80035b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	9305      	strlt	r3, [sp, #20]
 80035b8:	bfa8      	it	ge
 80035ba:	f8c8 3000 	strge.w	r3, [r8]
 80035be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80035c2:	4b9d      	ldr	r3, [pc, #628]	; (8003838 <_dtoa_r+0x2e0>)
 80035c4:	bfb8      	it	lt
 80035c6:	f8c8 2000 	strlt.w	r2, [r8]
 80035ca:	ea33 0309 	bics.w	r3, r3, r9
 80035ce:	d119      	bne.n	8003604 <_dtoa_r+0xac>
 80035d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80035d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80035dc:	4333      	orrs	r3, r6
 80035de:	f000 8589 	beq.w	80040f4 <_dtoa_r+0xb9c>
 80035e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035e4:	b953      	cbnz	r3, 80035fc <_dtoa_r+0xa4>
 80035e6:	4b95      	ldr	r3, [pc, #596]	; (800383c <_dtoa_r+0x2e4>)
 80035e8:	e023      	b.n	8003632 <_dtoa_r+0xda>
 80035ea:	4b95      	ldr	r3, [pc, #596]	; (8003840 <_dtoa_r+0x2e8>)
 80035ec:	9303      	str	r3, [sp, #12]
 80035ee:	3308      	adds	r3, #8
 80035f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	9803      	ldr	r0, [sp, #12]
 80035f6:	b019      	add	sp, #100	; 0x64
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	4b8f      	ldr	r3, [pc, #572]	; (800383c <_dtoa_r+0x2e4>)
 80035fe:	9303      	str	r3, [sp, #12]
 8003600:	3303      	adds	r3, #3
 8003602:	e7f5      	b.n	80035f0 <_dtoa_r+0x98>
 8003604:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003608:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800360c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003610:	2200      	movs	r2, #0
 8003612:	2300      	movs	r3, #0
 8003614:	f7fd fa7c 	bl	8000b10 <__aeabi_dcmpeq>
 8003618:	4680      	mov	r8, r0
 800361a:	b160      	cbz	r0, 8003636 <_dtoa_r+0xde>
 800361c:	2301      	movs	r3, #1
 800361e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8562 	beq.w	80040ee <_dtoa_r+0xb96>
 800362a:	4b86      	ldr	r3, [pc, #536]	; (8003844 <_dtoa_r+0x2ec>)
 800362c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	9303      	str	r3, [sp, #12]
 8003634:	e7de      	b.n	80035f4 <_dtoa_r+0x9c>
 8003636:	ab16      	add	r3, sp, #88	; 0x58
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	ab17      	add	r3, sp, #92	; 0x5c
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4628      	mov	r0, r5
 8003640:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003644:	f001 fa3c 	bl	8004ac0 <__d2b>
 8003648:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800364c:	4682      	mov	sl, r0
 800364e:	2c00      	cmp	r4, #0
 8003650:	d07e      	beq.n	8003750 <_dtoa_r+0x1f8>
 8003652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003658:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800365c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003660:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003664:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003668:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800366c:	4619      	mov	r1, r3
 800366e:	2200      	movs	r2, #0
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <_dtoa_r+0x2f0>)
 8003672:	f7fc fe2d 	bl	80002d0 <__aeabi_dsub>
 8003676:	a368      	add	r3, pc, #416	; (adr r3, 8003818 <_dtoa_r+0x2c0>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc ffe0 	bl	8000640 <__aeabi_dmul>
 8003680:	a367      	add	r3, pc, #412	; (adr r3, 8003820 <_dtoa_r+0x2c8>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fc fe25 	bl	80002d4 <__adddf3>
 800368a:	4606      	mov	r6, r0
 800368c:	4620      	mov	r0, r4
 800368e:	460f      	mov	r7, r1
 8003690:	f7fc ff6c 	bl	800056c <__aeabi_i2d>
 8003694:	a364      	add	r3, pc, #400	; (adr r3, 8003828 <_dtoa_r+0x2d0>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc ffd1 	bl	8000640 <__aeabi_dmul>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4630      	mov	r0, r6
 80036a4:	4639      	mov	r1, r7
 80036a6:	f7fc fe15 	bl	80002d4 <__adddf3>
 80036aa:	4606      	mov	r6, r0
 80036ac:	460f      	mov	r7, r1
 80036ae:	f7fd fa77 	bl	8000ba0 <__aeabi_d2iz>
 80036b2:	2200      	movs	r2, #0
 80036b4:	4683      	mov	fp, r0
 80036b6:	2300      	movs	r3, #0
 80036b8:	4630      	mov	r0, r6
 80036ba:	4639      	mov	r1, r7
 80036bc:	f7fd fa32 	bl	8000b24 <__aeabi_dcmplt>
 80036c0:	b148      	cbz	r0, 80036d6 <_dtoa_r+0x17e>
 80036c2:	4658      	mov	r0, fp
 80036c4:	f7fc ff52 	bl	800056c <__aeabi_i2d>
 80036c8:	4632      	mov	r2, r6
 80036ca:	463b      	mov	r3, r7
 80036cc:	f7fd fa20 	bl	8000b10 <__aeabi_dcmpeq>
 80036d0:	b908      	cbnz	r0, 80036d6 <_dtoa_r+0x17e>
 80036d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036d6:	f1bb 0f16 	cmp.w	fp, #22
 80036da:	d857      	bhi.n	800378c <_dtoa_r+0x234>
 80036dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036e0:	4b5a      	ldr	r3, [pc, #360]	; (800384c <_dtoa_r+0x2f4>)
 80036e2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fd fa1b 	bl	8000b24 <__aeabi_dcmplt>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d04e      	beq.n	8003790 <_dtoa_r+0x238>
 80036f2:	2300      	movs	r3, #0
 80036f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80036fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036fc:	1b1b      	subs	r3, r3, r4
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	bf46      	itte	mi
 8003702:	f1c3 0901 	rsbmi	r9, r3, #1
 8003706:	2300      	movmi	r3, #0
 8003708:	f04f 0900 	movpl.w	r9, #0
 800370c:	9209      	str	r2, [sp, #36]	; 0x24
 800370e:	bf48      	it	mi
 8003710:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003712:	f1bb 0f00 	cmp.w	fp, #0
 8003716:	db3d      	blt.n	8003794 <_dtoa_r+0x23c>
 8003718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800371a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800371e:	445b      	add	r3, fp
 8003720:	9309      	str	r3, [sp, #36]	; 0x24
 8003722:	2300      	movs	r3, #0
 8003724:	930a      	str	r3, [sp, #40]	; 0x28
 8003726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003728:	2b09      	cmp	r3, #9
 800372a:	d867      	bhi.n	80037fc <_dtoa_r+0x2a4>
 800372c:	2b05      	cmp	r3, #5
 800372e:	bfc4      	itt	gt
 8003730:	3b04      	subgt	r3, #4
 8003732:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003736:	bfc8      	it	gt
 8003738:	2400      	movgt	r4, #0
 800373a:	f1a3 0302 	sub.w	r3, r3, #2
 800373e:	bfd8      	it	le
 8003740:	2401      	movle	r4, #1
 8003742:	2b03      	cmp	r3, #3
 8003744:	f200 8086 	bhi.w	8003854 <_dtoa_r+0x2fc>
 8003748:	e8df f003 	tbb	[pc, r3]
 800374c:	5637392c 	.word	0x5637392c
 8003750:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003754:	441c      	add	r4, r3
 8003756:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800375a:	2b20      	cmp	r3, #32
 800375c:	bfc1      	itttt	gt
 800375e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003762:	fa09 f903 	lslgt.w	r9, r9, r3
 8003766:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800376a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800376e:	bfd6      	itet	le
 8003770:	f1c3 0320 	rsble	r3, r3, #32
 8003774:	ea49 0003 	orrgt.w	r0, r9, r3
 8003778:	fa06 f003 	lslle.w	r0, r6, r3
 800377c:	f7fc fee6 	bl	800054c <__aeabi_ui2d>
 8003780:	2201      	movs	r2, #1
 8003782:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003786:	3c01      	subs	r4, #1
 8003788:	9213      	str	r2, [sp, #76]	; 0x4c
 800378a:	e76f      	b.n	800366c <_dtoa_r+0x114>
 800378c:	2301      	movs	r3, #1
 800378e:	e7b3      	b.n	80036f8 <_dtoa_r+0x1a0>
 8003790:	900f      	str	r0, [sp, #60]	; 0x3c
 8003792:	e7b2      	b.n	80036fa <_dtoa_r+0x1a2>
 8003794:	f1cb 0300 	rsb	r3, fp, #0
 8003798:	930a      	str	r3, [sp, #40]	; 0x28
 800379a:	2300      	movs	r3, #0
 800379c:	eba9 090b 	sub.w	r9, r9, fp
 80037a0:	930e      	str	r3, [sp, #56]	; 0x38
 80037a2:	e7c0      	b.n	8003726 <_dtoa_r+0x1ce>
 80037a4:	2300      	movs	r3, #0
 80037a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80037a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dc55      	bgt.n	800385a <_dtoa_r+0x302>
 80037ae:	2301      	movs	r3, #1
 80037b0:	461a      	mov	r2, r3
 80037b2:	9306      	str	r3, [sp, #24]
 80037b4:	9308      	str	r3, [sp, #32]
 80037b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80037b8:	e00b      	b.n	80037d2 <_dtoa_r+0x27a>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e7f3      	b.n	80037a6 <_dtoa_r+0x24e>
 80037be:	2300      	movs	r3, #0
 80037c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80037c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037c4:	445b      	add	r3, fp
 80037c6:	9306      	str	r3, [sp, #24]
 80037c8:	3301      	adds	r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	9308      	str	r3, [sp, #32]
 80037ce:	bfb8      	it	lt
 80037d0:	2301      	movlt	r3, #1
 80037d2:	2100      	movs	r1, #0
 80037d4:	2204      	movs	r2, #4
 80037d6:	69e8      	ldr	r0, [r5, #28]
 80037d8:	f102 0614 	add.w	r6, r2, #20
 80037dc:	429e      	cmp	r6, r3
 80037de:	d940      	bls.n	8003862 <_dtoa_r+0x30a>
 80037e0:	6041      	str	r1, [r0, #4]
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 fd98 	bl	8004318 <_Balloc>
 80037e8:	9003      	str	r0, [sp, #12]
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d13c      	bne.n	8003868 <_dtoa_r+0x310>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f240 11af 	movw	r1, #431	; 0x1af
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <_dtoa_r+0x2f8>)
 80037f6:	e6c3      	b.n	8003580 <_dtoa_r+0x28>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e7e1      	b.n	80037c0 <_dtoa_r+0x268>
 80037fc:	2401      	movs	r4, #1
 80037fe:	2300      	movs	r3, #0
 8003800:	940b      	str	r4, [sp, #44]	; 0x2c
 8003802:	9322      	str	r3, [sp, #136]	; 0x88
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	2200      	movs	r2, #0
 800380a:	9306      	str	r3, [sp, #24]
 800380c:	9308      	str	r3, [sp, #32]
 800380e:	2312      	movs	r3, #18
 8003810:	e7d1      	b.n	80037b6 <_dtoa_r+0x25e>
 8003812:	bf00      	nop
 8003814:	f3af 8000 	nop.w
 8003818:	636f4361 	.word	0x636f4361
 800381c:	3fd287a7 	.word	0x3fd287a7
 8003820:	8b60c8b3 	.word	0x8b60c8b3
 8003824:	3fc68a28 	.word	0x3fc68a28
 8003828:	509f79fb 	.word	0x509f79fb
 800382c:	3fd34413 	.word	0x3fd34413
 8003830:	08006c01 	.word	0x08006c01
 8003834:	08006c18 	.word	0x08006c18
 8003838:	7ff00000 	.word	0x7ff00000
 800383c:	08006bfd 	.word	0x08006bfd
 8003840:	08006bf4 	.word	0x08006bf4
 8003844:	08006bcc 	.word	0x08006bcc
 8003848:	3ff80000 	.word	0x3ff80000
 800384c:	08006d08 	.word	0x08006d08
 8003850:	08006c70 	.word	0x08006c70
 8003854:	2301      	movs	r3, #1
 8003856:	930b      	str	r3, [sp, #44]	; 0x2c
 8003858:	e7d4      	b.n	8003804 <_dtoa_r+0x2ac>
 800385a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800385c:	9306      	str	r3, [sp, #24]
 800385e:	9308      	str	r3, [sp, #32]
 8003860:	e7b7      	b.n	80037d2 <_dtoa_r+0x27a>
 8003862:	3101      	adds	r1, #1
 8003864:	0052      	lsls	r2, r2, #1
 8003866:	e7b7      	b.n	80037d8 <_dtoa_r+0x280>
 8003868:	69eb      	ldr	r3, [r5, #28]
 800386a:	9a03      	ldr	r2, [sp, #12]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	9b08      	ldr	r3, [sp, #32]
 8003870:	2b0e      	cmp	r3, #14
 8003872:	f200 80a8 	bhi.w	80039c6 <_dtoa_r+0x46e>
 8003876:	2c00      	cmp	r4, #0
 8003878:	f000 80a5 	beq.w	80039c6 <_dtoa_r+0x46e>
 800387c:	f1bb 0f00 	cmp.w	fp, #0
 8003880:	dd34      	ble.n	80038ec <_dtoa_r+0x394>
 8003882:	4b9a      	ldr	r3, [pc, #616]	; (8003aec <_dtoa_r+0x594>)
 8003884:	f00b 020f 	and.w	r2, fp, #15
 8003888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800388c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003890:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003894:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003898:	ea4f 142b 	mov.w	r4, fp, asr #4
 800389c:	d016      	beq.n	80038cc <_dtoa_r+0x374>
 800389e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038a2:	4b93      	ldr	r3, [pc, #588]	; (8003af0 <_dtoa_r+0x598>)
 80038a4:	2703      	movs	r7, #3
 80038a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038aa:	f7fc fff3 	bl	8000894 <__aeabi_ddiv>
 80038ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038b2:	f004 040f 	and.w	r4, r4, #15
 80038b6:	4e8e      	ldr	r6, [pc, #568]	; (8003af0 <_dtoa_r+0x598>)
 80038b8:	b954      	cbnz	r4, 80038d0 <_dtoa_r+0x378>
 80038ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80038be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038c2:	f7fc ffe7 	bl	8000894 <__aeabi_ddiv>
 80038c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038ca:	e029      	b.n	8003920 <_dtoa_r+0x3c8>
 80038cc:	2702      	movs	r7, #2
 80038ce:	e7f2      	b.n	80038b6 <_dtoa_r+0x35e>
 80038d0:	07e1      	lsls	r1, r4, #31
 80038d2:	d508      	bpl.n	80038e6 <_dtoa_r+0x38e>
 80038d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80038dc:	f7fc feb0 	bl	8000640 <__aeabi_dmul>
 80038e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80038e4:	3701      	adds	r7, #1
 80038e6:	1064      	asrs	r4, r4, #1
 80038e8:	3608      	adds	r6, #8
 80038ea:	e7e5      	b.n	80038b8 <_dtoa_r+0x360>
 80038ec:	f000 80a5 	beq.w	8003a3a <_dtoa_r+0x4e2>
 80038f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038f4:	f1cb 0400 	rsb	r4, fp, #0
 80038f8:	4b7c      	ldr	r3, [pc, #496]	; (8003aec <_dtoa_r+0x594>)
 80038fa:	f004 020f 	and.w	r2, r4, #15
 80038fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fe9b 	bl	8000640 <__aeabi_dmul>
 800390a:	2702      	movs	r7, #2
 800390c:	2300      	movs	r3, #0
 800390e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003912:	4e77      	ldr	r6, [pc, #476]	; (8003af0 <_dtoa_r+0x598>)
 8003914:	1124      	asrs	r4, r4, #4
 8003916:	2c00      	cmp	r4, #0
 8003918:	f040 8084 	bne.w	8003a24 <_dtoa_r+0x4cc>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1d2      	bne.n	80038c6 <_dtoa_r+0x36e>
 8003920:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003924:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8087 	beq.w	8003a3e <_dtoa_r+0x4e6>
 8003930:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003934:	2200      	movs	r2, #0
 8003936:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <_dtoa_r+0x59c>)
 8003938:	f7fd f8f4 	bl	8000b24 <__aeabi_dcmplt>
 800393c:	2800      	cmp	r0, #0
 800393e:	d07e      	beq.n	8003a3e <_dtoa_r+0x4e6>
 8003940:	9b08      	ldr	r3, [sp, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07b      	beq.n	8003a3e <_dtoa_r+0x4e6>
 8003946:	9b06      	ldr	r3, [sp, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	dd38      	ble.n	80039be <_dtoa_r+0x466>
 800394c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003950:	2200      	movs	r2, #0
 8003952:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <_dtoa_r+0x5a0>)
 8003954:	f7fc fe74 	bl	8000640 <__aeabi_dmul>
 8003958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800395c:	9c06      	ldr	r4, [sp, #24]
 800395e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003962:	3701      	adds	r7, #1
 8003964:	4638      	mov	r0, r7
 8003966:	f7fc fe01 	bl	800056c <__aeabi_i2d>
 800396a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800396e:	f7fc fe67 	bl	8000640 <__aeabi_dmul>
 8003972:	2200      	movs	r2, #0
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <_dtoa_r+0x5a4>)
 8003976:	f7fc fcad 	bl	80002d4 <__adddf3>
 800397a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800397e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003982:	9611      	str	r6, [sp, #68]	; 0x44
 8003984:	2c00      	cmp	r4, #0
 8003986:	d15d      	bne.n	8003a44 <_dtoa_r+0x4ec>
 8003988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800398c:	2200      	movs	r2, #0
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <_dtoa_r+0x5a8>)
 8003990:	f7fc fc9e 	bl	80002d0 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800399c:	4633      	mov	r3, r6
 800399e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039a0:	f7fd f8de 	bl	8000b60 <__aeabi_dcmpgt>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	f040 8295 	bne.w	8003ed4 <_dtoa_r+0x97c>
 80039aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80039b4:	f7fd f8b6 	bl	8000b24 <__aeabi_dcmplt>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	f040 8289 	bne.w	8003ed0 <_dtoa_r+0x978>
 80039be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80039c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80039c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f2c0 8151 	blt.w	8003c70 <_dtoa_r+0x718>
 80039ce:	f1bb 0f0e 	cmp.w	fp, #14
 80039d2:	f300 814d 	bgt.w	8003c70 <_dtoa_r+0x718>
 80039d6:	4b45      	ldr	r3, [pc, #276]	; (8003aec <_dtoa_r+0x594>)
 80039d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80039dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80039e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f280 80da 	bge.w	8003ba0 <_dtoa_r+0x648>
 80039ec:	9b08      	ldr	r3, [sp, #32]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f300 80d6 	bgt.w	8003ba0 <_dtoa_r+0x648>
 80039f4:	f040 826b 	bne.w	8003ece <_dtoa_r+0x976>
 80039f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039fc:	2200      	movs	r2, #0
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <_dtoa_r+0x5a8>)
 8003a00:	f7fc fe1e 	bl	8000640 <__aeabi_dmul>
 8003a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a08:	f7fd f8a0 	bl	8000b4c <__aeabi_dcmpge>
 8003a0c:	9c08      	ldr	r4, [sp, #32]
 8003a0e:	4626      	mov	r6, r4
 8003a10:	2800      	cmp	r0, #0
 8003a12:	f040 8241 	bne.w	8003e98 <_dtoa_r+0x940>
 8003a16:	2331      	movs	r3, #49	; 0x31
 8003a18:	9f03      	ldr	r7, [sp, #12]
 8003a1a:	f10b 0b01 	add.w	fp, fp, #1
 8003a1e:	f807 3b01 	strb.w	r3, [r7], #1
 8003a22:	e23d      	b.n	8003ea0 <_dtoa_r+0x948>
 8003a24:	07e2      	lsls	r2, r4, #31
 8003a26:	d505      	bpl.n	8003a34 <_dtoa_r+0x4dc>
 8003a28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a2c:	f7fc fe08 	bl	8000640 <__aeabi_dmul>
 8003a30:	2301      	movs	r3, #1
 8003a32:	3701      	adds	r7, #1
 8003a34:	1064      	asrs	r4, r4, #1
 8003a36:	3608      	adds	r6, #8
 8003a38:	e76d      	b.n	8003916 <_dtoa_r+0x3be>
 8003a3a:	2702      	movs	r7, #2
 8003a3c:	e770      	b.n	8003920 <_dtoa_r+0x3c8>
 8003a3e:	46d8      	mov	r8, fp
 8003a40:	9c08      	ldr	r4, [sp, #32]
 8003a42:	e78f      	b.n	8003964 <_dtoa_r+0x40c>
 8003a44:	9903      	ldr	r1, [sp, #12]
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <_dtoa_r+0x594>)
 8003a48:	4421      	add	r1, r4
 8003a4a:	9112      	str	r1, [sp, #72]	; 0x48
 8003a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a52:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	d054      	beq.n	8003b08 <_dtoa_r+0x5b0>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	4928      	ldr	r1, [pc, #160]	; (8003b04 <_dtoa_r+0x5ac>)
 8003a62:	f7fc ff17 	bl	8000894 <__aeabi_ddiv>
 8003a66:	463b      	mov	r3, r7
 8003a68:	4632      	mov	r2, r6
 8003a6a:	f7fc fc31 	bl	80002d0 <__aeabi_dsub>
 8003a6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a72:	9f03      	ldr	r7, [sp, #12]
 8003a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a78:	f7fd f892 	bl	8000ba0 <__aeabi_d2iz>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	f7fc fd75 	bl	800056c <__aeabi_i2d>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a8a:	f7fc fc21 	bl	80002d0 <__aeabi_dsub>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	3430      	adds	r4, #48	; 0x30
 8003a94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a9c:	f807 4b01 	strb.w	r4, [r7], #1
 8003aa0:	f7fd f840 	bl	8000b24 <__aeabi_dcmplt>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d173      	bne.n	8003b90 <_dtoa_r+0x638>
 8003aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aac:	2000      	movs	r0, #0
 8003aae:	4911      	ldr	r1, [pc, #68]	; (8003af4 <_dtoa_r+0x59c>)
 8003ab0:	f7fc fc0e 	bl	80002d0 <__aeabi_dsub>
 8003ab4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ab8:	f7fd f834 	bl	8000b24 <__aeabi_dcmplt>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	f040 80b6 	bne.w	8003c2e <_dtoa_r+0x6d6>
 8003ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ac4:	429f      	cmp	r7, r3
 8003ac6:	f43f af7a 	beq.w	80039be <_dtoa_r+0x466>
 8003aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ace:	2200      	movs	r2, #0
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <_dtoa_r+0x5a0>)
 8003ad2:	f7fc fdb5 	bl	8000640 <__aeabi_dmul>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <_dtoa_r+0x5a0>)
 8003ae2:	f7fc fdad 	bl	8000640 <__aeabi_dmul>
 8003ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aea:	e7c3      	b.n	8003a74 <_dtoa_r+0x51c>
 8003aec:	08006d08 	.word	0x08006d08
 8003af0:	08006ce0 	.word	0x08006ce0
 8003af4:	3ff00000 	.word	0x3ff00000
 8003af8:	40240000 	.word	0x40240000
 8003afc:	401c0000 	.word	0x401c0000
 8003b00:	40140000 	.word	0x40140000
 8003b04:	3fe00000 	.word	0x3fe00000
 8003b08:	4630      	mov	r0, r6
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	f7fc fd98 	bl	8000640 <__aeabi_dmul>
 8003b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b16:	9c03      	ldr	r4, [sp, #12]
 8003b18:	9314      	str	r3, [sp, #80]	; 0x50
 8003b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b1e:	f7fd f83f 	bl	8000ba0 <__aeabi_d2iz>
 8003b22:	9015      	str	r0, [sp, #84]	; 0x54
 8003b24:	f7fc fd22 	bl	800056c <__aeabi_i2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b30:	f7fc fbce 	bl	80002d0 <__aeabi_dsub>
 8003b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b36:	4606      	mov	r6, r0
 8003b38:	3330      	adds	r3, #48	; 0x30
 8003b3a:	f804 3b01 	strb.w	r3, [r4], #1
 8003b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b40:	460f      	mov	r7, r1
 8003b42:	429c      	cmp	r4, r3
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	d124      	bne.n	8003b94 <_dtoa_r+0x63c>
 8003b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b4e:	4baf      	ldr	r3, [pc, #700]	; (8003e0c <_dtoa_r+0x8b4>)
 8003b50:	f7fc fbc0 	bl	80002d4 <__adddf3>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fd f800 	bl	8000b60 <__aeabi_dcmpgt>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d163      	bne.n	8003c2c <_dtoa_r+0x6d4>
 8003b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b68:	2000      	movs	r0, #0
 8003b6a:	49a8      	ldr	r1, [pc, #672]	; (8003e0c <_dtoa_r+0x8b4>)
 8003b6c:	f7fc fbb0 	bl	80002d0 <__aeabi_dsub>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4630      	mov	r0, r6
 8003b76:	4639      	mov	r1, r7
 8003b78:	f7fc ffd4 	bl	8000b24 <__aeabi_dcmplt>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f43f af1e 	beq.w	80039be <_dtoa_r+0x466>
 8003b82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003b84:	1e7b      	subs	r3, r7, #1
 8003b86:	9314      	str	r3, [sp, #80]	; 0x50
 8003b88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003b8c:	2b30      	cmp	r3, #48	; 0x30
 8003b8e:	d0f8      	beq.n	8003b82 <_dtoa_r+0x62a>
 8003b90:	46c3      	mov	fp, r8
 8003b92:	e03b      	b.n	8003c0c <_dtoa_r+0x6b4>
 8003b94:	4b9e      	ldr	r3, [pc, #632]	; (8003e10 <_dtoa_r+0x8b8>)
 8003b96:	f7fc fd53 	bl	8000640 <__aeabi_dmul>
 8003b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b9e:	e7bc      	b.n	8003b1a <_dtoa_r+0x5c2>
 8003ba0:	9f03      	ldr	r7, [sp, #12]
 8003ba2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003baa:	4640      	mov	r0, r8
 8003bac:	4649      	mov	r1, r9
 8003bae:	f7fc fe71 	bl	8000894 <__aeabi_ddiv>
 8003bb2:	f7fc fff5 	bl	8000ba0 <__aeabi_d2iz>
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	f7fc fcd8 	bl	800056c <__aeabi_i2d>
 8003bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bc0:	f7fc fd3e 	bl	8000640 <__aeabi_dmul>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4640      	mov	r0, r8
 8003bca:	4649      	mov	r1, r9
 8003bcc:	f7fc fb80 	bl	80002d0 <__aeabi_dsub>
 8003bd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003bd4:	f807 6b01 	strb.w	r6, [r7], #1
 8003bd8:	9e03      	ldr	r6, [sp, #12]
 8003bda:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003bde:	1bbe      	subs	r6, r7, r6
 8003be0:	45b4      	cmp	ip, r6
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	d136      	bne.n	8003c56 <_dtoa_r+0x6fe>
 8003be8:	f7fc fb74 	bl	80002d4 <__adddf3>
 8003bec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	4689      	mov	r9, r1
 8003bf4:	f7fc ffb4 	bl	8000b60 <__aeabi_dcmpgt>
 8003bf8:	bb58      	cbnz	r0, 8003c52 <_dtoa_r+0x6fa>
 8003bfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f7fc ff85 	bl	8000b10 <__aeabi_dcmpeq>
 8003c06:	b108      	cbz	r0, 8003c0c <_dtoa_r+0x6b4>
 8003c08:	07e3      	lsls	r3, r4, #31
 8003c0a:	d422      	bmi.n	8003c52 <_dtoa_r+0x6fa>
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f000 fbc2 	bl	8004398 <_Bfree>
 8003c14:	2300      	movs	r3, #0
 8003c16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c18:	703b      	strb	r3, [r7, #0]
 8003c1a:	f10b 0301 	add.w	r3, fp, #1
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f43f ace6 	beq.w	80035f4 <_dtoa_r+0x9c>
 8003c28:	601f      	str	r7, [r3, #0]
 8003c2a:	e4e3      	b.n	80035f4 <_dtoa_r+0x9c>
 8003c2c:	4627      	mov	r7, r4
 8003c2e:	463b      	mov	r3, r7
 8003c30:	461f      	mov	r7, r3
 8003c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c36:	2a39      	cmp	r2, #57	; 0x39
 8003c38:	d107      	bne.n	8003c4a <_dtoa_r+0x6f2>
 8003c3a:	9a03      	ldr	r2, [sp, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1f7      	bne.n	8003c30 <_dtoa_r+0x6d8>
 8003c40:	2230      	movs	r2, #48	; 0x30
 8003c42:	9903      	ldr	r1, [sp, #12]
 8003c44:	f108 0801 	add.w	r8, r8, #1
 8003c48:	700a      	strb	r2, [r1, #0]
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	3201      	adds	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e79e      	b.n	8003b90 <_dtoa_r+0x638>
 8003c52:	46d8      	mov	r8, fp
 8003c54:	e7eb      	b.n	8003c2e <_dtoa_r+0x6d6>
 8003c56:	2200      	movs	r2, #0
 8003c58:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <_dtoa_r+0x8b8>)
 8003c5a:	f7fc fcf1 	bl	8000640 <__aeabi_dmul>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2300      	movs	r3, #0
 8003c62:	4680      	mov	r8, r0
 8003c64:	4689      	mov	r9, r1
 8003c66:	f7fc ff53 	bl	8000b10 <__aeabi_dcmpeq>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d09b      	beq.n	8003ba6 <_dtoa_r+0x64e>
 8003c6e:	e7cd      	b.n	8003c0c <_dtoa_r+0x6b4>
 8003c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	f000 80c4 	beq.w	8003e00 <_dtoa_r+0x8a8>
 8003c78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c7a:	2a01      	cmp	r2, #1
 8003c7c:	f300 80a8 	bgt.w	8003dd0 <_dtoa_r+0x878>
 8003c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	f000 80a0 	beq.w	8003dc8 <_dtoa_r+0x870>
 8003c88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c8c:	464f      	mov	r7, r9
 8003c8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	441a      	add	r2, r3
 8003c96:	4628      	mov	r0, r5
 8003c98:	4499      	add	r9, r3
 8003c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c9c:	f000 fc7c 	bl	8004598 <__i2b>
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	b15f      	cbz	r7, 8003cbc <_dtoa_r+0x764>
 8003ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dd08      	ble.n	8003cbc <_dtoa_r+0x764>
 8003caa:	42bb      	cmp	r3, r7
 8003cac:	bfa8      	it	ge
 8003cae:	463b      	movge	r3, r7
 8003cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb2:	eba9 0903 	sub.w	r9, r9, r3
 8003cb6:	1aff      	subs	r7, r7, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	9309      	str	r3, [sp, #36]	; 0x24
 8003cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbe:	b1f3      	cbz	r3, 8003cfe <_dtoa_r+0x7a6>
 8003cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a0 	beq.w	8003e08 <_dtoa_r+0x8b0>
 8003cc8:	2c00      	cmp	r4, #0
 8003cca:	dd10      	ble.n	8003cee <_dtoa_r+0x796>
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4622      	mov	r2, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 fd1f 	bl	8004714 <__pow5mult>
 8003cd6:	4652      	mov	r2, sl
 8003cd8:	4601      	mov	r1, r0
 8003cda:	4606      	mov	r6, r0
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f000 fc71 	bl	80045c4 <__multiply>
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fb56 	bl	8004398 <_Bfree>
 8003cec:	46c2      	mov	sl, r8
 8003cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf0:	1b1a      	subs	r2, r3, r4
 8003cf2:	d004      	beq.n	8003cfe <_dtoa_r+0x7a6>
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 fd0c 	bl	8004714 <__pow5mult>
 8003cfc:	4682      	mov	sl, r0
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 fc49 	bl	8004598 <__i2b>
 8003d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d08:	4604      	mov	r4, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f340 8082 	ble.w	8003e14 <_dtoa_r+0x8bc>
 8003d10:	461a      	mov	r2, r3
 8003d12:	4601      	mov	r1, r0
 8003d14:	4628      	mov	r0, r5
 8003d16:	f000 fcfd 	bl	8004714 <__pow5mult>
 8003d1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	dd7b      	ble.n	8003e1a <_dtoa_r+0x8c2>
 8003d22:	f04f 0800 	mov.w	r8, #0
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d2c:	6918      	ldr	r0, [r3, #16]
 8003d2e:	f000 fbe5 	bl	80044fc <__hi0bits>
 8003d32:	f1c0 0020 	rsb	r0, r0, #32
 8003d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d38:	4418      	add	r0, r3
 8003d3a:	f010 001f 	ands.w	r0, r0, #31
 8003d3e:	f000 8092 	beq.w	8003e66 <_dtoa_r+0x90e>
 8003d42:	f1c0 0320 	rsb	r3, r0, #32
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	f340 8085 	ble.w	8003e56 <_dtoa_r+0x8fe>
 8003d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d4e:	f1c0 001c 	rsb	r0, r0, #28
 8003d52:	4403      	add	r3, r0
 8003d54:	4481      	add	r9, r0
 8003d56:	4407      	add	r7, r0
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	f1b9 0f00 	cmp.w	r9, #0
 8003d5e:	dd05      	ble.n	8003d6c <_dtoa_r+0x814>
 8003d60:	4651      	mov	r1, sl
 8003d62:	464a      	mov	r2, r9
 8003d64:	4628      	mov	r0, r5
 8003d66:	f000 fd2f 	bl	80047c8 <__lshift>
 8003d6a:	4682      	mov	sl, r0
 8003d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	dd05      	ble.n	8003d7e <_dtoa_r+0x826>
 8003d72:	4621      	mov	r1, r4
 8003d74:	461a      	mov	r2, r3
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 fd26 	bl	80047c8 <__lshift>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d072      	beq.n	8003e6a <_dtoa_r+0x912>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4650      	mov	r0, sl
 8003d88:	f000 fd8a 	bl	80048a0 <__mcmp>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	da6c      	bge.n	8003e6a <_dtoa_r+0x912>
 8003d90:	2300      	movs	r3, #0
 8003d92:	4651      	mov	r1, sl
 8003d94:	220a      	movs	r2, #10
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fb20 	bl	80043dc <__multadd>
 8003d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d9e:	4682      	mov	sl, r0
 8003da0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 81ac 	beq.w	8004102 <_dtoa_r+0xbaa>
 8003daa:	2300      	movs	r3, #0
 8003dac:	4631      	mov	r1, r6
 8003dae:	220a      	movs	r2, #10
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 fb13 	bl	80043dc <__multadd>
 8003db6:	9b06      	ldr	r3, [sp, #24]
 8003db8:	4606      	mov	r6, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f300 8093 	bgt.w	8003ee6 <_dtoa_r+0x98e>
 8003dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	dc59      	bgt.n	8003e7a <_dtoa_r+0x922>
 8003dc6:	e08e      	b.n	8003ee6 <_dtoa_r+0x98e>
 8003dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003dca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003dce:	e75d      	b.n	8003c8c <_dtoa_r+0x734>
 8003dd0:	9b08      	ldr	r3, [sp, #32]
 8003dd2:	1e5c      	subs	r4, r3, #1
 8003dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	bfbf      	itttt	lt
 8003dda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003ddc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8003dde:	1ae3      	sublt	r3, r4, r3
 8003de0:	18d2      	addlt	r2, r2, r3
 8003de2:	bfa8      	it	ge
 8003de4:	1b1c      	subge	r4, r3, r4
 8003de6:	9b08      	ldr	r3, [sp, #32]
 8003de8:	bfbe      	ittt	lt
 8003dea:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003dec:	920e      	strlt	r2, [sp, #56]	; 0x38
 8003dee:	2400      	movlt	r4, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb5      	itete	lt
 8003df4:	eba9 0703 	sublt.w	r7, r9, r3
 8003df8:	464f      	movge	r7, r9
 8003dfa:	2300      	movlt	r3, #0
 8003dfc:	9b08      	ldrge	r3, [sp, #32]
 8003dfe:	e747      	b.n	8003c90 <_dtoa_r+0x738>
 8003e00:	464f      	mov	r7, r9
 8003e02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003e06:	e74c      	b.n	8003ca2 <_dtoa_r+0x74a>
 8003e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e0a:	e773      	b.n	8003cf4 <_dtoa_r+0x79c>
 8003e0c:	3fe00000 	.word	0x3fe00000
 8003e10:	40240000 	.word	0x40240000
 8003e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	dc18      	bgt.n	8003e4c <_dtoa_r+0x8f4>
 8003e1a:	9b04      	ldr	r3, [sp, #16]
 8003e1c:	b9b3      	cbnz	r3, 8003e4c <_dtoa_r+0x8f4>
 8003e1e:	9b05      	ldr	r3, [sp, #20]
 8003e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e24:	b993      	cbnz	r3, 8003e4c <_dtoa_r+0x8f4>
 8003e26:	9b05      	ldr	r3, [sp, #20]
 8003e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e2c:	0d1b      	lsrs	r3, r3, #20
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	b17b      	cbz	r3, 8003e52 <_dtoa_r+0x8fa>
 8003e32:	f04f 0801 	mov.w	r8, #1
 8003e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e38:	f109 0901 	add.w	r9, r9, #1
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f47f af6f 	bne.w	8003d26 <_dtoa_r+0x7ce>
 8003e48:	2001      	movs	r0, #1
 8003e4a:	e774      	b.n	8003d36 <_dtoa_r+0x7de>
 8003e4c:	f04f 0800 	mov.w	r8, #0
 8003e50:	e7f6      	b.n	8003e40 <_dtoa_r+0x8e8>
 8003e52:	4698      	mov	r8, r3
 8003e54:	e7f4      	b.n	8003e40 <_dtoa_r+0x8e8>
 8003e56:	d080      	beq.n	8003d5a <_dtoa_r+0x802>
 8003e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e5a:	331c      	adds	r3, #28
 8003e5c:	441a      	add	r2, r3
 8003e5e:	4499      	add	r9, r3
 8003e60:	441f      	add	r7, r3
 8003e62:	9209      	str	r2, [sp, #36]	; 0x24
 8003e64:	e779      	b.n	8003d5a <_dtoa_r+0x802>
 8003e66:	4603      	mov	r3, r0
 8003e68:	e7f6      	b.n	8003e58 <_dtoa_r+0x900>
 8003e6a:	9b08      	ldr	r3, [sp, #32]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dc34      	bgt.n	8003eda <_dtoa_r+0x982>
 8003e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	dd31      	ble.n	8003eda <_dtoa_r+0x982>
 8003e76:	9b08      	ldr	r3, [sp, #32]
 8003e78:	9306      	str	r3, [sp, #24]
 8003e7a:	9b06      	ldr	r3, [sp, #24]
 8003e7c:	b963      	cbnz	r3, 8003e98 <_dtoa_r+0x940>
 8003e7e:	4621      	mov	r1, r4
 8003e80:	2205      	movs	r2, #5
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 faaa 	bl	80043dc <__multadd>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	f000 fd07 	bl	80048a0 <__mcmp>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	f73f adbf 	bgt.w	8003a16 <_dtoa_r+0x4be>
 8003e98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e9a:	9f03      	ldr	r7, [sp, #12]
 8003e9c:	ea6f 0b03 	mvn.w	fp, r3
 8003ea0:	f04f 0800 	mov.w	r8, #0
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fa76 	bl	8004398 <_Bfree>
 8003eac:	2e00      	cmp	r6, #0
 8003eae:	f43f aead 	beq.w	8003c0c <_dtoa_r+0x6b4>
 8003eb2:	f1b8 0f00 	cmp.w	r8, #0
 8003eb6:	d005      	beq.n	8003ec4 <_dtoa_r+0x96c>
 8003eb8:	45b0      	cmp	r8, r6
 8003eba:	d003      	beq.n	8003ec4 <_dtoa_r+0x96c>
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fa6a 	bl	8004398 <_Bfree>
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fa66 	bl	8004398 <_Bfree>
 8003ecc:	e69e      	b.n	8003c0c <_dtoa_r+0x6b4>
 8003ece:	2400      	movs	r4, #0
 8003ed0:	4626      	mov	r6, r4
 8003ed2:	e7e1      	b.n	8003e98 <_dtoa_r+0x940>
 8003ed4:	46c3      	mov	fp, r8
 8003ed6:	4626      	mov	r6, r4
 8003ed8:	e59d      	b.n	8003a16 <_dtoa_r+0x4be>
 8003eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80c8 	beq.w	8004072 <_dtoa_r+0xb1a>
 8003ee2:	9b08      	ldr	r3, [sp, #32]
 8003ee4:	9306      	str	r3, [sp, #24]
 8003ee6:	2f00      	cmp	r7, #0
 8003ee8:	dd05      	ble.n	8003ef6 <_dtoa_r+0x99e>
 8003eea:	4631      	mov	r1, r6
 8003eec:	463a      	mov	r2, r7
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fc6a 	bl	80047c8 <__lshift>
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	f1b8 0f00 	cmp.w	r8, #0
 8003efa:	d05b      	beq.n	8003fb4 <_dtoa_r+0xa5c>
 8003efc:	4628      	mov	r0, r5
 8003efe:	6871      	ldr	r1, [r6, #4]
 8003f00:	f000 fa0a 	bl	8004318 <_Balloc>
 8003f04:	4607      	mov	r7, r0
 8003f06:	b928      	cbnz	r0, 8003f14 <_dtoa_r+0x9bc>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003f0e:	4b81      	ldr	r3, [pc, #516]	; (8004114 <_dtoa_r+0xbbc>)
 8003f10:	f7ff bb36 	b.w	8003580 <_dtoa_r+0x28>
 8003f14:	6932      	ldr	r2, [r6, #16]
 8003f16:	f106 010c 	add.w	r1, r6, #12
 8003f1a:	3202      	adds	r2, #2
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	300c      	adds	r0, #12
 8003f20:	f001 ff72 	bl	8005e08 <memcpy>
 8003f24:	2201      	movs	r2, #1
 8003f26:	4639      	mov	r1, r7
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 fc4d 	bl	80047c8 <__lshift>
 8003f2e:	46b0      	mov	r8, r6
 8003f30:	4606      	mov	r6, r0
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	9a03      	ldr	r2, [sp, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	9308      	str	r3, [sp, #32]
 8003f3a:	9b06      	ldr	r3, [sp, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f40:	9b04      	ldr	r3, [sp, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	930a      	str	r3, [sp, #40]	; 0x28
 8003f48:	9b08      	ldr	r3, [sp, #32]
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4650      	mov	r0, sl
 8003f50:	9304      	str	r3, [sp, #16]
 8003f52:	f7ff fa77 	bl	8003444 <quorem>
 8003f56:	4641      	mov	r1, r8
 8003f58:	9006      	str	r0, [sp, #24]
 8003f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003f5e:	4650      	mov	r0, sl
 8003f60:	f000 fc9e 	bl	80048a0 <__mcmp>
 8003f64:	4632      	mov	r2, r6
 8003f66:	9009      	str	r0, [sp, #36]	; 0x24
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fcb4 	bl	80048d8 <__mdiff>
 8003f70:	68c2      	ldr	r2, [r0, #12]
 8003f72:	4607      	mov	r7, r0
 8003f74:	bb02      	cbnz	r2, 8003fb8 <_dtoa_r+0xa60>
 8003f76:	4601      	mov	r1, r0
 8003f78:	4650      	mov	r0, sl
 8003f7a:	f000 fc91 	bl	80048a0 <__mcmp>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4639      	mov	r1, r7
 8003f82:	4628      	mov	r0, r5
 8003f84:	920c      	str	r2, [sp, #48]	; 0x30
 8003f86:	f000 fa07 	bl	8004398 <_Bfree>
 8003f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f8e:	9f08      	ldr	r7, [sp, #32]
 8003f90:	ea43 0102 	orr.w	r1, r3, r2
 8003f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f96:	4319      	orrs	r1, r3
 8003f98:	d110      	bne.n	8003fbc <_dtoa_r+0xa64>
 8003f9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f9e:	d029      	beq.n	8003ff4 <_dtoa_r+0xa9c>
 8003fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dd02      	ble.n	8003fac <_dtoa_r+0xa54>
 8003fa6:	9b06      	ldr	r3, [sp, #24]
 8003fa8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003fac:	9b04      	ldr	r3, [sp, #16]
 8003fae:	f883 9000 	strb.w	r9, [r3]
 8003fb2:	e777      	b.n	8003ea4 <_dtoa_r+0x94c>
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	e7ba      	b.n	8003f2e <_dtoa_r+0x9d6>
 8003fb8:	2201      	movs	r2, #1
 8003fba:	e7e1      	b.n	8003f80 <_dtoa_r+0xa28>
 8003fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db04      	blt.n	8003fcc <_dtoa_r+0xa74>
 8003fc2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	d120      	bne.n	800400e <_dtoa_r+0xab6>
 8003fcc:	2a00      	cmp	r2, #0
 8003fce:	dded      	ble.n	8003fac <_dtoa_r+0xa54>
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f000 fbf7 	bl	80047c8 <__lshift>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4682      	mov	sl, r0
 8003fde:	f000 fc5f 	bl	80048a0 <__mcmp>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	dc03      	bgt.n	8003fee <_dtoa_r+0xa96>
 8003fe6:	d1e1      	bne.n	8003fac <_dtoa_r+0xa54>
 8003fe8:	f019 0f01 	tst.w	r9, #1
 8003fec:	d0de      	beq.n	8003fac <_dtoa_r+0xa54>
 8003fee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ff2:	d1d8      	bne.n	8003fa6 <_dtoa_r+0xa4e>
 8003ff4:	2339      	movs	r3, #57	; 0x39
 8003ff6:	9a04      	ldr	r2, [sp, #16]
 8003ff8:	7013      	strb	r3, [r2, #0]
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	461f      	mov	r7, r3
 8003ffe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004002:	3b01      	subs	r3, #1
 8004004:	2a39      	cmp	r2, #57	; 0x39
 8004006:	d06b      	beq.n	80040e0 <_dtoa_r+0xb88>
 8004008:	3201      	adds	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e74a      	b.n	8003ea4 <_dtoa_r+0x94c>
 800400e:	2a00      	cmp	r2, #0
 8004010:	dd07      	ble.n	8004022 <_dtoa_r+0xaca>
 8004012:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004016:	d0ed      	beq.n	8003ff4 <_dtoa_r+0xa9c>
 8004018:	9a04      	ldr	r2, [sp, #16]
 800401a:	f109 0301 	add.w	r3, r9, #1
 800401e:	7013      	strb	r3, [r2, #0]
 8004020:	e740      	b.n	8003ea4 <_dtoa_r+0x94c>
 8004022:	9b08      	ldr	r3, [sp, #32]
 8004024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004026:	f803 9c01 	strb.w	r9, [r3, #-1]
 800402a:	4293      	cmp	r3, r2
 800402c:	d042      	beq.n	80040b4 <_dtoa_r+0xb5c>
 800402e:	4651      	mov	r1, sl
 8004030:	2300      	movs	r3, #0
 8004032:	220a      	movs	r2, #10
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f9d1 	bl	80043dc <__multadd>
 800403a:	45b0      	cmp	r8, r6
 800403c:	4682      	mov	sl, r0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	f04f 020a 	mov.w	r2, #10
 8004046:	4641      	mov	r1, r8
 8004048:	4628      	mov	r0, r5
 800404a:	d107      	bne.n	800405c <_dtoa_r+0xb04>
 800404c:	f000 f9c6 	bl	80043dc <__multadd>
 8004050:	4680      	mov	r8, r0
 8004052:	4606      	mov	r6, r0
 8004054:	9b08      	ldr	r3, [sp, #32]
 8004056:	3301      	adds	r3, #1
 8004058:	9308      	str	r3, [sp, #32]
 800405a:	e775      	b.n	8003f48 <_dtoa_r+0x9f0>
 800405c:	f000 f9be 	bl	80043dc <__multadd>
 8004060:	4631      	mov	r1, r6
 8004062:	4680      	mov	r8, r0
 8004064:	2300      	movs	r3, #0
 8004066:	220a      	movs	r2, #10
 8004068:	4628      	mov	r0, r5
 800406a:	f000 f9b7 	bl	80043dc <__multadd>
 800406e:	4606      	mov	r6, r0
 8004070:	e7f0      	b.n	8004054 <_dtoa_r+0xafc>
 8004072:	9b08      	ldr	r3, [sp, #32]
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	9f03      	ldr	r7, [sp, #12]
 8004078:	4621      	mov	r1, r4
 800407a:	4650      	mov	r0, sl
 800407c:	f7ff f9e2 	bl	8003444 <quorem>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004086:	f807 9b01 	strb.w	r9, [r7], #1
 800408a:	1afa      	subs	r2, r7, r3
 800408c:	9b06      	ldr	r3, [sp, #24]
 800408e:	4293      	cmp	r3, r2
 8004090:	dd07      	ble.n	80040a2 <_dtoa_r+0xb4a>
 8004092:	4651      	mov	r1, sl
 8004094:	2300      	movs	r3, #0
 8004096:	220a      	movs	r2, #10
 8004098:	4628      	mov	r0, r5
 800409a:	f000 f99f 	bl	80043dc <__multadd>
 800409e:	4682      	mov	sl, r0
 80040a0:	e7ea      	b.n	8004078 <_dtoa_r+0xb20>
 80040a2:	9b06      	ldr	r3, [sp, #24]
 80040a4:	f04f 0800 	mov.w	r8, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bfcc      	ite	gt
 80040ac:	461f      	movgt	r7, r3
 80040ae:	2701      	movle	r7, #1
 80040b0:	9b03      	ldr	r3, [sp, #12]
 80040b2:	441f      	add	r7, r3
 80040b4:	4651      	mov	r1, sl
 80040b6:	2201      	movs	r2, #1
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fb85 	bl	80047c8 <__lshift>
 80040be:	4621      	mov	r1, r4
 80040c0:	4682      	mov	sl, r0
 80040c2:	f000 fbed 	bl	80048a0 <__mcmp>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	dc97      	bgt.n	8003ffa <_dtoa_r+0xaa2>
 80040ca:	d102      	bne.n	80040d2 <_dtoa_r+0xb7a>
 80040cc:	f019 0f01 	tst.w	r9, #1
 80040d0:	d193      	bne.n	8003ffa <_dtoa_r+0xaa2>
 80040d2:	463b      	mov	r3, r7
 80040d4:	461f      	mov	r7, r3
 80040d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040da:	2a30      	cmp	r2, #48	; 0x30
 80040dc:	d0fa      	beq.n	80040d4 <_dtoa_r+0xb7c>
 80040de:	e6e1      	b.n	8003ea4 <_dtoa_r+0x94c>
 80040e0:	9a03      	ldr	r2, [sp, #12]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d18a      	bne.n	8003ffc <_dtoa_r+0xaa4>
 80040e6:	2331      	movs	r3, #49	; 0x31
 80040e8:	f10b 0b01 	add.w	fp, fp, #1
 80040ec:	e797      	b.n	800401e <_dtoa_r+0xac6>
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <_dtoa_r+0xbc0>)
 80040f0:	f7ff ba9f 	b.w	8003632 <_dtoa_r+0xda>
 80040f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f aa77 	bne.w	80035ea <_dtoa_r+0x92>
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <_dtoa_r+0xbc4>)
 80040fe:	f7ff ba98 	b.w	8003632 <_dtoa_r+0xda>
 8004102:	9b06      	ldr	r3, [sp, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dcb6      	bgt.n	8004076 <_dtoa_r+0xb1e>
 8004108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800410a:	2b02      	cmp	r3, #2
 800410c:	f73f aeb5 	bgt.w	8003e7a <_dtoa_r+0x922>
 8004110:	e7b1      	b.n	8004076 <_dtoa_r+0xb1e>
 8004112:	bf00      	nop
 8004114:	08006c70 	.word	0x08006c70
 8004118:	08006bcb 	.word	0x08006bcb
 800411c:	08006bf4 	.word	0x08006bf4

08004120 <_free_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	2900      	cmp	r1, #0
 8004126:	d040      	beq.n	80041aa <_free_r+0x8a>
 8004128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412c:	1f0c      	subs	r4, r1, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb8      	it	lt
 8004132:	18e4      	addlt	r4, r4, r3
 8004134:	f000 f8e4 	bl	8004300 <__malloc_lock>
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <_free_r+0x8c>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	b933      	cbnz	r3, 800414c <_free_r+0x2c>
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6014      	str	r4, [r2, #0]
 8004142:	4628      	mov	r0, r5
 8004144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004148:	f000 b8e0 	b.w	800430c <__malloc_unlock>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d908      	bls.n	8004162 <_free_r+0x42>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	1821      	adds	r1, r4, r0
 8004154:	428b      	cmp	r3, r1
 8004156:	bf01      	itttt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	e7ed      	b.n	800413e <_free_r+0x1e>
 8004162:	461a      	mov	r2, r3
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b10b      	cbz	r3, 800416c <_free_r+0x4c>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d9fa      	bls.n	8004162 <_free_r+0x42>
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	1850      	adds	r0, r2, r1
 8004170:	42a0      	cmp	r0, r4
 8004172:	d10b      	bne.n	800418c <_free_r+0x6c>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	4401      	add	r1, r0
 8004178:	1850      	adds	r0, r2, r1
 800417a:	4283      	cmp	r3, r0
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	d1e0      	bne.n	8004142 <_free_r+0x22>
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4408      	add	r0, r1
 8004186:	6010      	str	r0, [r2, #0]
 8004188:	6053      	str	r3, [r2, #4]
 800418a:	e7da      	b.n	8004142 <_free_r+0x22>
 800418c:	d902      	bls.n	8004194 <_free_r+0x74>
 800418e:	230c      	movs	r3, #12
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	e7d6      	b.n	8004142 <_free_r+0x22>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	1821      	adds	r1, r4, r0
 8004198:	428b      	cmp	r3, r1
 800419a:	bf01      	itttt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	1809      	addeq	r1, r1, r0
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	6054      	str	r4, [r2, #4]
 80041a8:	e7cb      	b.n	8004142 <_free_r+0x22>
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20000420 	.word	0x20000420

080041b0 <malloc>:
 80041b0:	4b02      	ldr	r3, [pc, #8]	; (80041bc <malloc+0xc>)
 80041b2:	4601      	mov	r1, r0
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f000 b823 	b.w	8004200 <_malloc_r>
 80041ba:	bf00      	nop
 80041bc:	20000064 	.word	0x20000064

080041c0 <sbrk_aligned>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4e0e      	ldr	r6, [pc, #56]	; (80041fc <sbrk_aligned+0x3c>)
 80041c4:	460c      	mov	r4, r1
 80041c6:	6831      	ldr	r1, [r6, #0]
 80041c8:	4605      	mov	r5, r0
 80041ca:	b911      	cbnz	r1, 80041d2 <sbrk_aligned+0x12>
 80041cc:	f001 fe0c 	bl	8005de8 <_sbrk_r>
 80041d0:	6030      	str	r0, [r6, #0]
 80041d2:	4621      	mov	r1, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	f001 fe07 	bl	8005de8 <_sbrk_r>
 80041da:	1c43      	adds	r3, r0, #1
 80041dc:	d00a      	beq.n	80041f4 <sbrk_aligned+0x34>
 80041de:	1cc4      	adds	r4, r0, #3
 80041e0:	f024 0403 	bic.w	r4, r4, #3
 80041e4:	42a0      	cmp	r0, r4
 80041e6:	d007      	beq.n	80041f8 <sbrk_aligned+0x38>
 80041e8:	1a21      	subs	r1, r4, r0
 80041ea:	4628      	mov	r0, r5
 80041ec:	f001 fdfc 	bl	8005de8 <_sbrk_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	d101      	bne.n	80041f8 <sbrk_aligned+0x38>
 80041f4:	f04f 34ff 	mov.w	r4, #4294967295
 80041f8:	4620      	mov	r0, r4
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	20000424 	.word	0x20000424

08004200 <_malloc_r>:
 8004200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004204:	1ccd      	adds	r5, r1, #3
 8004206:	f025 0503 	bic.w	r5, r5, #3
 800420a:	3508      	adds	r5, #8
 800420c:	2d0c      	cmp	r5, #12
 800420e:	bf38      	it	cc
 8004210:	250c      	movcc	r5, #12
 8004212:	2d00      	cmp	r5, #0
 8004214:	4607      	mov	r7, r0
 8004216:	db01      	blt.n	800421c <_malloc_r+0x1c>
 8004218:	42a9      	cmp	r1, r5
 800421a:	d905      	bls.n	8004228 <_malloc_r+0x28>
 800421c:	230c      	movs	r3, #12
 800421e:	2600      	movs	r6, #0
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4630      	mov	r0, r6
 8004224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004228:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042fc <_malloc_r+0xfc>
 800422c:	f000 f868 	bl	8004300 <__malloc_lock>
 8004230:	f8d8 3000 	ldr.w	r3, [r8]
 8004234:	461c      	mov	r4, r3
 8004236:	bb5c      	cbnz	r4, 8004290 <_malloc_r+0x90>
 8004238:	4629      	mov	r1, r5
 800423a:	4638      	mov	r0, r7
 800423c:	f7ff ffc0 	bl	80041c0 <sbrk_aligned>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	4604      	mov	r4, r0
 8004244:	d155      	bne.n	80042f2 <_malloc_r+0xf2>
 8004246:	f8d8 4000 	ldr.w	r4, [r8]
 800424a:	4626      	mov	r6, r4
 800424c:	2e00      	cmp	r6, #0
 800424e:	d145      	bne.n	80042dc <_malloc_r+0xdc>
 8004250:	2c00      	cmp	r4, #0
 8004252:	d048      	beq.n	80042e6 <_malloc_r+0xe6>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	4631      	mov	r1, r6
 8004258:	4638      	mov	r0, r7
 800425a:	eb04 0903 	add.w	r9, r4, r3
 800425e:	f001 fdc3 	bl	8005de8 <_sbrk_r>
 8004262:	4581      	cmp	r9, r0
 8004264:	d13f      	bne.n	80042e6 <_malloc_r+0xe6>
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	4638      	mov	r0, r7
 800426a:	1a6d      	subs	r5, r5, r1
 800426c:	4629      	mov	r1, r5
 800426e:	f7ff ffa7 	bl	80041c0 <sbrk_aligned>
 8004272:	3001      	adds	r0, #1
 8004274:	d037      	beq.n	80042e6 <_malloc_r+0xe6>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	442b      	add	r3, r5
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	f8d8 3000 	ldr.w	r3, [r8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d038      	beq.n	80042f6 <_malloc_r+0xf6>
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	42a2      	cmp	r2, r4
 8004288:	d12b      	bne.n	80042e2 <_malloc_r+0xe2>
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e00f      	b.n	80042b0 <_malloc_r+0xb0>
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	1b52      	subs	r2, r2, r5
 8004294:	d41f      	bmi.n	80042d6 <_malloc_r+0xd6>
 8004296:	2a0b      	cmp	r2, #11
 8004298:	d917      	bls.n	80042ca <_malloc_r+0xca>
 800429a:	1961      	adds	r1, r4, r5
 800429c:	42a3      	cmp	r3, r4
 800429e:	6025      	str	r5, [r4, #0]
 80042a0:	bf18      	it	ne
 80042a2:	6059      	strne	r1, [r3, #4]
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	bf08      	it	eq
 80042a8:	f8c8 1000 	streq.w	r1, [r8]
 80042ac:	5162      	str	r2, [r4, r5]
 80042ae:	604b      	str	r3, [r1, #4]
 80042b0:	4638      	mov	r0, r7
 80042b2:	f104 060b 	add.w	r6, r4, #11
 80042b6:	f000 f829 	bl	800430c <__malloc_unlock>
 80042ba:	f026 0607 	bic.w	r6, r6, #7
 80042be:	1d23      	adds	r3, r4, #4
 80042c0:	1af2      	subs	r2, r6, r3
 80042c2:	d0ae      	beq.n	8004222 <_malloc_r+0x22>
 80042c4:	1b9b      	subs	r3, r3, r6
 80042c6:	50a3      	str	r3, [r4, r2]
 80042c8:	e7ab      	b.n	8004222 <_malloc_r+0x22>
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	d1dd      	bne.n	800428c <_malloc_r+0x8c>
 80042d0:	f8c8 2000 	str.w	r2, [r8]
 80042d4:	e7ec      	b.n	80042b0 <_malloc_r+0xb0>
 80042d6:	4623      	mov	r3, r4
 80042d8:	6864      	ldr	r4, [r4, #4]
 80042da:	e7ac      	b.n	8004236 <_malloc_r+0x36>
 80042dc:	4634      	mov	r4, r6
 80042de:	6876      	ldr	r6, [r6, #4]
 80042e0:	e7b4      	b.n	800424c <_malloc_r+0x4c>
 80042e2:	4613      	mov	r3, r2
 80042e4:	e7cc      	b.n	8004280 <_malloc_r+0x80>
 80042e6:	230c      	movs	r3, #12
 80042e8:	4638      	mov	r0, r7
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	f000 f80e 	bl	800430c <__malloc_unlock>
 80042f0:	e797      	b.n	8004222 <_malloc_r+0x22>
 80042f2:	6025      	str	r5, [r4, #0]
 80042f4:	e7dc      	b.n	80042b0 <_malloc_r+0xb0>
 80042f6:	605b      	str	r3, [r3, #4]
 80042f8:	deff      	udf	#255	; 0xff
 80042fa:	bf00      	nop
 80042fc:	20000420 	.word	0x20000420

08004300 <__malloc_lock>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__malloc_lock+0x8>)
 8004302:	f7ff b88a 	b.w	800341a <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	2000041c 	.word	0x2000041c

0800430c <__malloc_unlock>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__malloc_unlock+0x8>)
 800430e:	f7ff b885 	b.w	800341c <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	2000041c 	.word	0x2000041c

08004318 <_Balloc>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	69c6      	ldr	r6, [r0, #28]
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
 8004320:	b976      	cbnz	r6, 8004340 <_Balloc+0x28>
 8004322:	2010      	movs	r0, #16
 8004324:	f7ff ff44 	bl	80041b0 <malloc>
 8004328:	4602      	mov	r2, r0
 800432a:	61e0      	str	r0, [r4, #28]
 800432c:	b920      	cbnz	r0, 8004338 <_Balloc+0x20>
 800432e:	216b      	movs	r1, #107	; 0x6b
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <_Balloc+0x78>)
 8004332:	4818      	ldr	r0, [pc, #96]	; (8004394 <_Balloc+0x7c>)
 8004334:	f001 fd7c 	bl	8005e30 <__assert_func>
 8004338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800433c:	6006      	str	r6, [r0, #0]
 800433e:	60c6      	str	r6, [r0, #12]
 8004340:	69e6      	ldr	r6, [r4, #28]
 8004342:	68f3      	ldr	r3, [r6, #12]
 8004344:	b183      	cbz	r3, 8004368 <_Balloc+0x50>
 8004346:	69e3      	ldr	r3, [r4, #28]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800434e:	b9b8      	cbnz	r0, 8004380 <_Balloc+0x68>
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f605 	lsl.w	r6, r1, r5
 8004356:	1d72      	adds	r2, r6, #5
 8004358:	4620      	mov	r0, r4
 800435a:	0092      	lsls	r2, r2, #2
 800435c:	f001 fd86 	bl	8005e6c <_calloc_r>
 8004360:	b160      	cbz	r0, 800437c <_Balloc+0x64>
 8004362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004366:	e00e      	b.n	8004386 <_Balloc+0x6e>
 8004368:	2221      	movs	r2, #33	; 0x21
 800436a:	2104      	movs	r1, #4
 800436c:	4620      	mov	r0, r4
 800436e:	f001 fd7d 	bl	8005e6c <_calloc_r>
 8004372:	69e3      	ldr	r3, [r4, #28]
 8004374:	60f0      	str	r0, [r6, #12]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e4      	bne.n	8004346 <_Balloc+0x2e>
 800437c:	2000      	movs	r0, #0
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	6802      	ldr	r2, [r0, #0]
 8004382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004386:	2300      	movs	r3, #0
 8004388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800438c:	e7f7      	b.n	800437e <_Balloc+0x66>
 800438e:	bf00      	nop
 8004390:	08006c01 	.word	0x08006c01
 8004394:	08006c81 	.word	0x08006c81

08004398 <_Bfree>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	69c6      	ldr	r6, [r0, #28]
 800439c:	4605      	mov	r5, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	b976      	cbnz	r6, 80043c0 <_Bfree+0x28>
 80043a2:	2010      	movs	r0, #16
 80043a4:	f7ff ff04 	bl	80041b0 <malloc>
 80043a8:	4602      	mov	r2, r0
 80043aa:	61e8      	str	r0, [r5, #28]
 80043ac:	b920      	cbnz	r0, 80043b8 <_Bfree+0x20>
 80043ae:	218f      	movs	r1, #143	; 0x8f
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <_Bfree+0x3c>)
 80043b2:	4809      	ldr	r0, [pc, #36]	; (80043d8 <_Bfree+0x40>)
 80043b4:	f001 fd3c 	bl	8005e30 <__assert_func>
 80043b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043bc:	6006      	str	r6, [r0, #0]
 80043be:	60c6      	str	r6, [r0, #12]
 80043c0:	b13c      	cbz	r4, 80043d2 <_Bfree+0x3a>
 80043c2:	69eb      	ldr	r3, [r5, #28]
 80043c4:	6862      	ldr	r2, [r4, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043cc:	6021      	str	r1, [r4, #0]
 80043ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	08006c01 	.word	0x08006c01
 80043d8:	08006c81 	.word	0x08006c81

080043dc <__multadd>:
 80043dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	4607      	mov	r7, r0
 80043e2:	460c      	mov	r4, r1
 80043e4:	461e      	mov	r6, r3
 80043e6:	2000      	movs	r0, #0
 80043e8:	690d      	ldr	r5, [r1, #16]
 80043ea:	f101 0c14 	add.w	ip, r1, #20
 80043ee:	f8dc 3000 	ldr.w	r3, [ip]
 80043f2:	3001      	adds	r0, #1
 80043f4:	b299      	uxth	r1, r3
 80043f6:	fb02 6101 	mla	r1, r2, r1, r6
 80043fa:	0c1e      	lsrs	r6, r3, #16
 80043fc:	0c0b      	lsrs	r3, r1, #16
 80043fe:	fb02 3306 	mla	r3, r2, r6, r3
 8004402:	b289      	uxth	r1, r1
 8004404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004408:	4285      	cmp	r5, r0
 800440a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800440e:	f84c 1b04 	str.w	r1, [ip], #4
 8004412:	dcec      	bgt.n	80043ee <__multadd+0x12>
 8004414:	b30e      	cbz	r6, 800445a <__multadd+0x7e>
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	42ab      	cmp	r3, r5
 800441a:	dc19      	bgt.n	8004450 <__multadd+0x74>
 800441c:	6861      	ldr	r1, [r4, #4]
 800441e:	4638      	mov	r0, r7
 8004420:	3101      	adds	r1, #1
 8004422:	f7ff ff79 	bl	8004318 <_Balloc>
 8004426:	4680      	mov	r8, r0
 8004428:	b928      	cbnz	r0, 8004436 <__multadd+0x5a>
 800442a:	4602      	mov	r2, r0
 800442c:	21ba      	movs	r1, #186	; 0xba
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <__multadd+0x84>)
 8004430:	480c      	ldr	r0, [pc, #48]	; (8004464 <__multadd+0x88>)
 8004432:	f001 fcfd 	bl	8005e30 <__assert_func>
 8004436:	6922      	ldr	r2, [r4, #16]
 8004438:	f104 010c 	add.w	r1, r4, #12
 800443c:	3202      	adds	r2, #2
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	300c      	adds	r0, #12
 8004442:	f001 fce1 	bl	8005e08 <memcpy>
 8004446:	4621      	mov	r1, r4
 8004448:	4638      	mov	r0, r7
 800444a:	f7ff ffa5 	bl	8004398 <_Bfree>
 800444e:	4644      	mov	r4, r8
 8004450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004454:	3501      	adds	r5, #1
 8004456:	615e      	str	r6, [r3, #20]
 8004458:	6125      	str	r5, [r4, #16]
 800445a:	4620      	mov	r0, r4
 800445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004460:	08006c70 	.word	0x08006c70
 8004464:	08006c81 	.word	0x08006c81

08004468 <__s2b>:
 8004468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800446c:	4615      	mov	r5, r2
 800446e:	2209      	movs	r2, #9
 8004470:	461f      	mov	r7, r3
 8004472:	3308      	adds	r3, #8
 8004474:	460c      	mov	r4, r1
 8004476:	fb93 f3f2 	sdiv	r3, r3, r2
 800447a:	4606      	mov	r6, r0
 800447c:	2201      	movs	r2, #1
 800447e:	2100      	movs	r1, #0
 8004480:	429a      	cmp	r2, r3
 8004482:	db09      	blt.n	8004498 <__s2b+0x30>
 8004484:	4630      	mov	r0, r6
 8004486:	f7ff ff47 	bl	8004318 <_Balloc>
 800448a:	b940      	cbnz	r0, 800449e <__s2b+0x36>
 800448c:	4602      	mov	r2, r0
 800448e:	21d3      	movs	r1, #211	; 0xd3
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <__s2b+0x8c>)
 8004492:	4819      	ldr	r0, [pc, #100]	; (80044f8 <__s2b+0x90>)
 8004494:	f001 fccc 	bl	8005e30 <__assert_func>
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	3101      	adds	r1, #1
 800449c:	e7f0      	b.n	8004480 <__s2b+0x18>
 800449e:	9b08      	ldr	r3, [sp, #32]
 80044a0:	2d09      	cmp	r5, #9
 80044a2:	6143      	str	r3, [r0, #20]
 80044a4:	f04f 0301 	mov.w	r3, #1
 80044a8:	6103      	str	r3, [r0, #16]
 80044aa:	dd16      	ble.n	80044da <__s2b+0x72>
 80044ac:	f104 0909 	add.w	r9, r4, #9
 80044b0:	46c8      	mov	r8, r9
 80044b2:	442c      	add	r4, r5
 80044b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80044b8:	4601      	mov	r1, r0
 80044ba:	220a      	movs	r2, #10
 80044bc:	4630      	mov	r0, r6
 80044be:	3b30      	subs	r3, #48	; 0x30
 80044c0:	f7ff ff8c 	bl	80043dc <__multadd>
 80044c4:	45a0      	cmp	r8, r4
 80044c6:	d1f5      	bne.n	80044b4 <__s2b+0x4c>
 80044c8:	f1a5 0408 	sub.w	r4, r5, #8
 80044cc:	444c      	add	r4, r9
 80044ce:	1b2d      	subs	r5, r5, r4
 80044d0:	1963      	adds	r3, r4, r5
 80044d2:	42bb      	cmp	r3, r7
 80044d4:	db04      	blt.n	80044e0 <__s2b+0x78>
 80044d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044da:	2509      	movs	r5, #9
 80044dc:	340a      	adds	r4, #10
 80044de:	e7f6      	b.n	80044ce <__s2b+0x66>
 80044e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044e4:	4601      	mov	r1, r0
 80044e6:	220a      	movs	r2, #10
 80044e8:	4630      	mov	r0, r6
 80044ea:	3b30      	subs	r3, #48	; 0x30
 80044ec:	f7ff ff76 	bl	80043dc <__multadd>
 80044f0:	e7ee      	b.n	80044d0 <__s2b+0x68>
 80044f2:	bf00      	nop
 80044f4:	08006c70 	.word	0x08006c70
 80044f8:	08006c81 	.word	0x08006c81

080044fc <__hi0bits>:
 80044fc:	0c02      	lsrs	r2, r0, #16
 80044fe:	0412      	lsls	r2, r2, #16
 8004500:	4603      	mov	r3, r0
 8004502:	b9ca      	cbnz	r2, 8004538 <__hi0bits+0x3c>
 8004504:	0403      	lsls	r3, r0, #16
 8004506:	2010      	movs	r0, #16
 8004508:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800450c:	bf04      	itt	eq
 800450e:	021b      	lsleq	r3, r3, #8
 8004510:	3008      	addeq	r0, #8
 8004512:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004516:	bf04      	itt	eq
 8004518:	011b      	lsleq	r3, r3, #4
 800451a:	3004      	addeq	r0, #4
 800451c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004520:	bf04      	itt	eq
 8004522:	009b      	lsleq	r3, r3, #2
 8004524:	3002      	addeq	r0, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	db05      	blt.n	8004536 <__hi0bits+0x3a>
 800452a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800452e:	f100 0001 	add.w	r0, r0, #1
 8004532:	bf08      	it	eq
 8004534:	2020      	moveq	r0, #32
 8004536:	4770      	bx	lr
 8004538:	2000      	movs	r0, #0
 800453a:	e7e5      	b.n	8004508 <__hi0bits+0xc>

0800453c <__lo0bits>:
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	4602      	mov	r2, r0
 8004540:	f013 0007 	ands.w	r0, r3, #7
 8004544:	d00b      	beq.n	800455e <__lo0bits+0x22>
 8004546:	07d9      	lsls	r1, r3, #31
 8004548:	d421      	bmi.n	800458e <__lo0bits+0x52>
 800454a:	0798      	lsls	r0, r3, #30
 800454c:	bf49      	itett	mi
 800454e:	085b      	lsrmi	r3, r3, #1
 8004550:	089b      	lsrpl	r3, r3, #2
 8004552:	2001      	movmi	r0, #1
 8004554:	6013      	strmi	r3, [r2, #0]
 8004556:	bf5c      	itt	pl
 8004558:	2002      	movpl	r0, #2
 800455a:	6013      	strpl	r3, [r2, #0]
 800455c:	4770      	bx	lr
 800455e:	b299      	uxth	r1, r3
 8004560:	b909      	cbnz	r1, 8004566 <__lo0bits+0x2a>
 8004562:	2010      	movs	r0, #16
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	b2d9      	uxtb	r1, r3
 8004568:	b909      	cbnz	r1, 800456e <__lo0bits+0x32>
 800456a:	3008      	adds	r0, #8
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	0719      	lsls	r1, r3, #28
 8004570:	bf04      	itt	eq
 8004572:	091b      	lsreq	r3, r3, #4
 8004574:	3004      	addeq	r0, #4
 8004576:	0799      	lsls	r1, r3, #30
 8004578:	bf04      	itt	eq
 800457a:	089b      	lsreq	r3, r3, #2
 800457c:	3002      	addeq	r0, #2
 800457e:	07d9      	lsls	r1, r3, #31
 8004580:	d403      	bmi.n	800458a <__lo0bits+0x4e>
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	f100 0001 	add.w	r0, r0, #1
 8004588:	d003      	beq.n	8004592 <__lo0bits+0x56>
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4770      	bx	lr
 800458e:	2000      	movs	r0, #0
 8004590:	4770      	bx	lr
 8004592:	2020      	movs	r0, #32
 8004594:	4770      	bx	lr
	...

08004598 <__i2b>:
 8004598:	b510      	push	{r4, lr}
 800459a:	460c      	mov	r4, r1
 800459c:	2101      	movs	r1, #1
 800459e:	f7ff febb 	bl	8004318 <_Balloc>
 80045a2:	4602      	mov	r2, r0
 80045a4:	b928      	cbnz	r0, 80045b2 <__i2b+0x1a>
 80045a6:	f240 1145 	movw	r1, #325	; 0x145
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__i2b+0x24>)
 80045ac:	4804      	ldr	r0, [pc, #16]	; (80045c0 <__i2b+0x28>)
 80045ae:	f001 fc3f 	bl	8005e30 <__assert_func>
 80045b2:	2301      	movs	r3, #1
 80045b4:	6144      	str	r4, [r0, #20]
 80045b6:	6103      	str	r3, [r0, #16]
 80045b8:	bd10      	pop	{r4, pc}
 80045ba:	bf00      	nop
 80045bc:	08006c70 	.word	0x08006c70
 80045c0:	08006c81 	.word	0x08006c81

080045c4 <__multiply>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	4691      	mov	r9, r2
 80045ca:	690a      	ldr	r2, [r1, #16]
 80045cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80045d0:	460c      	mov	r4, r1
 80045d2:	429a      	cmp	r2, r3
 80045d4:	bfbe      	ittt	lt
 80045d6:	460b      	movlt	r3, r1
 80045d8:	464c      	movlt	r4, r9
 80045da:	4699      	movlt	r9, r3
 80045dc:	6927      	ldr	r7, [r4, #16]
 80045de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	6861      	ldr	r1, [r4, #4]
 80045e6:	eb07 060a 	add.w	r6, r7, sl
 80045ea:	42b3      	cmp	r3, r6
 80045ec:	b085      	sub	sp, #20
 80045ee:	bfb8      	it	lt
 80045f0:	3101      	addlt	r1, #1
 80045f2:	f7ff fe91 	bl	8004318 <_Balloc>
 80045f6:	b930      	cbnz	r0, 8004606 <__multiply+0x42>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <__multiply+0x148>)
 8004600:	4843      	ldr	r0, [pc, #268]	; (8004710 <__multiply+0x14c>)
 8004602:	f001 fc15 	bl	8005e30 <__assert_func>
 8004606:	f100 0514 	add.w	r5, r0, #20
 800460a:	462b      	mov	r3, r5
 800460c:	2200      	movs	r2, #0
 800460e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004612:	4543      	cmp	r3, r8
 8004614:	d321      	bcc.n	800465a <__multiply+0x96>
 8004616:	f104 0314 	add.w	r3, r4, #20
 800461a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800461e:	f109 0314 	add.w	r3, r9, #20
 8004622:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004626:	9202      	str	r2, [sp, #8]
 8004628:	1b3a      	subs	r2, r7, r4
 800462a:	3a15      	subs	r2, #21
 800462c:	f022 0203 	bic.w	r2, r2, #3
 8004630:	3204      	adds	r2, #4
 8004632:	f104 0115 	add.w	r1, r4, #21
 8004636:	428f      	cmp	r7, r1
 8004638:	bf38      	it	cc
 800463a:	2204      	movcc	r2, #4
 800463c:	9201      	str	r2, [sp, #4]
 800463e:	9a02      	ldr	r2, [sp, #8]
 8004640:	9303      	str	r3, [sp, #12]
 8004642:	429a      	cmp	r2, r3
 8004644:	d80c      	bhi.n	8004660 <__multiply+0x9c>
 8004646:	2e00      	cmp	r6, #0
 8004648:	dd03      	ble.n	8004652 <__multiply+0x8e>
 800464a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800464e:	2b00      	cmp	r3, #0
 8004650:	d05a      	beq.n	8004708 <__multiply+0x144>
 8004652:	6106      	str	r6, [r0, #16]
 8004654:	b005      	add	sp, #20
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	f843 2b04 	str.w	r2, [r3], #4
 800465e:	e7d8      	b.n	8004612 <__multiply+0x4e>
 8004660:	f8b3 a000 	ldrh.w	sl, [r3]
 8004664:	f1ba 0f00 	cmp.w	sl, #0
 8004668:	d023      	beq.n	80046b2 <__multiply+0xee>
 800466a:	46a9      	mov	r9, r5
 800466c:	f04f 0c00 	mov.w	ip, #0
 8004670:	f104 0e14 	add.w	lr, r4, #20
 8004674:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004678:	f8d9 1000 	ldr.w	r1, [r9]
 800467c:	fa1f fb82 	uxth.w	fp, r2
 8004680:	b289      	uxth	r1, r1
 8004682:	fb0a 110b 	mla	r1, sl, fp, r1
 8004686:	4461      	add	r1, ip
 8004688:	f8d9 c000 	ldr.w	ip, [r9]
 800468c:	0c12      	lsrs	r2, r2, #16
 800468e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004692:	fb0a c202 	mla	r2, sl, r2, ip
 8004696:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800469a:	b289      	uxth	r1, r1
 800469c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046a0:	4577      	cmp	r7, lr
 80046a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80046a6:	f849 1b04 	str.w	r1, [r9], #4
 80046aa:	d8e3      	bhi.n	8004674 <__multiply+0xb0>
 80046ac:	9a01      	ldr	r2, [sp, #4]
 80046ae:	f845 c002 	str.w	ip, [r5, r2]
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046ba:	f1b9 0f00 	cmp.w	r9, #0
 80046be:	d021      	beq.n	8004704 <__multiply+0x140>
 80046c0:	46ae      	mov	lr, r5
 80046c2:	f04f 0a00 	mov.w	sl, #0
 80046c6:	6829      	ldr	r1, [r5, #0]
 80046c8:	f104 0c14 	add.w	ip, r4, #20
 80046cc:	f8bc b000 	ldrh.w	fp, [ip]
 80046d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80046d4:	b289      	uxth	r1, r1
 80046d6:	fb09 220b 	mla	r2, r9, fp, r2
 80046da:	4452      	add	r2, sl
 80046dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046e0:	f84e 1b04 	str.w	r1, [lr], #4
 80046e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80046e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046ec:	f8be 1000 	ldrh.w	r1, [lr]
 80046f0:	4567      	cmp	r7, ip
 80046f2:	fb09 110a 	mla	r1, r9, sl, r1
 80046f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80046fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046fe:	d8e5      	bhi.n	80046cc <__multiply+0x108>
 8004700:	9a01      	ldr	r2, [sp, #4]
 8004702:	50a9      	str	r1, [r5, r2]
 8004704:	3504      	adds	r5, #4
 8004706:	e79a      	b.n	800463e <__multiply+0x7a>
 8004708:	3e01      	subs	r6, #1
 800470a:	e79c      	b.n	8004646 <__multiply+0x82>
 800470c:	08006c70 	.word	0x08006c70
 8004710:	08006c81 	.word	0x08006c81

08004714 <__pow5mult>:
 8004714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004718:	4615      	mov	r5, r2
 800471a:	f012 0203 	ands.w	r2, r2, #3
 800471e:	4606      	mov	r6, r0
 8004720:	460f      	mov	r7, r1
 8004722:	d007      	beq.n	8004734 <__pow5mult+0x20>
 8004724:	4c25      	ldr	r4, [pc, #148]	; (80047bc <__pow5mult+0xa8>)
 8004726:	3a01      	subs	r2, #1
 8004728:	2300      	movs	r3, #0
 800472a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800472e:	f7ff fe55 	bl	80043dc <__multadd>
 8004732:	4607      	mov	r7, r0
 8004734:	10ad      	asrs	r5, r5, #2
 8004736:	d03d      	beq.n	80047b4 <__pow5mult+0xa0>
 8004738:	69f4      	ldr	r4, [r6, #28]
 800473a:	b97c      	cbnz	r4, 800475c <__pow5mult+0x48>
 800473c:	2010      	movs	r0, #16
 800473e:	f7ff fd37 	bl	80041b0 <malloc>
 8004742:	4602      	mov	r2, r0
 8004744:	61f0      	str	r0, [r6, #28]
 8004746:	b928      	cbnz	r0, 8004754 <__pow5mult+0x40>
 8004748:	f240 11b3 	movw	r1, #435	; 0x1b3
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <__pow5mult+0xac>)
 800474e:	481d      	ldr	r0, [pc, #116]	; (80047c4 <__pow5mult+0xb0>)
 8004750:	f001 fb6e 	bl	8005e30 <__assert_func>
 8004754:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004758:	6004      	str	r4, [r0, #0]
 800475a:	60c4      	str	r4, [r0, #12]
 800475c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004760:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004764:	b94c      	cbnz	r4, 800477a <__pow5mult+0x66>
 8004766:	f240 2171 	movw	r1, #625	; 0x271
 800476a:	4630      	mov	r0, r6
 800476c:	f7ff ff14 	bl	8004598 <__i2b>
 8004770:	2300      	movs	r3, #0
 8004772:	4604      	mov	r4, r0
 8004774:	f8c8 0008 	str.w	r0, [r8, #8]
 8004778:	6003      	str	r3, [r0, #0]
 800477a:	f04f 0900 	mov.w	r9, #0
 800477e:	07eb      	lsls	r3, r5, #31
 8004780:	d50a      	bpl.n	8004798 <__pow5mult+0x84>
 8004782:	4639      	mov	r1, r7
 8004784:	4622      	mov	r2, r4
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff ff1c 	bl	80045c4 <__multiply>
 800478c:	4680      	mov	r8, r0
 800478e:	4639      	mov	r1, r7
 8004790:	4630      	mov	r0, r6
 8004792:	f7ff fe01 	bl	8004398 <_Bfree>
 8004796:	4647      	mov	r7, r8
 8004798:	106d      	asrs	r5, r5, #1
 800479a:	d00b      	beq.n	80047b4 <__pow5mult+0xa0>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	b938      	cbnz	r0, 80047b0 <__pow5mult+0x9c>
 80047a0:	4622      	mov	r2, r4
 80047a2:	4621      	mov	r1, r4
 80047a4:	4630      	mov	r0, r6
 80047a6:	f7ff ff0d 	bl	80045c4 <__multiply>
 80047aa:	6020      	str	r0, [r4, #0]
 80047ac:	f8c0 9000 	str.w	r9, [r0]
 80047b0:	4604      	mov	r4, r0
 80047b2:	e7e4      	b.n	800477e <__pow5mult+0x6a>
 80047b4:	4638      	mov	r0, r7
 80047b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ba:	bf00      	nop
 80047bc:	08006dd0 	.word	0x08006dd0
 80047c0:	08006c01 	.word	0x08006c01
 80047c4:	08006c81 	.word	0x08006c81

080047c8 <__lshift>:
 80047c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	460c      	mov	r4, r1
 80047ce:	4607      	mov	r7, r0
 80047d0:	4691      	mov	r9, r2
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	6849      	ldr	r1, [r1, #4]
 80047d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047da:	68a3      	ldr	r3, [r4, #8]
 80047dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047e0:	f108 0601 	add.w	r6, r8, #1
 80047e4:	42b3      	cmp	r3, r6
 80047e6:	db0b      	blt.n	8004800 <__lshift+0x38>
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff fd95 	bl	8004318 <_Balloc>
 80047ee:	4605      	mov	r5, r0
 80047f0:	b948      	cbnz	r0, 8004806 <__lshift+0x3e>
 80047f2:	4602      	mov	r2, r0
 80047f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <__lshift+0xd0>)
 80047fa:	4828      	ldr	r0, [pc, #160]	; (800489c <__lshift+0xd4>)
 80047fc:	f001 fb18 	bl	8005e30 <__assert_func>
 8004800:	3101      	adds	r1, #1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	e7ee      	b.n	80047e4 <__lshift+0x1c>
 8004806:	2300      	movs	r3, #0
 8004808:	f100 0114 	add.w	r1, r0, #20
 800480c:	f100 0210 	add.w	r2, r0, #16
 8004810:	4618      	mov	r0, r3
 8004812:	4553      	cmp	r3, sl
 8004814:	db33      	blt.n	800487e <__lshift+0xb6>
 8004816:	6920      	ldr	r0, [r4, #16]
 8004818:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800481c:	f104 0314 	add.w	r3, r4, #20
 8004820:	f019 091f 	ands.w	r9, r9, #31
 8004824:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004828:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800482c:	d02b      	beq.n	8004886 <__lshift+0xbe>
 800482e:	468a      	mov	sl, r1
 8004830:	2200      	movs	r2, #0
 8004832:	f1c9 0e20 	rsb	lr, r9, #32
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	fa00 f009 	lsl.w	r0, r0, r9
 800483c:	4310      	orrs	r0, r2
 800483e:	f84a 0b04 	str.w	r0, [sl], #4
 8004842:	f853 2b04 	ldr.w	r2, [r3], #4
 8004846:	459c      	cmp	ip, r3
 8004848:	fa22 f20e 	lsr.w	r2, r2, lr
 800484c:	d8f3      	bhi.n	8004836 <__lshift+0x6e>
 800484e:	ebac 0304 	sub.w	r3, ip, r4
 8004852:	3b15      	subs	r3, #21
 8004854:	f023 0303 	bic.w	r3, r3, #3
 8004858:	3304      	adds	r3, #4
 800485a:	f104 0015 	add.w	r0, r4, #21
 800485e:	4584      	cmp	ip, r0
 8004860:	bf38      	it	cc
 8004862:	2304      	movcc	r3, #4
 8004864:	50ca      	str	r2, [r1, r3]
 8004866:	b10a      	cbz	r2, 800486c <__lshift+0xa4>
 8004868:	f108 0602 	add.w	r6, r8, #2
 800486c:	3e01      	subs	r6, #1
 800486e:	4638      	mov	r0, r7
 8004870:	4621      	mov	r1, r4
 8004872:	612e      	str	r6, [r5, #16]
 8004874:	f7ff fd90 	bl	8004398 <_Bfree>
 8004878:	4628      	mov	r0, r5
 800487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004882:	3301      	adds	r3, #1
 8004884:	e7c5      	b.n	8004812 <__lshift+0x4a>
 8004886:	3904      	subs	r1, #4
 8004888:	f853 2b04 	ldr.w	r2, [r3], #4
 800488c:	459c      	cmp	ip, r3
 800488e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004892:	d8f9      	bhi.n	8004888 <__lshift+0xc0>
 8004894:	e7ea      	b.n	800486c <__lshift+0xa4>
 8004896:	bf00      	nop
 8004898:	08006c70 	.word	0x08006c70
 800489c:	08006c81 	.word	0x08006c81

080048a0 <__mcmp>:
 80048a0:	4603      	mov	r3, r0
 80048a2:	690a      	ldr	r2, [r1, #16]
 80048a4:	6900      	ldr	r0, [r0, #16]
 80048a6:	b530      	push	{r4, r5, lr}
 80048a8:	1a80      	subs	r0, r0, r2
 80048aa:	d10d      	bne.n	80048c8 <__mcmp+0x28>
 80048ac:	3314      	adds	r3, #20
 80048ae:	3114      	adds	r1, #20
 80048b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80048b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80048b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80048bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80048c0:	4295      	cmp	r5, r2
 80048c2:	d002      	beq.n	80048ca <__mcmp+0x2a>
 80048c4:	d304      	bcc.n	80048d0 <__mcmp+0x30>
 80048c6:	2001      	movs	r0, #1
 80048c8:	bd30      	pop	{r4, r5, pc}
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	d3f4      	bcc.n	80048b8 <__mcmp+0x18>
 80048ce:	e7fb      	b.n	80048c8 <__mcmp+0x28>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e7f8      	b.n	80048c8 <__mcmp+0x28>
	...

080048d8 <__mdiff>:
 80048d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	460d      	mov	r5, r1
 80048de:	4607      	mov	r7, r0
 80048e0:	4611      	mov	r1, r2
 80048e2:	4628      	mov	r0, r5
 80048e4:	4614      	mov	r4, r2
 80048e6:	f7ff ffdb 	bl	80048a0 <__mcmp>
 80048ea:	1e06      	subs	r6, r0, #0
 80048ec:	d111      	bne.n	8004912 <__mdiff+0x3a>
 80048ee:	4631      	mov	r1, r6
 80048f0:	4638      	mov	r0, r7
 80048f2:	f7ff fd11 	bl	8004318 <_Balloc>
 80048f6:	4602      	mov	r2, r0
 80048f8:	b928      	cbnz	r0, 8004906 <__mdiff+0x2e>
 80048fa:	f240 2137 	movw	r1, #567	; 0x237
 80048fe:	4b3a      	ldr	r3, [pc, #232]	; (80049e8 <__mdiff+0x110>)
 8004900:	483a      	ldr	r0, [pc, #232]	; (80049ec <__mdiff+0x114>)
 8004902:	f001 fa95 	bl	8005e30 <__assert_func>
 8004906:	2301      	movs	r3, #1
 8004908:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800490c:	4610      	mov	r0, r2
 800490e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004912:	bfa4      	itt	ge
 8004914:	4623      	movge	r3, r4
 8004916:	462c      	movge	r4, r5
 8004918:	4638      	mov	r0, r7
 800491a:	6861      	ldr	r1, [r4, #4]
 800491c:	bfa6      	itte	ge
 800491e:	461d      	movge	r5, r3
 8004920:	2600      	movge	r6, #0
 8004922:	2601      	movlt	r6, #1
 8004924:	f7ff fcf8 	bl	8004318 <_Balloc>
 8004928:	4602      	mov	r2, r0
 800492a:	b918      	cbnz	r0, 8004934 <__mdiff+0x5c>
 800492c:	f240 2145 	movw	r1, #581	; 0x245
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <__mdiff+0x110>)
 8004932:	e7e5      	b.n	8004900 <__mdiff+0x28>
 8004934:	f102 0814 	add.w	r8, r2, #20
 8004938:	46c2      	mov	sl, r8
 800493a:	f04f 0c00 	mov.w	ip, #0
 800493e:	6927      	ldr	r7, [r4, #16]
 8004940:	60c6      	str	r6, [r0, #12]
 8004942:	692e      	ldr	r6, [r5, #16]
 8004944:	f104 0014 	add.w	r0, r4, #20
 8004948:	f105 0914 	add.w	r9, r5, #20
 800494c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004950:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004954:	3410      	adds	r4, #16
 8004956:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800495a:	f859 3b04 	ldr.w	r3, [r9], #4
 800495e:	fa1f f18b 	uxth.w	r1, fp
 8004962:	4461      	add	r1, ip
 8004964:	fa1f fc83 	uxth.w	ip, r3
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	eba1 010c 	sub.w	r1, r1, ip
 800496e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004972:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004976:	b289      	uxth	r1, r1
 8004978:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800497c:	454e      	cmp	r6, r9
 800497e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004982:	f84a 1b04 	str.w	r1, [sl], #4
 8004986:	d8e6      	bhi.n	8004956 <__mdiff+0x7e>
 8004988:	1b73      	subs	r3, r6, r5
 800498a:	3b15      	subs	r3, #21
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	3515      	adds	r5, #21
 8004992:	3304      	adds	r3, #4
 8004994:	42ae      	cmp	r6, r5
 8004996:	bf38      	it	cc
 8004998:	2304      	movcc	r3, #4
 800499a:	4418      	add	r0, r3
 800499c:	4443      	add	r3, r8
 800499e:	461e      	mov	r6, r3
 80049a0:	4605      	mov	r5, r0
 80049a2:	4575      	cmp	r5, lr
 80049a4:	d30e      	bcc.n	80049c4 <__mdiff+0xec>
 80049a6:	f10e 0103 	add.w	r1, lr, #3
 80049aa:	1a09      	subs	r1, r1, r0
 80049ac:	f021 0103 	bic.w	r1, r1, #3
 80049b0:	3803      	subs	r0, #3
 80049b2:	4586      	cmp	lr, r0
 80049b4:	bf38      	it	cc
 80049b6:	2100      	movcc	r1, #0
 80049b8:	440b      	add	r3, r1
 80049ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80049be:	b189      	cbz	r1, 80049e4 <__mdiff+0x10c>
 80049c0:	6117      	str	r7, [r2, #16]
 80049c2:	e7a3      	b.n	800490c <__mdiff+0x34>
 80049c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80049c8:	fa1f f188 	uxth.w	r1, r8
 80049cc:	4461      	add	r1, ip
 80049ce:	140c      	asrs	r4, r1, #16
 80049d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80049d4:	b289      	uxth	r1, r1
 80049d6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80049da:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80049de:	f846 1b04 	str.w	r1, [r6], #4
 80049e2:	e7de      	b.n	80049a2 <__mdiff+0xca>
 80049e4:	3f01      	subs	r7, #1
 80049e6:	e7e8      	b.n	80049ba <__mdiff+0xe2>
 80049e8:	08006c70 	.word	0x08006c70
 80049ec:	08006c81 	.word	0x08006c81

080049f0 <__ulp>:
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <__ulp+0x3c>)
 80049f2:	400b      	ands	r3, r1
 80049f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dc08      	bgt.n	8004a0e <__ulp+0x1e>
 80049fc:	425b      	negs	r3, r3
 80049fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004a02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004a06:	da04      	bge.n	8004a12 <__ulp+0x22>
 8004a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a0c:	4113      	asrs	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	e008      	b.n	8004a24 <__ulp+0x34>
 8004a12:	f1a2 0314 	sub.w	r3, r2, #20
 8004a16:	2b1e      	cmp	r3, #30
 8004a18:	bfd6      	itet	le
 8004a1a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004a1e:	2201      	movgt	r2, #1
 8004a20:	40da      	lsrle	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	7ff00000 	.word	0x7ff00000

08004a30 <__b2d>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	6905      	ldr	r5, [r0, #16]
 8004a34:	f100 0714 	add.w	r7, r0, #20
 8004a38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004a3c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004a40:	1f2e      	subs	r6, r5, #4
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff fd5a 	bl	80044fc <__hi0bits>
 8004a48:	f1c0 0220 	rsb	r2, r0, #32
 8004a4c:	280a      	cmp	r0, #10
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004abc <__b2d+0x8c>
 8004a54:	600a      	str	r2, [r1, #0]
 8004a56:	dc12      	bgt.n	8004a7e <__b2d+0x4e>
 8004a58:	f1c0 0e0b 	rsb	lr, r0, #11
 8004a5c:	fa24 f20e 	lsr.w	r2, r4, lr
 8004a60:	42b7      	cmp	r7, r6
 8004a62:	ea42 010c 	orr.w	r1, r2, ip
 8004a66:	bf2c      	ite	cs
 8004a68:	2200      	movcs	r2, #0
 8004a6a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004a6e:	3315      	adds	r3, #21
 8004a70:	fa04 f303 	lsl.w	r3, r4, r3
 8004a74:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	42b7      	cmp	r7, r6
 8004a80:	bf2e      	itee	cs
 8004a82:	2200      	movcs	r2, #0
 8004a84:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004a88:	f1a5 0608 	subcc.w	r6, r5, #8
 8004a8c:	3b0b      	subs	r3, #11
 8004a8e:	d012      	beq.n	8004ab6 <__b2d+0x86>
 8004a90:	f1c3 0520 	rsb	r5, r3, #32
 8004a94:	fa22 f105 	lsr.w	r1, r2, r5
 8004a98:	409c      	lsls	r4, r3
 8004a9a:	430c      	orrs	r4, r1
 8004a9c:	42be      	cmp	r6, r7
 8004a9e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8004aa2:	bf94      	ite	ls
 8004aa4:	2400      	movls	r4, #0
 8004aa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	40ec      	lsrs	r4, r5
 8004aae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ab2:	4322      	orrs	r2, r4
 8004ab4:	e7e1      	b.n	8004a7a <__b2d+0x4a>
 8004ab6:	ea44 010c 	orr.w	r1, r4, ip
 8004aba:	e7de      	b.n	8004a7a <__b2d+0x4a>
 8004abc:	3ff00000 	.word	0x3ff00000

08004ac0 <__d2b>:
 8004ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4617      	mov	r7, r2
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	9e08      	ldr	r6, [sp, #32]
 8004aca:	f7ff fc25 	bl	8004318 <_Balloc>
 8004ace:	4605      	mov	r5, r0
 8004ad0:	b930      	cbnz	r0, 8004ae0 <__d2b+0x20>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	f240 310f 	movw	r1, #783	; 0x30f
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <__d2b+0xa4>)
 8004ada:	4823      	ldr	r0, [pc, #140]	; (8004b68 <__d2b+0xa8>)
 8004adc:	f001 f9a8 	bl	8005e30 <__assert_func>
 8004ae0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004ae4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004ae8:	bb24      	cbnz	r4, 8004b34 <__d2b+0x74>
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	d026      	beq.n	8004b3e <__d2b+0x7e>
 8004af0:	4668      	mov	r0, sp
 8004af2:	9700      	str	r7, [sp, #0]
 8004af4:	f7ff fd22 	bl	800453c <__lo0bits>
 8004af8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004afc:	b1e8      	cbz	r0, 8004b3a <__d2b+0x7a>
 8004afe:	f1c0 0320 	rsb	r3, r0, #32
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	430b      	orrs	r3, r1
 8004b08:	40c2      	lsrs	r2, r0
 8004b0a:	616b      	str	r3, [r5, #20]
 8004b0c:	9201      	str	r2, [sp, #4]
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2102      	movne	r1, #2
 8004b16:	2101      	moveq	r1, #1
 8004b18:	61ab      	str	r3, [r5, #24]
 8004b1a:	6129      	str	r1, [r5, #16]
 8004b1c:	b1bc      	cbz	r4, 8004b4e <__d2b+0x8e>
 8004b1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004b22:	4404      	add	r4, r0
 8004b24:	6034      	str	r4, [r6, #0]
 8004b26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2c:	6018      	str	r0, [r3, #0]
 8004b2e:	4628      	mov	r0, r5
 8004b30:	b003      	add	sp, #12
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b38:	e7d7      	b.n	8004aea <__d2b+0x2a>
 8004b3a:	6169      	str	r1, [r5, #20]
 8004b3c:	e7e7      	b.n	8004b0e <__d2b+0x4e>
 8004b3e:	a801      	add	r0, sp, #4
 8004b40:	f7ff fcfc 	bl	800453c <__lo0bits>
 8004b44:	9b01      	ldr	r3, [sp, #4]
 8004b46:	2101      	movs	r1, #1
 8004b48:	616b      	str	r3, [r5, #20]
 8004b4a:	3020      	adds	r0, #32
 8004b4c:	e7e5      	b.n	8004b1a <__d2b+0x5a>
 8004b4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b52:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004b56:	6030      	str	r0, [r6, #0]
 8004b58:	6918      	ldr	r0, [r3, #16]
 8004b5a:	f7ff fccf 	bl	80044fc <__hi0bits>
 8004b5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004b62:	e7e2      	b.n	8004b2a <__d2b+0x6a>
 8004b64:	08006c70 	.word	0x08006c70
 8004b68:	08006c81 	.word	0x08006c81

08004b6c <__ratio>:
 8004b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4688      	mov	r8, r1
 8004b72:	4669      	mov	r1, sp
 8004b74:	4681      	mov	r9, r0
 8004b76:	f7ff ff5b 	bl	8004a30 <__b2d>
 8004b7a:	460f      	mov	r7, r1
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	4640      	mov	r0, r8
 8004b82:	a901      	add	r1, sp, #4
 8004b84:	f7ff ff54 	bl	8004a30 <__b2d>
 8004b88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004b90:	468b      	mov	fp, r1
 8004b92:	eba3 0c02 	sub.w	ip, r3, r2
 8004b96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfd5      	itete	le
 8004ba4:	460a      	movle	r2, r1
 8004ba6:	462a      	movgt	r2, r5
 8004ba8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004bac:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004bb0:	bfd8      	it	le
 8004bb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004bb6:	465b      	mov	r3, fp
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4639      	mov	r1, r7
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7fb fe69 	bl	8000894 <__aeabi_ddiv>
 8004bc2:	b003      	add	sp, #12
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bc8 <__copybits>:
 8004bc8:	3901      	subs	r1, #1
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	1149      	asrs	r1, r1, #5
 8004bce:	6914      	ldr	r4, [r2, #16]
 8004bd0:	3101      	adds	r1, #1
 8004bd2:	f102 0314 	add.w	r3, r2, #20
 8004bd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004bda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004bde:	1f05      	subs	r5, r0, #4
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d30c      	bcc.n	8004bfe <__copybits+0x36>
 8004be4:	1aa3      	subs	r3, r4, r2
 8004be6:	3b11      	subs	r3, #17
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	3211      	adds	r2, #17
 8004bee:	42a2      	cmp	r2, r4
 8004bf0:	bf88      	it	hi
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	4418      	add	r0, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4288      	cmp	r0, r1
 8004bfa:	d305      	bcc.n	8004c08 <__copybits+0x40>
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
 8004bfe:	f853 6b04 	ldr.w	r6, [r3], #4
 8004c02:	f845 6f04 	str.w	r6, [r5, #4]!
 8004c06:	e7eb      	b.n	8004be0 <__copybits+0x18>
 8004c08:	f840 3b04 	str.w	r3, [r0], #4
 8004c0c:	e7f4      	b.n	8004bf8 <__copybits+0x30>

08004c0e <__any_on>:
 8004c0e:	f100 0214 	add.w	r2, r0, #20
 8004c12:	6900      	ldr	r0, [r0, #16]
 8004c14:	114b      	asrs	r3, r1, #5
 8004c16:	4298      	cmp	r0, r3
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	db11      	blt.n	8004c40 <__any_on+0x32>
 8004c1c:	dd0a      	ble.n	8004c34 <__any_on+0x26>
 8004c1e:	f011 011f 	ands.w	r1, r1, #31
 8004c22:	d007      	beq.n	8004c34 <__any_on+0x26>
 8004c24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004c28:	fa24 f001 	lsr.w	r0, r4, r1
 8004c2c:	fa00 f101 	lsl.w	r1, r0, r1
 8004c30:	428c      	cmp	r4, r1
 8004c32:	d10b      	bne.n	8004c4c <__any_on+0x3e>
 8004c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d803      	bhi.n	8004c44 <__any_on+0x36>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	bd10      	pop	{r4, pc}
 8004c40:	4603      	mov	r3, r0
 8004c42:	e7f7      	b.n	8004c34 <__any_on+0x26>
 8004c44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	d0f5      	beq.n	8004c38 <__any_on+0x2a>
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e7f6      	b.n	8004c3e <__any_on+0x30>

08004c50 <sulp>:
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	460f      	mov	r7, r1
 8004c56:	4690      	mov	r8, r2
 8004c58:	f7ff feca 	bl	80049f0 <__ulp>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	f1b8 0f00 	cmp.w	r8, #0
 8004c64:	d011      	beq.n	8004c8a <sulp+0x3a>
 8004c66:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dd0b      	ble.n	8004c8a <sulp+0x3a>
 8004c72:	2400      	movs	r4, #0
 8004c74:	051b      	lsls	r3, r3, #20
 8004c76:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	f7fb fcdd 	bl	8000640 <__aeabi_dmul>
 8004c86:	4604      	mov	r4, r0
 8004c88:	460d      	mov	r5, r1
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c92:	0000      	movs	r0, r0
 8004c94:	0000      	movs	r0, r0
	...

08004c98 <_strtod_l>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	b09f      	sub	sp, #124	; 0x7c
 8004c9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	921a      	str	r2, [sp, #104]	; 0x68
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	f04f 0800 	mov.w	r8, #0
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	9219      	str	r2, [sp, #100]	; 0x64
 8004cb4:	7811      	ldrb	r1, [r2, #0]
 8004cb6:	292b      	cmp	r1, #43	; 0x2b
 8004cb8:	d04a      	beq.n	8004d50 <_strtod_l+0xb8>
 8004cba:	d838      	bhi.n	8004d2e <_strtod_l+0x96>
 8004cbc:	290d      	cmp	r1, #13
 8004cbe:	d832      	bhi.n	8004d26 <_strtod_l+0x8e>
 8004cc0:	2908      	cmp	r1, #8
 8004cc2:	d832      	bhi.n	8004d2a <_strtod_l+0x92>
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d03b      	beq.n	8004d40 <_strtod_l+0xa8>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	920e      	str	r2, [sp, #56]	; 0x38
 8004ccc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004cce:	7832      	ldrb	r2, [r6, #0]
 8004cd0:	2a30      	cmp	r2, #48	; 0x30
 8004cd2:	f040 80b2 	bne.w	8004e3a <_strtod_l+0x1a2>
 8004cd6:	7872      	ldrb	r2, [r6, #1]
 8004cd8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004cdc:	2a58      	cmp	r2, #88	; 0x58
 8004cde:	d16e      	bne.n	8004dbe <_strtod_l+0x126>
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	ab1a      	add	r3, sp, #104	; 0x68
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4a8c      	ldr	r2, [pc, #560]	; (8004f20 <_strtod_l+0x288>)
 8004cee:	ab1b      	add	r3, sp, #108	; 0x6c
 8004cf0:	a919      	add	r1, sp, #100	; 0x64
 8004cf2:	f001 f937 	bl	8005f64 <__gethex>
 8004cf6:	f010 070f 	ands.w	r7, r0, #15
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	d005      	beq.n	8004d0a <_strtod_l+0x72>
 8004cfe:	2f06      	cmp	r7, #6
 8004d00:	d128      	bne.n	8004d54 <_strtod_l+0xbc>
 8004d02:	2300      	movs	r3, #0
 8004d04:	3601      	adds	r6, #1
 8004d06:	9619      	str	r6, [sp, #100]	; 0x64
 8004d08:	930e      	str	r3, [sp, #56]	; 0x38
 8004d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 85a0 	bne.w	8005852 <_strtod_l+0xbba>
 8004d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d14:	b1cb      	cbz	r3, 8004d4a <_strtod_l+0xb2>
 8004d16:	4642      	mov	r2, r8
 8004d18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	b01f      	add	sp, #124	; 0x7c
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	2920      	cmp	r1, #32
 8004d28:	d1ce      	bne.n	8004cc8 <_strtod_l+0x30>
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	e7c1      	b.n	8004cb2 <_strtod_l+0x1a>
 8004d2e:	292d      	cmp	r1, #45	; 0x2d
 8004d30:	d1ca      	bne.n	8004cc8 <_strtod_l+0x30>
 8004d32:	2101      	movs	r1, #1
 8004d34:	910e      	str	r1, [sp, #56]	; 0x38
 8004d36:	1c51      	adds	r1, r2, #1
 8004d38:	9119      	str	r1, [sp, #100]	; 0x64
 8004d3a:	7852      	ldrb	r2, [r2, #1]
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	d1c5      	bne.n	8004ccc <_strtod_l+0x34>
 8004d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d42:	9519      	str	r5, [sp, #100]	; 0x64
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 8582 	bne.w	800584e <_strtod_l+0xbb6>
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	e7e5      	b.n	8004d1c <_strtod_l+0x84>
 8004d50:	2100      	movs	r1, #0
 8004d52:	e7ef      	b.n	8004d34 <_strtod_l+0x9c>
 8004d54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d56:	b13a      	cbz	r2, 8004d68 <_strtod_l+0xd0>
 8004d58:	2135      	movs	r1, #53	; 0x35
 8004d5a:	a81c      	add	r0, sp, #112	; 0x70
 8004d5c:	f7ff ff34 	bl	8004bc8 <__copybits>
 8004d60:	4620      	mov	r0, r4
 8004d62:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d64:	f7ff fb18 	bl	8004398 <_Bfree>
 8004d68:	3f01      	subs	r7, #1
 8004d6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d6c:	2f04      	cmp	r7, #4
 8004d6e:	d806      	bhi.n	8004d7e <_strtod_l+0xe6>
 8004d70:	e8df f007 	tbb	[pc, r7]
 8004d74:	201d0314 	.word	0x201d0314
 8004d78:	14          	.byte	0x14
 8004d79:	00          	.byte	0x00
 8004d7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004d7e:	05e9      	lsls	r1, r5, #23
 8004d80:	bf48      	it	mi
 8004d82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d8a:	0d1b      	lsrs	r3, r3, #20
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1bb      	bne.n	8004d0a <_strtod_l+0x72>
 8004d92:	f7fe fb17 	bl	80033c4 <__errno>
 8004d96:	2322      	movs	r3, #34	; 0x22
 8004d98:	6003      	str	r3, [r0, #0]
 8004d9a:	e7b6      	b.n	8004d0a <_strtod_l+0x72>
 8004d9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004da0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004da4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004da8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004dac:	e7e7      	b.n	8004d7e <_strtod_l+0xe6>
 8004dae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004f24 <_strtod_l+0x28c>
 8004db2:	e7e4      	b.n	8004d7e <_strtod_l+0xe6>
 8004db4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004db8:	f04f 38ff 	mov.w	r8, #4294967295
 8004dbc:	e7df      	b.n	8004d7e <_strtod_l+0xe6>
 8004dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	9219      	str	r2, [sp, #100]	; 0x64
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	d0f9      	beq.n	8004dbe <_strtod_l+0x126>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d09d      	beq.n	8004d0a <_strtod_l+0x72>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f04f 0a00 	mov.w	sl, #0
 8004dd4:	220a      	movs	r2, #10
 8004dd6:	46d3      	mov	fp, sl
 8004dd8:	9305      	str	r3, [sp, #20]
 8004dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ddc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004de4:	7806      	ldrb	r6, [r0, #0]
 8004de6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004dea:	b2d9      	uxtb	r1, r3
 8004dec:	2909      	cmp	r1, #9
 8004dee:	d926      	bls.n	8004e3e <_strtod_l+0x1a6>
 8004df0:	2201      	movs	r2, #1
 8004df2:	494d      	ldr	r1, [pc, #308]	; (8004f28 <_strtod_l+0x290>)
 8004df4:	f000 ffe6 	bl	8005dc4 <strncmp>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d030      	beq.n	8004e5e <_strtod_l+0x1c6>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4632      	mov	r2, r6
 8004e00:	4603      	mov	r3, r0
 8004e02:	465e      	mov	r6, fp
 8004e04:	9008      	str	r0, [sp, #32]
 8004e06:	2a65      	cmp	r2, #101	; 0x65
 8004e08:	d001      	beq.n	8004e0e <_strtod_l+0x176>
 8004e0a:	2a45      	cmp	r2, #69	; 0x45
 8004e0c:	d113      	bne.n	8004e36 <_strtod_l+0x19e>
 8004e0e:	b91e      	cbnz	r6, 8004e18 <_strtod_l+0x180>
 8004e10:	9a05      	ldr	r2, [sp, #20]
 8004e12:	4302      	orrs	r2, r0
 8004e14:	d094      	beq.n	8004d40 <_strtod_l+0xa8>
 8004e16:	2600      	movs	r6, #0
 8004e18:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004e1a:	1c6a      	adds	r2, r5, #1
 8004e1c:	9219      	str	r2, [sp, #100]	; 0x64
 8004e1e:	786a      	ldrb	r2, [r5, #1]
 8004e20:	2a2b      	cmp	r2, #43	; 0x2b
 8004e22:	d074      	beq.n	8004f0e <_strtod_l+0x276>
 8004e24:	2a2d      	cmp	r2, #45	; 0x2d
 8004e26:	d078      	beq.n	8004f1a <_strtod_l+0x282>
 8004e28:	f04f 0c00 	mov.w	ip, #0
 8004e2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e30:	2909      	cmp	r1, #9
 8004e32:	d97f      	bls.n	8004f34 <_strtod_l+0x29c>
 8004e34:	9519      	str	r5, [sp, #100]	; 0x64
 8004e36:	2700      	movs	r7, #0
 8004e38:	e09e      	b.n	8004f78 <_strtod_l+0x2e0>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e7c8      	b.n	8004dd0 <_strtod_l+0x138>
 8004e3e:	f1bb 0f08 	cmp.w	fp, #8
 8004e42:	bfd8      	it	le
 8004e44:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8004e46:	f100 0001 	add.w	r0, r0, #1
 8004e4a:	bfd6      	itet	le
 8004e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e50:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004e54:	930a      	strle	r3, [sp, #40]	; 0x28
 8004e56:	f10b 0b01 	add.w	fp, fp, #1
 8004e5a:	9019      	str	r0, [sp, #100]	; 0x64
 8004e5c:	e7c1      	b.n	8004de2 <_strtod_l+0x14a>
 8004e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	9219      	str	r2, [sp, #100]	; 0x64
 8004e64:	785a      	ldrb	r2, [r3, #1]
 8004e66:	f1bb 0f00 	cmp.w	fp, #0
 8004e6a:	d037      	beq.n	8004edc <_strtod_l+0x244>
 8004e6c:	465e      	mov	r6, fp
 8004e6e:	9008      	str	r0, [sp, #32]
 8004e70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d912      	bls.n	8004e9e <_strtod_l+0x206>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7c4      	b.n	8004e06 <_strtod_l+0x16e>
 8004e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e7e:	3001      	adds	r0, #1
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	9219      	str	r2, [sp, #100]	; 0x64
 8004e84:	785a      	ldrb	r2, [r3, #1]
 8004e86:	2a30      	cmp	r2, #48	; 0x30
 8004e88:	d0f8      	beq.n	8004e7c <_strtod_l+0x1e4>
 8004e8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	f200 84e4 	bhi.w	800585c <_strtod_l+0xbc4>
 8004e94:	9008      	str	r0, [sp, #32]
 8004e96:	2000      	movs	r0, #0
 8004e98:	4606      	mov	r6, r0
 8004e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e9e:	3a30      	subs	r2, #48	; 0x30
 8004ea0:	f100 0301 	add.w	r3, r0, #1
 8004ea4:	d014      	beq.n	8004ed0 <_strtod_l+0x238>
 8004ea6:	9908      	ldr	r1, [sp, #32]
 8004ea8:	eb00 0c06 	add.w	ip, r0, r6
 8004eac:	4419      	add	r1, r3
 8004eae:	9108      	str	r1, [sp, #32]
 8004eb0:	4633      	mov	r3, r6
 8004eb2:	210a      	movs	r1, #10
 8004eb4:	4563      	cmp	r3, ip
 8004eb6:	d113      	bne.n	8004ee0 <_strtod_l+0x248>
 8004eb8:	1833      	adds	r3, r6, r0
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	f106 0601 	add.w	r6, r6, #1
 8004ec0:	4406      	add	r6, r0
 8004ec2:	dc1a      	bgt.n	8004efa <_strtod_l+0x262>
 8004ec4:	230a      	movs	r3, #10
 8004ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ec8:	fb03 2301 	mla	r3, r3, r1, r2
 8004ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	1c51      	adds	r1, r2, #1
 8004ed6:	9119      	str	r1, [sp, #100]	; 0x64
 8004ed8:	7852      	ldrb	r2, [r2, #1]
 8004eda:	e7c9      	b.n	8004e70 <_strtod_l+0x1d8>
 8004edc:	4658      	mov	r0, fp
 8004ede:	e7d2      	b.n	8004e86 <_strtod_l+0x1ee>
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	f103 0301 	add.w	r3, r3, #1
 8004ee6:	dc03      	bgt.n	8004ef0 <_strtod_l+0x258>
 8004ee8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004eea:	434f      	muls	r7, r1
 8004eec:	970a      	str	r7, [sp, #40]	; 0x28
 8004eee:	e7e1      	b.n	8004eb4 <_strtod_l+0x21c>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	bfd8      	it	le
 8004ef4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004ef8:	e7dc      	b.n	8004eb4 <_strtod_l+0x21c>
 8004efa:	2e10      	cmp	r6, #16
 8004efc:	bfdc      	itt	le
 8004efe:	230a      	movle	r3, #10
 8004f00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004f04:	e7e3      	b.n	8004ece <_strtod_l+0x236>
 8004f06:	2300      	movs	r3, #0
 8004f08:	9308      	str	r3, [sp, #32]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e780      	b.n	8004e10 <_strtod_l+0x178>
 8004f0e:	f04f 0c00 	mov.w	ip, #0
 8004f12:	1caa      	adds	r2, r5, #2
 8004f14:	9219      	str	r2, [sp, #100]	; 0x64
 8004f16:	78aa      	ldrb	r2, [r5, #2]
 8004f18:	e788      	b.n	8004e2c <_strtod_l+0x194>
 8004f1a:	f04f 0c01 	mov.w	ip, #1
 8004f1e:	e7f8      	b.n	8004f12 <_strtod_l+0x27a>
 8004f20:	08006de0 	.word	0x08006de0
 8004f24:	7ff00000 	.word	0x7ff00000
 8004f28:	08006ddc 	.word	0x08006ddc
 8004f2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f2e:	1c51      	adds	r1, r2, #1
 8004f30:	9119      	str	r1, [sp, #100]	; 0x64
 8004f32:	7852      	ldrb	r2, [r2, #1]
 8004f34:	2a30      	cmp	r2, #48	; 0x30
 8004f36:	d0f9      	beq.n	8004f2c <_strtod_l+0x294>
 8004f38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f3c:	2908      	cmp	r1, #8
 8004f3e:	f63f af7a 	bhi.w	8004e36 <_strtod_l+0x19e>
 8004f42:	3a30      	subs	r2, #48	; 0x30
 8004f44:	9209      	str	r2, [sp, #36]	; 0x24
 8004f46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f48:	920c      	str	r2, [sp, #48]	; 0x30
 8004f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f4c:	1c57      	adds	r7, r2, #1
 8004f4e:	9719      	str	r7, [sp, #100]	; 0x64
 8004f50:	7852      	ldrb	r2, [r2, #1]
 8004f52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004f56:	f1be 0f09 	cmp.w	lr, #9
 8004f5a:	d938      	bls.n	8004fce <_strtod_l+0x336>
 8004f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f5e:	1a7f      	subs	r7, r7, r1
 8004f60:	2f08      	cmp	r7, #8
 8004f62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f66:	dc03      	bgt.n	8004f70 <_strtod_l+0x2d8>
 8004f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f6a:	428f      	cmp	r7, r1
 8004f6c:	bfa8      	it	ge
 8004f6e:	460f      	movge	r7, r1
 8004f70:	f1bc 0f00 	cmp.w	ip, #0
 8004f74:	d000      	beq.n	8004f78 <_strtod_l+0x2e0>
 8004f76:	427f      	negs	r7, r7
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	d14f      	bne.n	800501c <_strtod_l+0x384>
 8004f7c:	9905      	ldr	r1, [sp, #20]
 8004f7e:	4301      	orrs	r1, r0
 8004f80:	f47f aec3 	bne.w	8004d0a <_strtod_l+0x72>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f aedb 	bne.w	8004d40 <_strtod_l+0xa8>
 8004f8a:	2a69      	cmp	r2, #105	; 0x69
 8004f8c:	d029      	beq.n	8004fe2 <_strtod_l+0x34a>
 8004f8e:	dc26      	bgt.n	8004fde <_strtod_l+0x346>
 8004f90:	2a49      	cmp	r2, #73	; 0x49
 8004f92:	d026      	beq.n	8004fe2 <_strtod_l+0x34a>
 8004f94:	2a4e      	cmp	r2, #78	; 0x4e
 8004f96:	f47f aed3 	bne.w	8004d40 <_strtod_l+0xa8>
 8004f9a:	499a      	ldr	r1, [pc, #616]	; (8005204 <_strtod_l+0x56c>)
 8004f9c:	a819      	add	r0, sp, #100	; 0x64
 8004f9e:	f001 fa23 	bl	80063e8 <__match>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f43f aecc 	beq.w	8004d40 <_strtod_l+0xa8>
 8004fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b28      	cmp	r3, #40	; 0x28
 8004fae:	d12f      	bne.n	8005010 <_strtod_l+0x378>
 8004fb0:	4995      	ldr	r1, [pc, #596]	; (8005208 <_strtod_l+0x570>)
 8004fb2:	aa1c      	add	r2, sp, #112	; 0x70
 8004fb4:	a819      	add	r0, sp, #100	; 0x64
 8004fb6:	f001 fa2b 	bl	8006410 <__hexnan>
 8004fba:	2805      	cmp	r0, #5
 8004fbc:	d128      	bne.n	8005010 <_strtod_l+0x378>
 8004fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004fc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004fc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004fcc:	e69d      	b.n	8004d0a <_strtod_l+0x72>
 8004fce:	210a      	movs	r1, #10
 8004fd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004fd2:	fb01 2107 	mla	r1, r1, r7, r2
 8004fd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004fda:	9209      	str	r2, [sp, #36]	; 0x24
 8004fdc:	e7b5      	b.n	8004f4a <_strtod_l+0x2b2>
 8004fde:	2a6e      	cmp	r2, #110	; 0x6e
 8004fe0:	e7d9      	b.n	8004f96 <_strtod_l+0x2fe>
 8004fe2:	498a      	ldr	r1, [pc, #552]	; (800520c <_strtod_l+0x574>)
 8004fe4:	a819      	add	r0, sp, #100	; 0x64
 8004fe6:	f001 f9ff 	bl	80063e8 <__match>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f43f aea8 	beq.w	8004d40 <_strtod_l+0xa8>
 8004ff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ff2:	4987      	ldr	r1, [pc, #540]	; (8005210 <_strtod_l+0x578>)
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	a819      	add	r0, sp, #100	; 0x64
 8004ff8:	9319      	str	r3, [sp, #100]	; 0x64
 8004ffa:	f001 f9f5 	bl	80063e8 <__match>
 8004ffe:	b910      	cbnz	r0, 8005006 <_strtod_l+0x36e>
 8005000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005002:	3301      	adds	r3, #1
 8005004:	9319      	str	r3, [sp, #100]	; 0x64
 8005006:	f04f 0800 	mov.w	r8, #0
 800500a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005214 <_strtod_l+0x57c>
 800500e:	e67c      	b.n	8004d0a <_strtod_l+0x72>
 8005010:	4881      	ldr	r0, [pc, #516]	; (8005218 <_strtod_l+0x580>)
 8005012:	f000 ff07 	bl	8005e24 <nan>
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	e676      	b.n	8004d0a <_strtod_l+0x72>
 800501c:	9b08      	ldr	r3, [sp, #32]
 800501e:	f1bb 0f00 	cmp.w	fp, #0
 8005022:	bf08      	it	eq
 8005024:	46b3      	moveq	fp, r6
 8005026:	1afb      	subs	r3, r7, r3
 8005028:	2e10      	cmp	r6, #16
 800502a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800502c:	4635      	mov	r5, r6
 800502e:	9309      	str	r3, [sp, #36]	; 0x24
 8005030:	bfa8      	it	ge
 8005032:	2510      	movge	r5, #16
 8005034:	f7fb fa8a 	bl	800054c <__aeabi_ui2d>
 8005038:	2e09      	cmp	r6, #9
 800503a:	4680      	mov	r8, r0
 800503c:	4689      	mov	r9, r1
 800503e:	dd13      	ble.n	8005068 <_strtod_l+0x3d0>
 8005040:	4b76      	ldr	r3, [pc, #472]	; (800521c <_strtod_l+0x584>)
 8005042:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005046:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800504a:	f7fb faf9 	bl	8000640 <__aeabi_dmul>
 800504e:	4680      	mov	r8, r0
 8005050:	4650      	mov	r0, sl
 8005052:	4689      	mov	r9, r1
 8005054:	f7fb fa7a 	bl	800054c <__aeabi_ui2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb f938 	bl	80002d4 <__adddf3>
 8005064:	4680      	mov	r8, r0
 8005066:	4689      	mov	r9, r1
 8005068:	2e0f      	cmp	r6, #15
 800506a:	dc36      	bgt.n	80050da <_strtod_l+0x442>
 800506c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	f43f ae4b 	beq.w	8004d0a <_strtod_l+0x72>
 8005074:	dd22      	ble.n	80050bc <_strtod_l+0x424>
 8005076:	2b16      	cmp	r3, #22
 8005078:	dc09      	bgt.n	800508e <_strtod_l+0x3f6>
 800507a:	4968      	ldr	r1, [pc, #416]	; (800521c <_strtod_l+0x584>)
 800507c:	4642      	mov	r2, r8
 800507e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005082:	464b      	mov	r3, r9
 8005084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005088:	f7fb fada 	bl	8000640 <__aeabi_dmul>
 800508c:	e7c3      	b.n	8005016 <_strtod_l+0x37e>
 800508e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005090:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005094:	4293      	cmp	r3, r2
 8005096:	db20      	blt.n	80050da <_strtod_l+0x442>
 8005098:	4c60      	ldr	r4, [pc, #384]	; (800521c <_strtod_l+0x584>)
 800509a:	f1c6 060f 	rsb	r6, r6, #15
 800509e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80050a2:	4642      	mov	r2, r8
 80050a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a8:	464b      	mov	r3, r9
 80050aa:	f7fb fac9 	bl	8000640 <__aeabi_dmul>
 80050ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b0:	1b9e      	subs	r6, r3, r6
 80050b2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80050b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80050ba:	e7e5      	b.n	8005088 <_strtod_l+0x3f0>
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	3316      	adds	r3, #22
 80050c0:	db0b      	blt.n	80050da <_strtod_l+0x442>
 80050c2:	9b08      	ldr	r3, [sp, #32]
 80050c4:	4640      	mov	r0, r8
 80050c6:	1bdf      	subs	r7, r3, r7
 80050c8:	4b54      	ldr	r3, [pc, #336]	; (800521c <_strtod_l+0x584>)
 80050ca:	4649      	mov	r1, r9
 80050cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80050d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d4:	f7fb fbde 	bl	8000894 <__aeabi_ddiv>
 80050d8:	e79d      	b.n	8005016 <_strtod_l+0x37e>
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	1b75      	subs	r5, r6, r5
 80050de:	441d      	add	r5, r3
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	dd70      	ble.n	80051c6 <_strtod_l+0x52e>
 80050e4:	f015 030f 	ands.w	r3, r5, #15
 80050e8:	d00a      	beq.n	8005100 <_strtod_l+0x468>
 80050ea:	494c      	ldr	r1, [pc, #304]	; (800521c <_strtod_l+0x584>)
 80050ec:	4642      	mov	r2, r8
 80050ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f6:	464b      	mov	r3, r9
 80050f8:	f7fb faa2 	bl	8000640 <__aeabi_dmul>
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	f035 050f 	bics.w	r5, r5, #15
 8005104:	d04d      	beq.n	80051a2 <_strtod_l+0x50a>
 8005106:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800510a:	dd22      	ble.n	8005152 <_strtod_l+0x4ba>
 800510c:	2600      	movs	r6, #0
 800510e:	46b3      	mov	fp, r6
 8005110:	960b      	str	r6, [sp, #44]	; 0x2c
 8005112:	9608      	str	r6, [sp, #32]
 8005114:	2322      	movs	r3, #34	; 0x22
 8005116:	f04f 0800 	mov.w	r8, #0
 800511a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005214 <_strtod_l+0x57c>
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	f43f adf1 	beq.w	8004d0a <_strtod_l+0x72>
 8005128:	4620      	mov	r0, r4
 800512a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800512c:	f7ff f934 	bl	8004398 <_Bfree>
 8005130:	4620      	mov	r0, r4
 8005132:	9908      	ldr	r1, [sp, #32]
 8005134:	f7ff f930 	bl	8004398 <_Bfree>
 8005138:	4659      	mov	r1, fp
 800513a:	4620      	mov	r0, r4
 800513c:	f7ff f92c 	bl	8004398 <_Bfree>
 8005140:	4620      	mov	r0, r4
 8005142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005144:	f7ff f928 	bl	8004398 <_Bfree>
 8005148:	4631      	mov	r1, r6
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff f924 	bl	8004398 <_Bfree>
 8005150:	e5db      	b.n	8004d0a <_strtod_l+0x72>
 8005152:	4b33      	ldr	r3, [pc, #204]	; (8005220 <_strtod_l+0x588>)
 8005154:	4640      	mov	r0, r8
 8005156:	9305      	str	r3, [sp, #20]
 8005158:	2300      	movs	r3, #0
 800515a:	4649      	mov	r1, r9
 800515c:	469a      	mov	sl, r3
 800515e:	112d      	asrs	r5, r5, #4
 8005160:	2d01      	cmp	r5, #1
 8005162:	dc21      	bgt.n	80051a8 <_strtod_l+0x510>
 8005164:	b10b      	cbz	r3, 800516a <_strtod_l+0x4d2>
 8005166:	4680      	mov	r8, r0
 8005168:	4689      	mov	r9, r1
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <_strtod_l+0x588>)
 800516c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005170:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005174:	4642      	mov	r2, r8
 8005176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517a:	464b      	mov	r3, r9
 800517c:	f7fb fa60 	bl	8000640 <__aeabi_dmul>
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <_strtod_l+0x57c>)
 8005182:	460a      	mov	r2, r1
 8005184:	400b      	ands	r3, r1
 8005186:	4927      	ldr	r1, [pc, #156]	; (8005224 <_strtod_l+0x58c>)
 8005188:	4680      	mov	r8, r0
 800518a:	428b      	cmp	r3, r1
 800518c:	d8be      	bhi.n	800510c <_strtod_l+0x474>
 800518e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005192:	428b      	cmp	r3, r1
 8005194:	bf86      	itte	hi
 8005196:	f04f 38ff 	movhi.w	r8, #4294967295
 800519a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005228 <_strtod_l+0x590>
 800519e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80051a2:	2300      	movs	r3, #0
 80051a4:	9305      	str	r3, [sp, #20]
 80051a6:	e07b      	b.n	80052a0 <_strtod_l+0x608>
 80051a8:	07ea      	lsls	r2, r5, #31
 80051aa:	d505      	bpl.n	80051b8 <_strtod_l+0x520>
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb fa45 	bl	8000640 <__aeabi_dmul>
 80051b6:	2301      	movs	r3, #1
 80051b8:	9a05      	ldr	r2, [sp, #20]
 80051ba:	f10a 0a01 	add.w	sl, sl, #1
 80051be:	3208      	adds	r2, #8
 80051c0:	106d      	asrs	r5, r5, #1
 80051c2:	9205      	str	r2, [sp, #20]
 80051c4:	e7cc      	b.n	8005160 <_strtod_l+0x4c8>
 80051c6:	d0ec      	beq.n	80051a2 <_strtod_l+0x50a>
 80051c8:	426d      	negs	r5, r5
 80051ca:	f015 020f 	ands.w	r2, r5, #15
 80051ce:	d00a      	beq.n	80051e6 <_strtod_l+0x54e>
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <_strtod_l+0x584>)
 80051d2:	4640      	mov	r0, r8
 80051d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d8:	4649      	mov	r1, r9
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fb59 	bl	8000894 <__aeabi_ddiv>
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	112d      	asrs	r5, r5, #4
 80051e8:	d0db      	beq.n	80051a2 <_strtod_l+0x50a>
 80051ea:	2d1f      	cmp	r5, #31
 80051ec:	dd1e      	ble.n	800522c <_strtod_l+0x594>
 80051ee:	2600      	movs	r6, #0
 80051f0:	46b3      	mov	fp, r6
 80051f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80051f4:	9608      	str	r6, [sp, #32]
 80051f6:	2322      	movs	r3, #34	; 0x22
 80051f8:	f04f 0800 	mov.w	r8, #0
 80051fc:	f04f 0900 	mov.w	r9, #0
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	e78d      	b.n	8005120 <_strtod_l+0x488>
 8005204:	08006bc8 	.word	0x08006bc8
 8005208:	08006df4 	.word	0x08006df4
 800520c:	08006bc0 	.word	0x08006bc0
 8005210:	08006bf7 	.word	0x08006bf7
 8005214:	7ff00000 	.word	0x7ff00000
 8005218:	08006f83 	.word	0x08006f83
 800521c:	08006d08 	.word	0x08006d08
 8005220:	08006ce0 	.word	0x08006ce0
 8005224:	7ca00000 	.word	0x7ca00000
 8005228:	7fefffff 	.word	0x7fefffff
 800522c:	f015 0310 	ands.w	r3, r5, #16
 8005230:	bf18      	it	ne
 8005232:	236a      	movne	r3, #106	; 0x6a
 8005234:	4640      	mov	r0, r8
 8005236:	9305      	str	r3, [sp, #20]
 8005238:	4649      	mov	r1, r9
 800523a:	2300      	movs	r3, #0
 800523c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005508 <_strtod_l+0x870>
 8005240:	07ea      	lsls	r2, r5, #31
 8005242:	d504      	bpl.n	800524e <_strtod_l+0x5b6>
 8005244:	e9da 2300 	ldrd	r2, r3, [sl]
 8005248:	f7fb f9fa 	bl	8000640 <__aeabi_dmul>
 800524c:	2301      	movs	r3, #1
 800524e:	106d      	asrs	r5, r5, #1
 8005250:	f10a 0a08 	add.w	sl, sl, #8
 8005254:	d1f4      	bne.n	8005240 <_strtod_l+0x5a8>
 8005256:	b10b      	cbz	r3, 800525c <_strtod_l+0x5c4>
 8005258:	4680      	mov	r8, r0
 800525a:	4689      	mov	r9, r1
 800525c:	9b05      	ldr	r3, [sp, #20]
 800525e:	b1bb      	cbz	r3, 8005290 <_strtod_l+0x5f8>
 8005260:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005268:	2b00      	cmp	r3, #0
 800526a:	4649      	mov	r1, r9
 800526c:	dd10      	ble.n	8005290 <_strtod_l+0x5f8>
 800526e:	2b1f      	cmp	r3, #31
 8005270:	f340 8128 	ble.w	80054c4 <_strtod_l+0x82c>
 8005274:	2b34      	cmp	r3, #52	; 0x34
 8005276:	bfd8      	it	le
 8005278:	f04f 33ff 	movle.w	r3, #4294967295
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	bfcf      	iteee	gt
 8005282:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005286:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800528a:	4093      	lslle	r3, r2
 800528c:	ea03 0901 	andle.w	r9, r3, r1
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fb fc3a 	bl	8000b10 <__aeabi_dcmpeq>
 800529c:	2800      	cmp	r0, #0
 800529e:	d1a6      	bne.n	80051ee <_strtod_l+0x556>
 80052a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a2:	465a      	mov	r2, fp
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	4620      	mov	r0, r4
 80052a8:	4633      	mov	r3, r6
 80052aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ac:	f7ff f8dc 	bl	8004468 <__s2b>
 80052b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f43f af2a 	beq.w	800510c <_strtod_l+0x474>
 80052b8:	2600      	movs	r6, #0
 80052ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052bc:	9b08      	ldr	r3, [sp, #32]
 80052be:	2a00      	cmp	r2, #0
 80052c0:	eba3 0307 	sub.w	r3, r3, r7
 80052c4:	bfa8      	it	ge
 80052c6:	2300      	movge	r3, #0
 80052c8:	46b3      	mov	fp, r6
 80052ca:	9312      	str	r3, [sp, #72]	; 0x48
 80052cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052d0:	9316      	str	r3, [sp, #88]	; 0x58
 80052d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052d4:	4620      	mov	r0, r4
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	f7ff f81e 	bl	8004318 <_Balloc>
 80052dc:	9008      	str	r0, [sp, #32]
 80052de:	2800      	cmp	r0, #0
 80052e0:	f43f af18 	beq.w	8005114 <_strtod_l+0x47c>
 80052e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052e6:	300c      	adds	r0, #12
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	f103 010c 	add.w	r1, r3, #12
 80052ee:	3202      	adds	r2, #2
 80052f0:	0092      	lsls	r2, r2, #2
 80052f2:	f000 fd89 	bl	8005e08 <memcpy>
 80052f6:	ab1c      	add	r3, sp, #112	; 0x70
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4642      	mov	r2, r8
 8005300:	464b      	mov	r3, r9
 8005302:	4620      	mov	r0, r4
 8005304:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005308:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800530c:	f7ff fbd8 	bl	8004ac0 <__d2b>
 8005310:	901a      	str	r0, [sp, #104]	; 0x68
 8005312:	2800      	cmp	r0, #0
 8005314:	f43f aefe 	beq.w	8005114 <_strtod_l+0x47c>
 8005318:	2101      	movs	r1, #1
 800531a:	4620      	mov	r0, r4
 800531c:	f7ff f93c 	bl	8004598 <__i2b>
 8005320:	4683      	mov	fp, r0
 8005322:	2800      	cmp	r0, #0
 8005324:	f43f aef6 	beq.w	8005114 <_strtod_l+0x47c>
 8005328:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800532a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800532c:	2f00      	cmp	r7, #0
 800532e:	bfab      	itete	ge
 8005330:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8005332:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005334:	eb07 0a03 	addge.w	sl, r7, r3
 8005338:	1bdd      	sublt	r5, r3, r7
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	bfa8      	it	ge
 800533e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005340:	eba7 0703 	sub.w	r7, r7, r3
 8005344:	4417      	add	r7, r2
 8005346:	4b71      	ldr	r3, [pc, #452]	; (800550c <_strtod_l+0x874>)
 8005348:	f107 37ff 	add.w	r7, r7, #4294967295
 800534c:	bfb8      	it	lt
 800534e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8005352:	429f      	cmp	r7, r3
 8005354:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005358:	f280 80c7 	bge.w	80054ea <_strtod_l+0x852>
 800535c:	1bdb      	subs	r3, r3, r7
 800535e:	2b1f      	cmp	r3, #31
 8005360:	f04f 0101 	mov.w	r1, #1
 8005364:	eba2 0203 	sub.w	r2, r2, r3
 8005368:	f300 80b3 	bgt.w	80054d2 <_strtod_l+0x83a>
 800536c:	fa01 f303 	lsl.w	r3, r1, r3
 8005370:	9313      	str	r3, [sp, #76]	; 0x4c
 8005372:	2300      	movs	r3, #0
 8005374:	9310      	str	r3, [sp, #64]	; 0x40
 8005376:	eb0a 0702 	add.w	r7, sl, r2
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	45ba      	cmp	sl, r7
 800537e:	4415      	add	r5, r2
 8005380:	441d      	add	r5, r3
 8005382:	4653      	mov	r3, sl
 8005384:	bfa8      	it	ge
 8005386:	463b      	movge	r3, r7
 8005388:	42ab      	cmp	r3, r5
 800538a:	bfa8      	it	ge
 800538c:	462b      	movge	r3, r5
 800538e:	2b00      	cmp	r3, #0
 8005390:	bfc2      	ittt	gt
 8005392:	1aff      	subgt	r7, r7, r3
 8005394:	1aed      	subgt	r5, r5, r3
 8005396:	ebaa 0a03 	subgt.w	sl, sl, r3
 800539a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd17      	ble.n	80053d0 <_strtod_l+0x738>
 80053a0:	4659      	mov	r1, fp
 80053a2:	461a      	mov	r2, r3
 80053a4:	4620      	mov	r0, r4
 80053a6:	f7ff f9b5 	bl	8004714 <__pow5mult>
 80053aa:	4683      	mov	fp, r0
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f43f aeb1 	beq.w	8005114 <_strtod_l+0x47c>
 80053b2:	4601      	mov	r1, r0
 80053b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80053b6:	4620      	mov	r0, r4
 80053b8:	f7ff f904 	bl	80045c4 <__multiply>
 80053bc:	900a      	str	r0, [sp, #40]	; 0x28
 80053be:	2800      	cmp	r0, #0
 80053c0:	f43f aea8 	beq.w	8005114 <_strtod_l+0x47c>
 80053c4:	4620      	mov	r0, r4
 80053c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053c8:	f7fe ffe6 	bl	8004398 <_Bfree>
 80053cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ce:	931a      	str	r3, [sp, #104]	; 0x68
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	f300 808f 	bgt.w	80054f4 <_strtod_l+0x85c>
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dd08      	ble.n	80053ee <_strtod_l+0x756>
 80053dc:	4620      	mov	r0, r4
 80053de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053e0:	9908      	ldr	r1, [sp, #32]
 80053e2:	f7ff f997 	bl	8004714 <__pow5mult>
 80053e6:	9008      	str	r0, [sp, #32]
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f43f ae93 	beq.w	8005114 <_strtod_l+0x47c>
 80053ee:	2d00      	cmp	r5, #0
 80053f0:	dd08      	ble.n	8005404 <_strtod_l+0x76c>
 80053f2:	462a      	mov	r2, r5
 80053f4:	4620      	mov	r0, r4
 80053f6:	9908      	ldr	r1, [sp, #32]
 80053f8:	f7ff f9e6 	bl	80047c8 <__lshift>
 80053fc:	9008      	str	r0, [sp, #32]
 80053fe:	2800      	cmp	r0, #0
 8005400:	f43f ae88 	beq.w	8005114 <_strtod_l+0x47c>
 8005404:	f1ba 0f00 	cmp.w	sl, #0
 8005408:	dd08      	ble.n	800541c <_strtod_l+0x784>
 800540a:	4659      	mov	r1, fp
 800540c:	4652      	mov	r2, sl
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff f9da 	bl	80047c8 <__lshift>
 8005414:	4683      	mov	fp, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f ae7c 	beq.w	8005114 <_strtod_l+0x47c>
 800541c:	4620      	mov	r0, r4
 800541e:	9a08      	ldr	r2, [sp, #32]
 8005420:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005422:	f7ff fa59 	bl	80048d8 <__mdiff>
 8005426:	4606      	mov	r6, r0
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f ae73 	beq.w	8005114 <_strtod_l+0x47c>
 800542e:	2500      	movs	r5, #0
 8005430:	68c3      	ldr	r3, [r0, #12]
 8005432:	4659      	mov	r1, fp
 8005434:	60c5      	str	r5, [r0, #12]
 8005436:	930a      	str	r3, [sp, #40]	; 0x28
 8005438:	f7ff fa32 	bl	80048a0 <__mcmp>
 800543c:	42a8      	cmp	r0, r5
 800543e:	da6b      	bge.n	8005518 <_strtod_l+0x880>
 8005440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005442:	ea53 0308 	orrs.w	r3, r3, r8
 8005446:	f040 808f 	bne.w	8005568 <_strtod_l+0x8d0>
 800544a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 808a 	bne.w	8005568 <_strtod_l+0x8d0>
 8005454:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005460:	f240 8082 	bls.w	8005568 <_strtod_l+0x8d0>
 8005464:	6973      	ldr	r3, [r6, #20]
 8005466:	b913      	cbnz	r3, 800546e <_strtod_l+0x7d6>
 8005468:	6933      	ldr	r3, [r6, #16]
 800546a:	2b01      	cmp	r3, #1
 800546c:	dd7c      	ble.n	8005568 <_strtod_l+0x8d0>
 800546e:	4631      	mov	r1, r6
 8005470:	2201      	movs	r2, #1
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff f9a8 	bl	80047c8 <__lshift>
 8005478:	4659      	mov	r1, fp
 800547a:	4606      	mov	r6, r0
 800547c:	f7ff fa10 	bl	80048a0 <__mcmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	dd71      	ble.n	8005568 <_strtod_l+0x8d0>
 8005484:	9905      	ldr	r1, [sp, #20]
 8005486:	464b      	mov	r3, r9
 8005488:	4a21      	ldr	r2, [pc, #132]	; (8005510 <_strtod_l+0x878>)
 800548a:	2900      	cmp	r1, #0
 800548c:	f000 808d 	beq.w	80055aa <_strtod_l+0x912>
 8005490:	ea02 0109 	and.w	r1, r2, r9
 8005494:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005498:	f300 8087 	bgt.w	80055aa <_strtod_l+0x912>
 800549c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054a0:	f77f aea9 	ble.w	80051f6 <_strtod_l+0x55e>
 80054a4:	4640      	mov	r0, r8
 80054a6:	4649      	mov	r1, r9
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <_strtod_l+0x87c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7fb f8c8 	bl	8000640 <__aeabi_dmul>
 80054b0:	4b17      	ldr	r3, [pc, #92]	; (8005510 <_strtod_l+0x878>)
 80054b2:	4680      	mov	r8, r0
 80054b4:	400b      	ands	r3, r1
 80054b6:	4689      	mov	r9, r1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f47f ae35 	bne.w	8005128 <_strtod_l+0x490>
 80054be:	2322      	movs	r3, #34	; 0x22
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	e631      	b.n	8005128 <_strtod_l+0x490>
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	ea03 0808 	and.w	r8, r3, r8
 80054d0:	e6de      	b.n	8005290 <_strtod_l+0x5f8>
 80054d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80054d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80054da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80054de:	37e2      	adds	r7, #226	; 0xe2
 80054e0:	fa01 f307 	lsl.w	r3, r1, r7
 80054e4:	9310      	str	r3, [sp, #64]	; 0x40
 80054e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80054e8:	e745      	b.n	8005376 <_strtod_l+0x6de>
 80054ea:	2300      	movs	r3, #0
 80054ec:	9310      	str	r3, [sp, #64]	; 0x40
 80054ee:	2301      	movs	r3, #1
 80054f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80054f2:	e740      	b.n	8005376 <_strtod_l+0x6de>
 80054f4:	463a      	mov	r2, r7
 80054f6:	4620      	mov	r0, r4
 80054f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054fa:	f7ff f965 	bl	80047c8 <__lshift>
 80054fe:	901a      	str	r0, [sp, #104]	; 0x68
 8005500:	2800      	cmp	r0, #0
 8005502:	f47f af68 	bne.w	80053d6 <_strtod_l+0x73e>
 8005506:	e605      	b.n	8005114 <_strtod_l+0x47c>
 8005508:	08006e08 	.word	0x08006e08
 800550c:	fffffc02 	.word	0xfffffc02
 8005510:	7ff00000 	.word	0x7ff00000
 8005514:	39500000 	.word	0x39500000
 8005518:	46ca      	mov	sl, r9
 800551a:	d165      	bne.n	80055e8 <_strtod_l+0x950>
 800551c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800551e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005522:	b352      	cbz	r2, 800557a <_strtod_l+0x8e2>
 8005524:	4a9e      	ldr	r2, [pc, #632]	; (80057a0 <_strtod_l+0xb08>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d12a      	bne.n	8005580 <_strtod_l+0x8e8>
 800552a:	9b05      	ldr	r3, [sp, #20]
 800552c:	4641      	mov	r1, r8
 800552e:	b1fb      	cbz	r3, 8005570 <_strtod_l+0x8d8>
 8005530:	4b9c      	ldr	r3, [pc, #624]	; (80057a4 <_strtod_l+0xb0c>)
 8005532:	f04f 32ff 	mov.w	r2, #4294967295
 8005536:	ea09 0303 	and.w	r3, r9, r3
 800553a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800553e:	d81a      	bhi.n	8005576 <_strtod_l+0x8de>
 8005540:	0d1b      	lsrs	r3, r3, #20
 8005542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	4299      	cmp	r1, r3
 800554c:	d118      	bne.n	8005580 <_strtod_l+0x8e8>
 800554e:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <_strtod_l+0xb10>)
 8005550:	459a      	cmp	sl, r3
 8005552:	d102      	bne.n	800555a <_strtod_l+0x8c2>
 8005554:	3101      	adds	r1, #1
 8005556:	f43f addd 	beq.w	8005114 <_strtod_l+0x47c>
 800555a:	f04f 0800 	mov.w	r8, #0
 800555e:	4b91      	ldr	r3, [pc, #580]	; (80057a4 <_strtod_l+0xb0c>)
 8005560:	ea0a 0303 	and.w	r3, sl, r3
 8005564:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005568:	9b05      	ldr	r3, [sp, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d19a      	bne.n	80054a4 <_strtod_l+0x80c>
 800556e:	e5db      	b.n	8005128 <_strtod_l+0x490>
 8005570:	f04f 33ff 	mov.w	r3, #4294967295
 8005574:	e7e9      	b.n	800554a <_strtod_l+0x8b2>
 8005576:	4613      	mov	r3, r2
 8005578:	e7e7      	b.n	800554a <_strtod_l+0x8b2>
 800557a:	ea53 0308 	orrs.w	r3, r3, r8
 800557e:	d081      	beq.n	8005484 <_strtod_l+0x7ec>
 8005580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005582:	b1e3      	cbz	r3, 80055be <_strtod_l+0x926>
 8005584:	ea13 0f0a 	tst.w	r3, sl
 8005588:	d0ee      	beq.n	8005568 <_strtod_l+0x8d0>
 800558a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	9a05      	ldr	r2, [sp, #20]
 8005592:	b1c3      	cbz	r3, 80055c6 <_strtod_l+0x92e>
 8005594:	f7ff fb5c 	bl	8004c50 <sulp>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800559e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055a0:	f7fa fe98 	bl	80002d4 <__adddf3>
 80055a4:	4680      	mov	r8, r0
 80055a6:	4689      	mov	r9, r1
 80055a8:	e7de      	b.n	8005568 <_strtod_l+0x8d0>
 80055aa:	4013      	ands	r3, r2
 80055ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055b4:	f04f 38ff 	mov.w	r8, #4294967295
 80055b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80055bc:	e7d4      	b.n	8005568 <_strtod_l+0x8d0>
 80055be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055c0:	ea13 0f08 	tst.w	r3, r8
 80055c4:	e7e0      	b.n	8005588 <_strtod_l+0x8f0>
 80055c6:	f7ff fb43 	bl	8004c50 <sulp>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055d2:	f7fa fe7d 	bl	80002d0 <__aeabi_dsub>
 80055d6:	2200      	movs	r2, #0
 80055d8:	2300      	movs	r3, #0
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	f7fb fa97 	bl	8000b10 <__aeabi_dcmpeq>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0c0      	beq.n	8005568 <_strtod_l+0x8d0>
 80055e6:	e606      	b.n	80051f6 <_strtod_l+0x55e>
 80055e8:	4659      	mov	r1, fp
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7ff fabe 	bl	8004b6c <__ratio>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80055f8:	2200      	movs	r2, #0
 80055fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055fe:	f7fb fa9b 	bl	8000b38 <__aeabi_dcmple>
 8005602:	2800      	cmp	r0, #0
 8005604:	d06f      	beq.n	80056e6 <_strtod_l+0xa4e>
 8005606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	d17c      	bne.n	8005706 <_strtod_l+0xa6e>
 800560c:	f1b8 0f00 	cmp.w	r8, #0
 8005610:	d159      	bne.n	80056c6 <_strtod_l+0xa2e>
 8005612:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005616:	2b00      	cmp	r3, #0
 8005618:	d17b      	bne.n	8005712 <_strtod_l+0xa7a>
 800561a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800561e:	2200      	movs	r2, #0
 8005620:	4b62      	ldr	r3, [pc, #392]	; (80057ac <_strtod_l+0xb14>)
 8005622:	f7fb fa7f 	bl	8000b24 <__aeabi_dcmplt>
 8005626:	2800      	cmp	r0, #0
 8005628:	d15a      	bne.n	80056e0 <_strtod_l+0xa48>
 800562a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800562e:	2200      	movs	r2, #0
 8005630:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <_strtod_l+0xb18>)
 8005632:	f7fb f805 	bl	8000640 <__aeabi_dmul>
 8005636:	4605      	mov	r5, r0
 8005638:	460f      	mov	r7, r1
 800563a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800563e:	9506      	str	r5, [sp, #24]
 8005640:	9307      	str	r3, [sp, #28]
 8005642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005646:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800564a:	4b56      	ldr	r3, [pc, #344]	; (80057a4 <_strtod_l+0xb0c>)
 800564c:	4a55      	ldr	r2, [pc, #340]	; (80057a4 <_strtod_l+0xb0c>)
 800564e:	ea0a 0303 	and.w	r3, sl, r3
 8005652:	9313      	str	r3, [sp, #76]	; 0x4c
 8005654:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <_strtod_l+0xb1c>)
 8005656:	ea0a 0202 	and.w	r2, sl, r2
 800565a:	429a      	cmp	r2, r3
 800565c:	f040 80b0 	bne.w	80057c0 <_strtod_l+0xb28>
 8005660:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005664:	4640      	mov	r0, r8
 8005666:	4649      	mov	r1, r9
 8005668:	f7ff f9c2 	bl	80049f0 <__ulp>
 800566c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005670:	f7fa ffe6 	bl	8000640 <__aeabi_dmul>
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	f7fa fe2c 	bl	80002d4 <__adddf3>
 800567c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80057a4 <_strtod_l+0xb0c>
 8005680:	4a4d      	ldr	r2, [pc, #308]	; (80057b8 <_strtod_l+0xb20>)
 8005682:	ea01 0a0a 	and.w	sl, r1, sl
 8005686:	4592      	cmp	sl, r2
 8005688:	4680      	mov	r8, r0
 800568a:	d948      	bls.n	800571e <_strtod_l+0xa86>
 800568c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <_strtod_l+0xb10>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d103      	bne.n	800569c <_strtod_l+0xa04>
 8005694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005696:	3301      	adds	r3, #1
 8005698:	f43f ad3c 	beq.w	8005114 <_strtod_l+0x47c>
 800569c:	f04f 38ff 	mov.w	r8, #4294967295
 80056a0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80057a8 <_strtod_l+0xb10>
 80056a4:	4620      	mov	r0, r4
 80056a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056a8:	f7fe fe76 	bl	8004398 <_Bfree>
 80056ac:	4620      	mov	r0, r4
 80056ae:	9908      	ldr	r1, [sp, #32]
 80056b0:	f7fe fe72 	bl	8004398 <_Bfree>
 80056b4:	4659      	mov	r1, fp
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7fe fe6e 	bl	8004398 <_Bfree>
 80056bc:	4631      	mov	r1, r6
 80056be:	4620      	mov	r0, r4
 80056c0:	f7fe fe6a 	bl	8004398 <_Bfree>
 80056c4:	e605      	b.n	80052d2 <_strtod_l+0x63a>
 80056c6:	f1b8 0f01 	cmp.w	r8, #1
 80056ca:	d103      	bne.n	80056d4 <_strtod_l+0xa3c>
 80056cc:	f1b9 0f00 	cmp.w	r9, #0
 80056d0:	f43f ad91 	beq.w	80051f6 <_strtod_l+0x55e>
 80056d4:	2200      	movs	r2, #0
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <_strtod_l+0xb24>)
 80056d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056de:	e016      	b.n	800570e <_strtod_l+0xa76>
 80056e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056e2:	4f33      	ldr	r7, [pc, #204]	; (80057b0 <_strtod_l+0xb18>)
 80056e4:	e7a9      	b.n	800563a <_strtod_l+0x9a2>
 80056e6:	4b32      	ldr	r3, [pc, #200]	; (80057b0 <_strtod_l+0xb18>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ee:	f7fa ffa7 	bl	8000640 <__aeabi_dmul>
 80056f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f4:	4605      	mov	r5, r0
 80056f6:	460f      	mov	r7, r1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d09e      	beq.n	800563a <_strtod_l+0x9a2>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005704:	e79d      	b.n	8005642 <_strtod_l+0x9aa>
 8005706:	2200      	movs	r2, #0
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <_strtod_l+0xb14>)
 800570a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800570e:	4f27      	ldr	r7, [pc, #156]	; (80057ac <_strtod_l+0xb14>)
 8005710:	e797      	b.n	8005642 <_strtod_l+0x9aa>
 8005712:	2200      	movs	r2, #0
 8005714:	4b29      	ldr	r3, [pc, #164]	; (80057bc <_strtod_l+0xb24>)
 8005716:	4645      	mov	r5, r8
 8005718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800571c:	e7f7      	b.n	800570e <_strtod_l+0xa76>
 800571e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	46ca      	mov	sl, r9
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1bc      	bne.n	80056a4 <_strtod_l+0xa0c>
 800572a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800572e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005730:	0d1b      	lsrs	r3, r3, #20
 8005732:	051b      	lsls	r3, r3, #20
 8005734:	429a      	cmp	r2, r3
 8005736:	d1b5      	bne.n	80056a4 <_strtod_l+0xa0c>
 8005738:	4628      	mov	r0, r5
 800573a:	4639      	mov	r1, r7
 800573c:	f7fb fc4c 	bl	8000fd8 <__aeabi_d2lz>
 8005740:	f7fa ff50 	bl	80005e4 <__aeabi_l2d>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4628      	mov	r0, r5
 800574a:	4639      	mov	r1, r7
 800574c:	f7fa fdc0 	bl	80002d0 <__aeabi_dsub>
 8005750:	460b      	mov	r3, r1
 8005752:	4602      	mov	r2, r0
 8005754:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8005758:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800575c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575e:	ea4a 0a08 	orr.w	sl, sl, r8
 8005762:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005766:	d06c      	beq.n	8005842 <_strtod_l+0xbaa>
 8005768:	a309      	add	r3, pc, #36	; (adr r3, 8005790 <_strtod_l+0xaf8>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fb f9d9 	bl	8000b24 <__aeabi_dcmplt>
 8005772:	2800      	cmp	r0, #0
 8005774:	f47f acd8 	bne.w	8005128 <_strtod_l+0x490>
 8005778:	a307      	add	r3, pc, #28	; (adr r3, 8005798 <_strtod_l+0xb00>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005782:	f7fb f9ed 	bl	8000b60 <__aeabi_dcmpgt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d08c      	beq.n	80056a4 <_strtod_l+0xa0c>
 800578a:	e4cd      	b.n	8005128 <_strtod_l+0x490>
 800578c:	f3af 8000 	nop.w
 8005790:	94a03595 	.word	0x94a03595
 8005794:	3fdfffff 	.word	0x3fdfffff
 8005798:	35afe535 	.word	0x35afe535
 800579c:	3fe00000 	.word	0x3fe00000
 80057a0:	000fffff 	.word	0x000fffff
 80057a4:	7ff00000 	.word	0x7ff00000
 80057a8:	7fefffff 	.word	0x7fefffff
 80057ac:	3ff00000 	.word	0x3ff00000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	7fe00000 	.word	0x7fe00000
 80057b8:	7c9fffff 	.word	0x7c9fffff
 80057bc:	bff00000 	.word	0xbff00000
 80057c0:	9b05      	ldr	r3, [sp, #20]
 80057c2:	b333      	cbz	r3, 8005812 <_strtod_l+0xb7a>
 80057c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057ca:	d822      	bhi.n	8005812 <_strtod_l+0xb7a>
 80057cc:	a328      	add	r3, pc, #160	; (adr r3, 8005870 <_strtod_l+0xbd8>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	4628      	mov	r0, r5
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fb f9af 	bl	8000b38 <__aeabi_dcmple>
 80057da:	b1a0      	cbz	r0, 8005806 <_strtod_l+0xb6e>
 80057dc:	4639      	mov	r1, r7
 80057de:	4628      	mov	r0, r5
 80057e0:	f7fb fa06 	bl	8000bf0 <__aeabi_d2uiz>
 80057e4:	2801      	cmp	r0, #1
 80057e6:	bf38      	it	cc
 80057e8:	2001      	movcc	r0, #1
 80057ea:	f7fa feaf 	bl	800054c <__aeabi_ui2d>
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	4605      	mov	r5, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	bb03      	cbnz	r3, 8005838 <_strtod_l+0xba0>
 80057f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057fa:	9014      	str	r0, [sp, #80]	; 0x50
 80057fc:	9315      	str	r3, [sp, #84]	; 0x54
 80057fe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005802:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800580a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	9311      	str	r3, [sp, #68]	; 0x44
 8005812:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005814:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005816:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800581a:	f7ff f8e9 	bl	80049f0 <__ulp>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4640      	mov	r0, r8
 8005824:	4649      	mov	r1, r9
 8005826:	f7fa ff0b 	bl	8000640 <__aeabi_dmul>
 800582a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800582c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800582e:	f7fa fd51 	bl	80002d4 <__adddf3>
 8005832:	4680      	mov	r8, r0
 8005834:	4689      	mov	r9, r1
 8005836:	e774      	b.n	8005722 <_strtod_l+0xa8a>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005840:	e7dd      	b.n	80057fe <_strtod_l+0xb66>
 8005842:	a30d      	add	r3, pc, #52	; (adr r3, 8005878 <_strtod_l+0xbe0>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fb f96c 	bl	8000b24 <__aeabi_dcmplt>
 800584c:	e79b      	b.n	8005786 <_strtod_l+0xaee>
 800584e:	2300      	movs	r3, #0
 8005850:	930e      	str	r3, [sp, #56]	; 0x38
 8005852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	f7ff ba5b 	b.w	8004d12 <_strtod_l+0x7a>
 800585c:	2a65      	cmp	r2, #101	; 0x65
 800585e:	f43f ab52 	beq.w	8004f06 <_strtod_l+0x26e>
 8005862:	2a45      	cmp	r2, #69	; 0x45
 8005864:	f43f ab4f 	beq.w	8004f06 <_strtod_l+0x26e>
 8005868:	2301      	movs	r3, #1
 800586a:	f7ff bb87 	b.w	8004f7c <_strtod_l+0x2e4>
 800586e:	bf00      	nop
 8005870:	ffc00000 	.word	0xffc00000
 8005874:	41dfffff 	.word	0x41dfffff
 8005878:	94a03595 	.word	0x94a03595
 800587c:	3fcfffff 	.word	0x3fcfffff

08005880 <_strtod_r>:
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <_strtod_r+0x8>)
 8005882:	f7ff ba09 	b.w	8004c98 <_strtod_l>
 8005886:	bf00      	nop
 8005888:	20000068 	.word	0x20000068

0800588c <_strtol_l.constprop.0>:
 800588c:	2b01      	cmp	r3, #1
 800588e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005892:	4686      	mov	lr, r0
 8005894:	4690      	mov	r8, r2
 8005896:	d001      	beq.n	800589c <_strtol_l.constprop.0+0x10>
 8005898:	2b24      	cmp	r3, #36	; 0x24
 800589a:	d906      	bls.n	80058aa <_strtol_l.constprop.0+0x1e>
 800589c:	f7fd fd92 	bl	80033c4 <__errno>
 80058a0:	2316      	movs	r3, #22
 80058a2:	6003      	str	r3, [r0, #0]
 80058a4:	2000      	movs	r0, #0
 80058a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058aa:	460d      	mov	r5, r1
 80058ac:	4835      	ldr	r0, [pc, #212]	; (8005984 <_strtol_l.constprop.0+0xf8>)
 80058ae:	462a      	mov	r2, r5
 80058b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058b4:	5d06      	ldrb	r6, [r0, r4]
 80058b6:	f016 0608 	ands.w	r6, r6, #8
 80058ba:	d1f8      	bne.n	80058ae <_strtol_l.constprop.0+0x22>
 80058bc:	2c2d      	cmp	r4, #45	; 0x2d
 80058be:	d12e      	bne.n	800591e <_strtol_l.constprop.0+0x92>
 80058c0:	2601      	movs	r6, #1
 80058c2:	782c      	ldrb	r4, [r5, #0]
 80058c4:	1c95      	adds	r5, r2, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d057      	beq.n	800597a <_strtol_l.constprop.0+0xee>
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d109      	bne.n	80058e2 <_strtol_l.constprop.0+0x56>
 80058ce:	2c30      	cmp	r4, #48	; 0x30
 80058d0:	d107      	bne.n	80058e2 <_strtol_l.constprop.0+0x56>
 80058d2:	782a      	ldrb	r2, [r5, #0]
 80058d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80058d8:	2a58      	cmp	r2, #88	; 0x58
 80058da:	d149      	bne.n	8005970 <_strtol_l.constprop.0+0xe4>
 80058dc:	2310      	movs	r3, #16
 80058de:	786c      	ldrb	r4, [r5, #1]
 80058e0:	3502      	adds	r5, #2
 80058e2:	2200      	movs	r2, #0
 80058e4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80058e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058ec:	fbbc f9f3 	udiv	r9, ip, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80058f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80058fa:	2f09      	cmp	r7, #9
 80058fc:	d814      	bhi.n	8005928 <_strtol_l.constprop.0+0x9c>
 80058fe:	463c      	mov	r4, r7
 8005900:	42a3      	cmp	r3, r4
 8005902:	dd20      	ble.n	8005946 <_strtol_l.constprop.0+0xba>
 8005904:	1c57      	adds	r7, r2, #1
 8005906:	d007      	beq.n	8005918 <_strtol_l.constprop.0+0x8c>
 8005908:	4581      	cmp	r9, r0
 800590a:	d319      	bcc.n	8005940 <_strtol_l.constprop.0+0xb4>
 800590c:	d101      	bne.n	8005912 <_strtol_l.constprop.0+0x86>
 800590e:	45a2      	cmp	sl, r4
 8005910:	db16      	blt.n	8005940 <_strtol_l.constprop.0+0xb4>
 8005912:	2201      	movs	r2, #1
 8005914:	fb00 4003 	mla	r0, r0, r3, r4
 8005918:	f815 4b01 	ldrb.w	r4, [r5], #1
 800591c:	e7eb      	b.n	80058f6 <_strtol_l.constprop.0+0x6a>
 800591e:	2c2b      	cmp	r4, #43	; 0x2b
 8005920:	bf04      	itt	eq
 8005922:	782c      	ldrbeq	r4, [r5, #0]
 8005924:	1c95      	addeq	r5, r2, #2
 8005926:	e7ce      	b.n	80058c6 <_strtol_l.constprop.0+0x3a>
 8005928:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800592c:	2f19      	cmp	r7, #25
 800592e:	d801      	bhi.n	8005934 <_strtol_l.constprop.0+0xa8>
 8005930:	3c37      	subs	r4, #55	; 0x37
 8005932:	e7e5      	b.n	8005900 <_strtol_l.constprop.0+0x74>
 8005934:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005938:	2f19      	cmp	r7, #25
 800593a:	d804      	bhi.n	8005946 <_strtol_l.constprop.0+0xba>
 800593c:	3c57      	subs	r4, #87	; 0x57
 800593e:	e7df      	b.n	8005900 <_strtol_l.constprop.0+0x74>
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	e7e8      	b.n	8005918 <_strtol_l.constprop.0+0x8c>
 8005946:	1c53      	adds	r3, r2, #1
 8005948:	d108      	bne.n	800595c <_strtol_l.constprop.0+0xd0>
 800594a:	2322      	movs	r3, #34	; 0x22
 800594c:	4660      	mov	r0, ip
 800594e:	f8ce 3000 	str.w	r3, [lr]
 8005952:	f1b8 0f00 	cmp.w	r8, #0
 8005956:	d0a6      	beq.n	80058a6 <_strtol_l.constprop.0+0x1a>
 8005958:	1e69      	subs	r1, r5, #1
 800595a:	e006      	b.n	800596a <_strtol_l.constprop.0+0xde>
 800595c:	b106      	cbz	r6, 8005960 <_strtol_l.constprop.0+0xd4>
 800595e:	4240      	negs	r0, r0
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	d09f      	beq.n	80058a6 <_strtol_l.constprop.0+0x1a>
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1f6      	bne.n	8005958 <_strtol_l.constprop.0+0xcc>
 800596a:	f8c8 1000 	str.w	r1, [r8]
 800596e:	e79a      	b.n	80058a6 <_strtol_l.constprop.0+0x1a>
 8005970:	2430      	movs	r4, #48	; 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1b5      	bne.n	80058e2 <_strtol_l.constprop.0+0x56>
 8005976:	2308      	movs	r3, #8
 8005978:	e7b3      	b.n	80058e2 <_strtol_l.constprop.0+0x56>
 800597a:	2c30      	cmp	r4, #48	; 0x30
 800597c:	d0a9      	beq.n	80058d2 <_strtol_l.constprop.0+0x46>
 800597e:	230a      	movs	r3, #10
 8005980:	e7af      	b.n	80058e2 <_strtol_l.constprop.0+0x56>
 8005982:	bf00      	nop
 8005984:	08006e31 	.word	0x08006e31

08005988 <_strtol_r>:
 8005988:	f7ff bf80 	b.w	800588c <_strtol_l.constprop.0>

0800598c <__ssputs_r>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	461f      	mov	r7, r3
 8005992:	688e      	ldr	r6, [r1, #8]
 8005994:	4682      	mov	sl, r0
 8005996:	42be      	cmp	r6, r7
 8005998:	460c      	mov	r4, r1
 800599a:	4690      	mov	r8, r2
 800599c:	680b      	ldr	r3, [r1, #0]
 800599e:	d82c      	bhi.n	80059fa <__ssputs_r+0x6e>
 80059a0:	898a      	ldrh	r2, [r1, #12]
 80059a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a6:	d026      	beq.n	80059f6 <__ssputs_r+0x6a>
 80059a8:	6965      	ldr	r5, [r4, #20]
 80059aa:	6909      	ldr	r1, [r1, #16]
 80059ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b0:	eba3 0901 	sub.w	r9, r3, r1
 80059b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b8:	1c7b      	adds	r3, r7, #1
 80059ba:	444b      	add	r3, r9
 80059bc:	106d      	asrs	r5, r5, #1
 80059be:	429d      	cmp	r5, r3
 80059c0:	bf38      	it	cc
 80059c2:	461d      	movcc	r5, r3
 80059c4:	0553      	lsls	r3, r2, #21
 80059c6:	d527      	bpl.n	8005a18 <__ssputs_r+0x8c>
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fe fc19 	bl	8004200 <_malloc_r>
 80059ce:	4606      	mov	r6, r0
 80059d0:	b360      	cbz	r0, 8005a2c <__ssputs_r+0xa0>
 80059d2:	464a      	mov	r2, r9
 80059d4:	6921      	ldr	r1, [r4, #16]
 80059d6:	f000 fa17 	bl	8005e08 <memcpy>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	6126      	str	r6, [r4, #16]
 80059e8:	444e      	add	r6, r9
 80059ea:	6026      	str	r6, [r4, #0]
 80059ec:	463e      	mov	r6, r7
 80059ee:	6165      	str	r5, [r4, #20]
 80059f0:	eba5 0509 	sub.w	r5, r5, r9
 80059f4:	60a5      	str	r5, [r4, #8]
 80059f6:	42be      	cmp	r6, r7
 80059f8:	d900      	bls.n	80059fc <__ssputs_r+0x70>
 80059fa:	463e      	mov	r6, r7
 80059fc:	4632      	mov	r2, r6
 80059fe:	4641      	mov	r1, r8
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	f000 f9c5 	bl	8005d90 <memmove>
 8005a06:	2000      	movs	r0, #0
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	1b9b      	subs	r3, r3, r6
 8005a0c:	60a3      	str	r3, [r4, #8]
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	4433      	add	r3, r6
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f000 fda6 	bl	800656a <_realloc_r>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1e0      	bne.n	80059e6 <__ssputs_r+0x5a>
 8005a24:	4650      	mov	r0, sl
 8005a26:	6921      	ldr	r1, [r4, #16]
 8005a28:	f7fe fb7a 	bl	8004120 <_free_r>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	f8ca 3000 	str.w	r3, [sl]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	e7e9      	b.n	8005a14 <__ssputs_r+0x88>

08005a40 <_svfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4698      	mov	r8, r3
 8005a46:	898b      	ldrh	r3, [r1, #12]
 8005a48:	4607      	mov	r7, r0
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	4614      	mov	r4, r2
 8005a50:	b09d      	sub	sp, #116	; 0x74
 8005a52:	d50e      	bpl.n	8005a72 <_svfiprintf_r+0x32>
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	b963      	cbnz	r3, 8005a72 <_svfiprintf_r+0x32>
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	f7fe fbd1 	bl	8004200 <_malloc_r>
 8005a5e:	6028      	str	r0, [r5, #0]
 8005a60:	6128      	str	r0, [r5, #16]
 8005a62:	b920      	cbnz	r0, 8005a6e <_svfiprintf_r+0x2e>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e0d0      	b.n	8005c10 <_svfiprintf_r+0x1d0>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7c:	2330      	movs	r3, #48	; 0x30
 8005a7e:	f04f 0901 	mov.w	r9, #1
 8005a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a86:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c28 <_svfiprintf_r+0x1e8>
 8005a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x5c>
 8005a98:	2a25      	cmp	r2, #37	; 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x50>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7a>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6f 	bl	800598c <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80a9 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a1 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ada:	931a      	str	r3, [sp, #104]	; 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	4850      	ldr	r0, [pc, #320]	; (8005c28 <_svfiprintf_r+0x1e8>)
 8005ae6:	f7fd fc9a 	bl	800341e <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xe6>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	; 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xf6>
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f04f 0c0a 	mov.w	ip, #10
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	; 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94d      	bls.n	8005bbc <_svfiprintf_r+0x17c>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x110>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x110>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	46a2      	mov	sl, r4
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0x9c>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	; 0x2e
 8005b54:	d10c      	bne.n	8005b70 <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d134      	bne.n	8005bc6 <_svfiprintf_r+0x186>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	3402      	adds	r4, #2
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	9203      	str	r2, [sp, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c2c <_svfiprintf_r+0x1ec>
 8005b74:	2203      	movs	r2, #3
 8005b76:	4650      	mov	r0, sl
 8005b78:	7821      	ldrb	r1, [r4, #0]
 8005b7a:	f7fd fc50 	bl	800341e <memchr>
 8005b7e:	b138      	cbz	r0, 8005b90 <_svfiprintf_r+0x150>
 8005b80:	2240      	movs	r2, #64	; 0x40
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	eba0 000a 	sub.w	r0, r0, sl
 8005b88:	4082      	lsls	r2, r0
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	2206      	movs	r2, #6
 8005b96:	4826      	ldr	r0, [pc, #152]	; (8005c30 <_svfiprintf_r+0x1f0>)
 8005b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9c:	f7fd fc3f 	bl	800341e <memchr>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d038      	beq.n	8005c16 <_svfiprintf_r+0x1d6>
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005ba6:	bb1b      	cbnz	r3, 8005bf0 <_svfiprintf_r+0x1b0>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3307      	adds	r3, #7
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	9303      	str	r3, [sp, #12]
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	4433      	add	r3, r6
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	e768      	b.n	8005a8e <_svfiprintf_r+0x4e>
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc4:	e7a6      	b.n	8005b14 <_svfiprintf_r+0xd4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f04f 0c0a 	mov.w	ip, #10
 8005bcc:	4619      	mov	r1, r3
 8005bce:	3401      	adds	r4, #1
 8005bd0:	9305      	str	r3, [sp, #20]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd8:	3a30      	subs	r2, #48	; 0x30
 8005bda:	2a09      	cmp	r2, #9
 8005bdc:	d903      	bls.n	8005be6 <_svfiprintf_r+0x1a6>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0c6      	beq.n	8005b70 <_svfiprintf_r+0x130>
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	e7c4      	b.n	8005b70 <_svfiprintf_r+0x130>
 8005be6:	4604      	mov	r4, r0
 8005be8:	2301      	movs	r3, #1
 8005bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bee:	e7f0      	b.n	8005bd2 <_svfiprintf_r+0x192>
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005bfa:	a904      	add	r1, sp, #16
 8005bfc:	f7fc fc9a 	bl	8002534 <_printf_float>
 8005c00:	1c42      	adds	r2, r0, #1
 8005c02:	4606      	mov	r6, r0
 8005c04:	d1d6      	bne.n	8005bb4 <_svfiprintf_r+0x174>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	065b      	lsls	r3, r3, #25
 8005c0a:	f53f af2d 	bmi.w	8005a68 <_svfiprintf_r+0x28>
 8005c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c10:	b01d      	add	sp, #116	; 0x74
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	ab03      	add	r3, sp, #12
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	f7fc ff27 	bl	8002a74 <_printf_i>
 8005c26:	e7eb      	b.n	8005c00 <_svfiprintf_r+0x1c0>
 8005c28:	08006f31 	.word	0x08006f31
 8005c2c:	08006f37 	.word	0x08006f37
 8005c30:	08006f3b 	.word	0x08006f3b
 8005c34:	08002535 	.word	0x08002535
 8005c38:	0800598d 	.word	0x0800598d

08005c3c <__sflush_r>:
 8005c3c:	898a      	ldrh	r2, [r1, #12]
 8005c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c40:	4605      	mov	r5, r0
 8005c42:	0710      	lsls	r0, r2, #28
 8005c44:	460c      	mov	r4, r1
 8005c46:	d457      	bmi.n	8005cf8 <__sflush_r+0xbc>
 8005c48:	684b      	ldr	r3, [r1, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dc04      	bgt.n	8005c58 <__sflush_r+0x1c>
 8005c4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc01      	bgt.n	8005c58 <__sflush_r+0x1c>
 8005c54:	2000      	movs	r0, #0
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	d0fa      	beq.n	8005c54 <__sflush_r+0x18>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c64:	682f      	ldr	r7, [r5, #0]
 8005c66:	6a21      	ldr	r1, [r4, #32]
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	d032      	beq.n	8005cd2 <__sflush_r+0x96>
 8005c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	075a      	lsls	r2, r3, #29
 8005c72:	d505      	bpl.n	8005c80 <__sflush_r+0x44>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	1ac0      	subs	r0, r0, r3
 8005c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c7a:	b10b      	cbz	r3, 8005c80 <__sflush_r+0x44>
 8005c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c7e:	1ac0      	subs	r0, r0, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	4602      	mov	r2, r0
 8005c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c86:	4628      	mov	r0, r5
 8005c88:	6a21      	ldr	r1, [r4, #32]
 8005c8a:	47b0      	blx	r6
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	d106      	bne.n	8005ca0 <__sflush_r+0x64>
 8005c92:	6829      	ldr	r1, [r5, #0]
 8005c94:	291d      	cmp	r1, #29
 8005c96:	d82b      	bhi.n	8005cf0 <__sflush_r+0xb4>
 8005c98:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <__sflush_r+0x100>)
 8005c9a:	410a      	asrs	r2, r1
 8005c9c:	07d6      	lsls	r6, r2, #31
 8005c9e:	d427      	bmi.n	8005cf0 <__sflush_r+0xb4>
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	6062      	str	r2, [r4, #4]
 8005ca4:	6922      	ldr	r2, [r4, #16]
 8005ca6:	04d9      	lsls	r1, r3, #19
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	d504      	bpl.n	8005cb6 <__sflush_r+0x7a>
 8005cac:	1c42      	adds	r2, r0, #1
 8005cae:	d101      	bne.n	8005cb4 <__sflush_r+0x78>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b903      	cbnz	r3, 8005cb6 <__sflush_r+0x7a>
 8005cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8005cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb8:	602f      	str	r7, [r5, #0]
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	d0ca      	beq.n	8005c54 <__sflush_r+0x18>
 8005cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d002      	beq.n	8005ccc <__sflush_r+0x90>
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f7fe fa2a 	bl	8004120 <_free_r>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd0:	e7c1      	b.n	8005c56 <__sflush_r+0x1a>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b0      	blx	r6
 8005cd8:	1c41      	adds	r1, r0, #1
 8005cda:	d1c8      	bne.n	8005c6e <__sflush_r+0x32>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c5      	beq.n	8005c6e <__sflush_r+0x32>
 8005ce2:	2b1d      	cmp	r3, #29
 8005ce4:	d001      	beq.n	8005cea <__sflush_r+0xae>
 8005ce6:	2b16      	cmp	r3, #22
 8005ce8:	d101      	bne.n	8005cee <__sflush_r+0xb2>
 8005cea:	602f      	str	r7, [r5, #0]
 8005cec:	e7b2      	b.n	8005c54 <__sflush_r+0x18>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	e7ae      	b.n	8005c56 <__sflush_r+0x1a>
 8005cf8:	690f      	ldr	r7, [r1, #16]
 8005cfa:	2f00      	cmp	r7, #0
 8005cfc:	d0aa      	beq.n	8005c54 <__sflush_r+0x18>
 8005cfe:	0793      	lsls	r3, r2, #30
 8005d00:	bf18      	it	ne
 8005d02:	2300      	movne	r3, #0
 8005d04:	680e      	ldr	r6, [r1, #0]
 8005d06:	bf08      	it	eq
 8005d08:	694b      	ldreq	r3, [r1, #20]
 8005d0a:	1bf6      	subs	r6, r6, r7
 8005d0c:	600f      	str	r7, [r1, #0]
 8005d0e:	608b      	str	r3, [r1, #8]
 8005d10:	2e00      	cmp	r6, #0
 8005d12:	dd9f      	ble.n	8005c54 <__sflush_r+0x18>
 8005d14:	4633      	mov	r3, r6
 8005d16:	463a      	mov	r2, r7
 8005d18:	4628      	mov	r0, r5
 8005d1a:	6a21      	ldr	r1, [r4, #32]
 8005d1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d20:	47e0      	blx	ip
 8005d22:	2800      	cmp	r0, #0
 8005d24:	dc06      	bgt.n	8005d34 <__sflush_r+0xf8>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	e790      	b.n	8005c56 <__sflush_r+0x1a>
 8005d34:	4407      	add	r7, r0
 8005d36:	1a36      	subs	r6, r6, r0
 8005d38:	e7ea      	b.n	8005d10 <__sflush_r+0xd4>
 8005d3a:	bf00      	nop
 8005d3c:	dfbffffe 	.word	0xdfbffffe

08005d40 <_fflush_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b913      	cbnz	r3, 8005d50 <_fflush_r+0x10>
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	b118      	cbz	r0, 8005d5a <_fflush_r+0x1a>
 8005d52:	6a03      	ldr	r3, [r0, #32]
 8005d54:	b90b      	cbnz	r3, 8005d5a <_fflush_r+0x1a>
 8005d56:	f7fd fa49 	bl	80031ec <__sinit>
 8005d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f3      	beq.n	8005d4a <_fflush_r+0xa>
 8005d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d64:	07d0      	lsls	r0, r2, #31
 8005d66:	d404      	bmi.n	8005d72 <_fflush_r+0x32>
 8005d68:	0599      	lsls	r1, r3, #22
 8005d6a:	d402      	bmi.n	8005d72 <_fflush_r+0x32>
 8005d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6e:	f7fd fb54 	bl	800341a <__retarget_lock_acquire_recursive>
 8005d72:	4628      	mov	r0, r5
 8005d74:	4621      	mov	r1, r4
 8005d76:	f7ff ff61 	bl	8005c3c <__sflush_r>
 8005d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	07da      	lsls	r2, r3, #31
 8005d80:	d4e4      	bmi.n	8005d4c <_fflush_r+0xc>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	059b      	lsls	r3, r3, #22
 8005d86:	d4e1      	bmi.n	8005d4c <_fflush_r+0xc>
 8005d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8a:	f7fd fb47 	bl	800341c <__retarget_lock_release_recursive>
 8005d8e:	e7dd      	b.n	8005d4c <_fflush_r+0xc>

08005d90 <memmove>:
 8005d90:	4288      	cmp	r0, r1
 8005d92:	b510      	push	{r4, lr}
 8005d94:	eb01 0402 	add.w	r4, r1, r2
 8005d98:	d902      	bls.n	8005da0 <memmove+0x10>
 8005d9a:	4284      	cmp	r4, r0
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	d807      	bhi.n	8005db0 <memmove+0x20>
 8005da0:	1e43      	subs	r3, r0, #1
 8005da2:	42a1      	cmp	r1, r4
 8005da4:	d008      	beq.n	8005db8 <memmove+0x28>
 8005da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dae:	e7f8      	b.n	8005da2 <memmove+0x12>
 8005db0:	4601      	mov	r1, r0
 8005db2:	4402      	add	r2, r0
 8005db4:	428a      	cmp	r2, r1
 8005db6:	d100      	bne.n	8005dba <memmove+0x2a>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dc2:	e7f7      	b.n	8005db4 <memmove+0x24>

08005dc4 <strncmp>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	b16a      	cbz	r2, 8005de4 <strncmp+0x20>
 8005dc8:	3901      	subs	r1, #1
 8005dca:	1884      	adds	r4, r0, r2
 8005dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <strncmp+0x1c>
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d001      	beq.n	8005de0 <strncmp+0x1c>
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d1f5      	bne.n	8005dcc <strncmp+0x8>
 8005de0:	1ad0      	subs	r0, r2, r3
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	4610      	mov	r0, r2
 8005de6:	e7fc      	b.n	8005de2 <strncmp+0x1e>

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	2300      	movs	r3, #0
 8005dec:	4d05      	ldr	r5, [pc, #20]	; (8005e04 <_sbrk_r+0x1c>)
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fb fd2a 	bl	800184c <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20000418 	.word	0x20000418

08005e08 <memcpy>:
 8005e08:	440a      	add	r2, r1
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e10:	d100      	bne.n	8005e14 <memcpy+0xc>
 8005e12:	4770      	bx	lr
 8005e14:	b510      	push	{r4, lr}
 8005e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e20:	d1f9      	bne.n	8005e16 <memcpy+0xe>
 8005e22:	bd10      	pop	{r4, pc}

08005e24 <nan>:
 8005e24:	2000      	movs	r0, #0
 8005e26:	4901      	ldr	r1, [pc, #4]	; (8005e2c <nan+0x8>)
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	7ff80000 	.word	0x7ff80000

08005e30 <__assert_func>:
 8005e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e32:	4614      	mov	r4, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <__assert_func+0x2c>)
 8005e38:	4605      	mov	r5, r0
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68d8      	ldr	r0, [r3, #12]
 8005e3e:	b14c      	cbz	r4, 8005e54 <__assert_func+0x24>
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <__assert_func+0x30>)
 8005e42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e46:	9100      	str	r1, [sp, #0]
 8005e48:	462b      	mov	r3, r5
 8005e4a:	4906      	ldr	r1, [pc, #24]	; (8005e64 <__assert_func+0x34>)
 8005e4c:	f000 fbca 	bl	80065e4 <fiprintf>
 8005e50:	f000 fbda 	bl	8006608 <abort>
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <__assert_func+0x38>)
 8005e56:	461c      	mov	r4, r3
 8005e58:	e7f3      	b.n	8005e42 <__assert_func+0x12>
 8005e5a:	bf00      	nop
 8005e5c:	20000064 	.word	0x20000064
 8005e60:	08006f48 	.word	0x08006f48
 8005e64:	08006f55 	.word	0x08006f55
 8005e68:	08006f83 	.word	0x08006f83

08005e6c <_calloc_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	fba1 5402 	umull	r5, r4, r1, r2
 8005e72:	b934      	cbnz	r4, 8005e82 <_calloc_r+0x16>
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7fe f9c3 	bl	8004200 <_malloc_r>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	b928      	cbnz	r0, 8005e8a <_calloc_r+0x1e>
 8005e7e:	4630      	mov	r0, r6
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
 8005e82:	220c      	movs	r2, #12
 8005e84:	2600      	movs	r6, #0
 8005e86:	6002      	str	r2, [r0, #0]
 8005e88:	e7f9      	b.n	8005e7e <_calloc_r+0x12>
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	f7fd fa46 	bl	800331e <memset>
 8005e92:	e7f4      	b.n	8005e7e <_calloc_r+0x12>

08005e94 <rshift>:
 8005e94:	6903      	ldr	r3, [r0, #16]
 8005e96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e9e:	f100 0414 	add.w	r4, r0, #20
 8005ea2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005ea6:	dd46      	ble.n	8005f36 <rshift+0xa2>
 8005ea8:	f011 011f 	ands.w	r1, r1, #31
 8005eac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005eb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005eb4:	d10c      	bne.n	8005ed0 <rshift+0x3c>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f100 0710 	add.w	r7, r0, #16
 8005ebc:	42b1      	cmp	r1, r6
 8005ebe:	d335      	bcc.n	8005f2c <rshift+0x98>
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	1eea      	subs	r2, r5, #3
 8005ec6:	4296      	cmp	r6, r2
 8005ec8:	bf38      	it	cc
 8005eca:	2300      	movcc	r3, #0
 8005ecc:	4423      	add	r3, r4
 8005ece:	e015      	b.n	8005efc <rshift+0x68>
 8005ed0:	46a1      	mov	r9, r4
 8005ed2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005ed6:	f1c1 0820 	rsb	r8, r1, #32
 8005eda:	40cf      	lsrs	r7, r1
 8005edc:	f105 0e04 	add.w	lr, r5, #4
 8005ee0:	4576      	cmp	r6, lr
 8005ee2:	46f4      	mov	ip, lr
 8005ee4:	d816      	bhi.n	8005f14 <rshift+0x80>
 8005ee6:	1a9a      	subs	r2, r3, r2
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	3a04      	subs	r2, #4
 8005eec:	3501      	adds	r5, #1
 8005eee:	42ae      	cmp	r6, r5
 8005ef0:	bf38      	it	cc
 8005ef2:	2200      	movcc	r2, #0
 8005ef4:	18a3      	adds	r3, r4, r2
 8005ef6:	50a7      	str	r7, [r4, r2]
 8005ef8:	b107      	cbz	r7, 8005efc <rshift+0x68>
 8005efa:	3304      	adds	r3, #4
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	eba3 0204 	sub.w	r2, r3, r4
 8005f02:	bf08      	it	eq
 8005f04:	2300      	moveq	r3, #0
 8005f06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005f0a:	6102      	str	r2, [r0, #16]
 8005f0c:	bf08      	it	eq
 8005f0e:	6143      	streq	r3, [r0, #20]
 8005f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f14:	f8dc c000 	ldr.w	ip, [ip]
 8005f18:	fa0c fc08 	lsl.w	ip, ip, r8
 8005f1c:	ea4c 0707 	orr.w	r7, ip, r7
 8005f20:	f849 7b04 	str.w	r7, [r9], #4
 8005f24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f28:	40cf      	lsrs	r7, r1
 8005f2a:	e7d9      	b.n	8005ee0 <rshift+0x4c>
 8005f2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005f30:	f847 cf04 	str.w	ip, [r7, #4]!
 8005f34:	e7c2      	b.n	8005ebc <rshift+0x28>
 8005f36:	4623      	mov	r3, r4
 8005f38:	e7e0      	b.n	8005efc <rshift+0x68>

08005f3a <__hexdig_fun>:
 8005f3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d802      	bhi.n	8005f48 <__hexdig_fun+0xe>
 8005f42:	3820      	subs	r0, #32
 8005f44:	b2c0      	uxtb	r0, r0
 8005f46:	4770      	bx	lr
 8005f48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d801      	bhi.n	8005f54 <__hexdig_fun+0x1a>
 8005f50:	3847      	subs	r0, #71	; 0x47
 8005f52:	e7f7      	b.n	8005f44 <__hexdig_fun+0xa>
 8005f54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d801      	bhi.n	8005f60 <__hexdig_fun+0x26>
 8005f5c:	3827      	subs	r0, #39	; 0x27
 8005f5e:	e7f1      	b.n	8005f44 <__hexdig_fun+0xa>
 8005f60:	2000      	movs	r0, #0
 8005f62:	4770      	bx	lr

08005f64 <__gethex>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4681      	mov	r9, r0
 8005f6a:	468a      	mov	sl, r1
 8005f6c:	4617      	mov	r7, r2
 8005f6e:	680a      	ldr	r2, [r1, #0]
 8005f70:	b085      	sub	sp, #20
 8005f72:	f102 0b02 	add.w	fp, r2, #2
 8005f76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f7e:	9302      	str	r3, [sp, #8]
 8005f80:	32fe      	adds	r2, #254	; 0xfe
 8005f82:	eb02 030b 	add.w	r3, r2, fp
 8005f86:	46d8      	mov	r8, fp
 8005f88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	2830      	cmp	r0, #48	; 0x30
 8005f90:	d0f7      	beq.n	8005f82 <__gethex+0x1e>
 8005f92:	f7ff ffd2 	bl	8005f3a <__hexdig_fun>
 8005f96:	4604      	mov	r4, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d138      	bne.n	800600e <__gethex+0xaa>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	49a7      	ldr	r1, [pc, #668]	; (8006240 <__gethex+0x2dc>)
 8005fa2:	f7ff ff0f 	bl	8005dc4 <strncmp>
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d169      	bne.n	8006080 <__gethex+0x11c>
 8005fac:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005fb0:	465d      	mov	r5, fp
 8005fb2:	f7ff ffc2 	bl	8005f3a <__hexdig_fun>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d064      	beq.n	8006084 <__gethex+0x120>
 8005fba:	465a      	mov	r2, fp
 8005fbc:	7810      	ldrb	r0, [r2, #0]
 8005fbe:	4690      	mov	r8, r2
 8005fc0:	2830      	cmp	r0, #48	; 0x30
 8005fc2:	f102 0201 	add.w	r2, r2, #1
 8005fc6:	d0f9      	beq.n	8005fbc <__gethex+0x58>
 8005fc8:	f7ff ffb7 	bl	8005f3a <__hexdig_fun>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	fab0 f480 	clz	r4, r0
 8005fd2:	465e      	mov	r6, fp
 8005fd4:	0964      	lsrs	r4, r4, #5
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	4642      	mov	r2, r8
 8005fda:	4615      	mov	r5, r2
 8005fdc:	7828      	ldrb	r0, [r5, #0]
 8005fde:	3201      	adds	r2, #1
 8005fe0:	f7ff ffab 	bl	8005f3a <__hexdig_fun>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d1f8      	bne.n	8005fda <__gethex+0x76>
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4628      	mov	r0, r5
 8005fec:	4994      	ldr	r1, [pc, #592]	; (8006240 <__gethex+0x2dc>)
 8005fee:	f7ff fee9 	bl	8005dc4 <strncmp>
 8005ff2:	b978      	cbnz	r0, 8006014 <__gethex+0xb0>
 8005ff4:	b946      	cbnz	r6, 8006008 <__gethex+0xa4>
 8005ff6:	1c6e      	adds	r6, r5, #1
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4615      	mov	r5, r2
 8005ffc:	7828      	ldrb	r0, [r5, #0]
 8005ffe:	3201      	adds	r2, #1
 8006000:	f7ff ff9b 	bl	8005f3a <__hexdig_fun>
 8006004:	2800      	cmp	r0, #0
 8006006:	d1f8      	bne.n	8005ffa <__gethex+0x96>
 8006008:	1b73      	subs	r3, r6, r5
 800600a:	009e      	lsls	r6, r3, #2
 800600c:	e004      	b.n	8006018 <__gethex+0xb4>
 800600e:	2400      	movs	r4, #0
 8006010:	4626      	mov	r6, r4
 8006012:	e7e1      	b.n	8005fd8 <__gethex+0x74>
 8006014:	2e00      	cmp	r6, #0
 8006016:	d1f7      	bne.n	8006008 <__gethex+0xa4>
 8006018:	782b      	ldrb	r3, [r5, #0]
 800601a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800601e:	2b50      	cmp	r3, #80	; 0x50
 8006020:	d13d      	bne.n	800609e <__gethex+0x13a>
 8006022:	786b      	ldrb	r3, [r5, #1]
 8006024:	2b2b      	cmp	r3, #43	; 0x2b
 8006026:	d02f      	beq.n	8006088 <__gethex+0x124>
 8006028:	2b2d      	cmp	r3, #45	; 0x2d
 800602a:	d031      	beq.n	8006090 <__gethex+0x12c>
 800602c:	f04f 0b00 	mov.w	fp, #0
 8006030:	1c69      	adds	r1, r5, #1
 8006032:	7808      	ldrb	r0, [r1, #0]
 8006034:	f7ff ff81 	bl	8005f3a <__hexdig_fun>
 8006038:	1e42      	subs	r2, r0, #1
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	2a18      	cmp	r2, #24
 800603e:	d82e      	bhi.n	800609e <__gethex+0x13a>
 8006040:	f1a0 0210 	sub.w	r2, r0, #16
 8006044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006048:	f7ff ff77 	bl	8005f3a <__hexdig_fun>
 800604c:	f100 3cff 	add.w	ip, r0, #4294967295
 8006050:	fa5f fc8c 	uxtb.w	ip, ip
 8006054:	f1bc 0f18 	cmp.w	ip, #24
 8006058:	d91d      	bls.n	8006096 <__gethex+0x132>
 800605a:	f1bb 0f00 	cmp.w	fp, #0
 800605e:	d000      	beq.n	8006062 <__gethex+0xfe>
 8006060:	4252      	negs	r2, r2
 8006062:	4416      	add	r6, r2
 8006064:	f8ca 1000 	str.w	r1, [sl]
 8006068:	b1dc      	cbz	r4, 80060a2 <__gethex+0x13e>
 800606a:	9b01      	ldr	r3, [sp, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf14      	ite	ne
 8006070:	f04f 0800 	movne.w	r8, #0
 8006074:	f04f 0806 	moveq.w	r8, #6
 8006078:	4640      	mov	r0, r8
 800607a:	b005      	add	sp, #20
 800607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006080:	4645      	mov	r5, r8
 8006082:	4626      	mov	r6, r4
 8006084:	2401      	movs	r4, #1
 8006086:	e7c7      	b.n	8006018 <__gethex+0xb4>
 8006088:	f04f 0b00 	mov.w	fp, #0
 800608c:	1ca9      	adds	r1, r5, #2
 800608e:	e7d0      	b.n	8006032 <__gethex+0xce>
 8006090:	f04f 0b01 	mov.w	fp, #1
 8006094:	e7fa      	b.n	800608c <__gethex+0x128>
 8006096:	230a      	movs	r3, #10
 8006098:	fb03 0002 	mla	r0, r3, r2, r0
 800609c:	e7d0      	b.n	8006040 <__gethex+0xdc>
 800609e:	4629      	mov	r1, r5
 80060a0:	e7e0      	b.n	8006064 <__gethex+0x100>
 80060a2:	4621      	mov	r1, r4
 80060a4:	eba5 0308 	sub.w	r3, r5, r8
 80060a8:	3b01      	subs	r3, #1
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	dc0a      	bgt.n	80060c4 <__gethex+0x160>
 80060ae:	4648      	mov	r0, r9
 80060b0:	f7fe f932 	bl	8004318 <_Balloc>
 80060b4:	4604      	mov	r4, r0
 80060b6:	b940      	cbnz	r0, 80060ca <__gethex+0x166>
 80060b8:	4602      	mov	r2, r0
 80060ba:	21e4      	movs	r1, #228	; 0xe4
 80060bc:	4b61      	ldr	r3, [pc, #388]	; (8006244 <__gethex+0x2e0>)
 80060be:	4862      	ldr	r0, [pc, #392]	; (8006248 <__gethex+0x2e4>)
 80060c0:	f7ff feb6 	bl	8005e30 <__assert_func>
 80060c4:	3101      	adds	r1, #1
 80060c6:	105b      	asrs	r3, r3, #1
 80060c8:	e7ef      	b.n	80060aa <__gethex+0x146>
 80060ca:	2300      	movs	r3, #0
 80060cc:	469b      	mov	fp, r3
 80060ce:	f100 0a14 	add.w	sl, r0, #20
 80060d2:	f8cd a004 	str.w	sl, [sp, #4]
 80060d6:	45a8      	cmp	r8, r5
 80060d8:	d344      	bcc.n	8006164 <__gethex+0x200>
 80060da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80060de:	4658      	mov	r0, fp
 80060e0:	f848 bb04 	str.w	fp, [r8], #4
 80060e4:	eba8 080a 	sub.w	r8, r8, sl
 80060e8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80060ec:	6122      	str	r2, [r4, #16]
 80060ee:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80060f2:	f7fe fa03 	bl	80044fc <__hi0bits>
 80060f6:	683d      	ldr	r5, [r7, #0]
 80060f8:	eba8 0800 	sub.w	r8, r8, r0
 80060fc:	45a8      	cmp	r8, r5
 80060fe:	dd59      	ble.n	80061b4 <__gethex+0x250>
 8006100:	eba8 0805 	sub.w	r8, r8, r5
 8006104:	4641      	mov	r1, r8
 8006106:	4620      	mov	r0, r4
 8006108:	f7fe fd81 	bl	8004c0e <__any_on>
 800610c:	4683      	mov	fp, r0
 800610e:	b1b8      	cbz	r0, 8006140 <__gethex+0x1dc>
 8006110:	f04f 0b01 	mov.w	fp, #1
 8006114:	f108 33ff 	add.w	r3, r8, #4294967295
 8006118:	1159      	asrs	r1, r3, #5
 800611a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800611e:	f003 021f 	and.w	r2, r3, #31
 8006122:	fa0b f202 	lsl.w	r2, fp, r2
 8006126:	420a      	tst	r2, r1
 8006128:	d00a      	beq.n	8006140 <__gethex+0x1dc>
 800612a:	455b      	cmp	r3, fp
 800612c:	dd06      	ble.n	800613c <__gethex+0x1d8>
 800612e:	4620      	mov	r0, r4
 8006130:	f1a8 0102 	sub.w	r1, r8, #2
 8006134:	f7fe fd6b 	bl	8004c0e <__any_on>
 8006138:	2800      	cmp	r0, #0
 800613a:	d138      	bne.n	80061ae <__gethex+0x24a>
 800613c:	f04f 0b02 	mov.w	fp, #2
 8006140:	4641      	mov	r1, r8
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff fea6 	bl	8005e94 <rshift>
 8006148:	4446      	add	r6, r8
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	42b3      	cmp	r3, r6
 800614e:	da41      	bge.n	80061d4 <__gethex+0x270>
 8006150:	4621      	mov	r1, r4
 8006152:	4648      	mov	r0, r9
 8006154:	f7fe f920 	bl	8004398 <_Bfree>
 8006158:	2300      	movs	r3, #0
 800615a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800615c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e789      	b.n	8006078 <__gethex+0x114>
 8006164:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006168:	2a2e      	cmp	r2, #46	; 0x2e
 800616a:	d014      	beq.n	8006196 <__gethex+0x232>
 800616c:	2b20      	cmp	r3, #32
 800616e:	d106      	bne.n	800617e <__gethex+0x21a>
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	f843 bb04 	str.w	fp, [r3], #4
 8006176:	f04f 0b00 	mov.w	fp, #0
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	465b      	mov	r3, fp
 800617e:	7828      	ldrb	r0, [r5, #0]
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	f7ff feda 	bl	8005f3a <__hexdig_fun>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	f000 000f 	and.w	r0, r0, #15
 800618c:	4098      	lsls	r0, r3
 800618e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006192:	3304      	adds	r3, #4
 8006194:	e79f      	b.n	80060d6 <__gethex+0x172>
 8006196:	45a8      	cmp	r8, r5
 8006198:	d8e8      	bhi.n	800616c <__gethex+0x208>
 800619a:	2201      	movs	r2, #1
 800619c:	4628      	mov	r0, r5
 800619e:	4928      	ldr	r1, [pc, #160]	; (8006240 <__gethex+0x2dc>)
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	f7ff fe0f 	bl	8005dc4 <strncmp>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d1df      	bne.n	800616c <__gethex+0x208>
 80061ac:	e793      	b.n	80060d6 <__gethex+0x172>
 80061ae:	f04f 0b03 	mov.w	fp, #3
 80061b2:	e7c5      	b.n	8006140 <__gethex+0x1dc>
 80061b4:	da0b      	bge.n	80061ce <__gethex+0x26a>
 80061b6:	eba5 0808 	sub.w	r8, r5, r8
 80061ba:	4621      	mov	r1, r4
 80061bc:	4642      	mov	r2, r8
 80061be:	4648      	mov	r0, r9
 80061c0:	f7fe fb02 	bl	80047c8 <__lshift>
 80061c4:	4604      	mov	r4, r0
 80061c6:	eba6 0608 	sub.w	r6, r6, r8
 80061ca:	f100 0a14 	add.w	sl, r0, #20
 80061ce:	f04f 0b00 	mov.w	fp, #0
 80061d2:	e7ba      	b.n	800614a <__gethex+0x1e6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	42b3      	cmp	r3, r6
 80061d8:	dd74      	ble.n	80062c4 <__gethex+0x360>
 80061da:	1b9e      	subs	r6, r3, r6
 80061dc:	42b5      	cmp	r5, r6
 80061de:	dc35      	bgt.n	800624c <__gethex+0x2e8>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d023      	beq.n	800622e <__gethex+0x2ca>
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d025      	beq.n	8006236 <__gethex+0x2d2>
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d115      	bne.n	800621a <__gethex+0x2b6>
 80061ee:	42b5      	cmp	r5, r6
 80061f0:	d113      	bne.n	800621a <__gethex+0x2b6>
 80061f2:	2d01      	cmp	r5, #1
 80061f4:	d10b      	bne.n	800620e <__gethex+0x2aa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	9a02      	ldr	r2, [sp, #8]
 80061fa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	2301      	movs	r3, #1
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	f8ca 3000 	str.w	r3, [sl]
 8006208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620a:	601c      	str	r4, [r3, #0]
 800620c:	e734      	b.n	8006078 <__gethex+0x114>
 800620e:	4620      	mov	r0, r4
 8006210:	1e69      	subs	r1, r5, #1
 8006212:	f7fe fcfc 	bl	8004c0e <__any_on>
 8006216:	2800      	cmp	r0, #0
 8006218:	d1ed      	bne.n	80061f6 <__gethex+0x292>
 800621a:	4621      	mov	r1, r4
 800621c:	4648      	mov	r0, r9
 800621e:	f7fe f8bb 	bl	8004398 <_Bfree>
 8006222:	2300      	movs	r3, #0
 8006224:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006226:	f04f 0850 	mov.w	r8, #80	; 0x50
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	e724      	b.n	8006078 <__gethex+0x114>
 800622e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f2      	bne.n	800621a <__gethex+0x2b6>
 8006234:	e7df      	b.n	80061f6 <__gethex+0x292>
 8006236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1dc      	bne.n	80061f6 <__gethex+0x292>
 800623c:	e7ed      	b.n	800621a <__gethex+0x2b6>
 800623e:	bf00      	nop
 8006240:	08006ddc 	.word	0x08006ddc
 8006244:	08006c70 	.word	0x08006c70
 8006248:	08006f84 	.word	0x08006f84
 800624c:	f106 38ff 	add.w	r8, r6, #4294967295
 8006250:	f1bb 0f00 	cmp.w	fp, #0
 8006254:	d133      	bne.n	80062be <__gethex+0x35a>
 8006256:	f1b8 0f00 	cmp.w	r8, #0
 800625a:	d004      	beq.n	8006266 <__gethex+0x302>
 800625c:	4641      	mov	r1, r8
 800625e:	4620      	mov	r0, r4
 8006260:	f7fe fcd5 	bl	8004c0e <__any_on>
 8006264:	4683      	mov	fp, r0
 8006266:	2301      	movs	r3, #1
 8006268:	ea4f 1268 	mov.w	r2, r8, asr #5
 800626c:	f008 081f 	and.w	r8, r8, #31
 8006270:	fa03 f308 	lsl.w	r3, r3, r8
 8006274:	f04f 0802 	mov.w	r8, #2
 8006278:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800627c:	4631      	mov	r1, r6
 800627e:	4213      	tst	r3, r2
 8006280:	4620      	mov	r0, r4
 8006282:	bf18      	it	ne
 8006284:	f04b 0b02 	orrne.w	fp, fp, #2
 8006288:	1bad      	subs	r5, r5, r6
 800628a:	f7ff fe03 	bl	8005e94 <rshift>
 800628e:	687e      	ldr	r6, [r7, #4]
 8006290:	f1bb 0f00 	cmp.w	fp, #0
 8006294:	d04a      	beq.n	800632c <__gethex+0x3c8>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d016      	beq.n	80062ca <__gethex+0x366>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d018      	beq.n	80062d2 <__gethex+0x36e>
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d109      	bne.n	80062b8 <__gethex+0x354>
 80062a4:	f01b 0f02 	tst.w	fp, #2
 80062a8:	d006      	beq.n	80062b8 <__gethex+0x354>
 80062aa:	f8da 3000 	ldr.w	r3, [sl]
 80062ae:	ea4b 0b03 	orr.w	fp, fp, r3
 80062b2:	f01b 0f01 	tst.w	fp, #1
 80062b6:	d10f      	bne.n	80062d8 <__gethex+0x374>
 80062b8:	f048 0810 	orr.w	r8, r8, #16
 80062bc:	e036      	b.n	800632c <__gethex+0x3c8>
 80062be:	f04f 0b01 	mov.w	fp, #1
 80062c2:	e7d0      	b.n	8006266 <__gethex+0x302>
 80062c4:	f04f 0801 	mov.w	r8, #1
 80062c8:	e7e2      	b.n	8006290 <__gethex+0x32c>
 80062ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062cc:	f1c3 0301 	rsb	r3, r3, #1
 80062d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ef      	beq.n	80062b8 <__gethex+0x354>
 80062d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062dc:	f104 0214 	add.w	r2, r4, #20
 80062e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80062ec:	4694      	mov	ip, r2
 80062ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80062f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80062f6:	d01e      	beq.n	8006336 <__gethex+0x3d2>
 80062f8:	3101      	adds	r1, #1
 80062fa:	f8cc 1000 	str.w	r1, [ip]
 80062fe:	f1b8 0f02 	cmp.w	r8, #2
 8006302:	f104 0214 	add.w	r2, r4, #20
 8006306:	d13d      	bne.n	8006384 <__gethex+0x420>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	42ab      	cmp	r3, r5
 800630e:	d10b      	bne.n	8006328 <__gethex+0x3c4>
 8006310:	2301      	movs	r3, #1
 8006312:	1169      	asrs	r1, r5, #5
 8006314:	f005 051f 	and.w	r5, r5, #31
 8006318:	fa03 f505 	lsl.w	r5, r3, r5
 800631c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006320:	421d      	tst	r5, r3
 8006322:	bf18      	it	ne
 8006324:	f04f 0801 	movne.w	r8, #1
 8006328:	f048 0820 	orr.w	r8, r8, #32
 800632c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800632e:	601c      	str	r4, [r3, #0]
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	601e      	str	r6, [r3, #0]
 8006334:	e6a0      	b.n	8006078 <__gethex+0x114>
 8006336:	4290      	cmp	r0, r2
 8006338:	f842 3c04 	str.w	r3, [r2, #-4]
 800633c:	d8d6      	bhi.n	80062ec <__gethex+0x388>
 800633e:	68a2      	ldr	r2, [r4, #8]
 8006340:	4593      	cmp	fp, r2
 8006342:	db17      	blt.n	8006374 <__gethex+0x410>
 8006344:	6861      	ldr	r1, [r4, #4]
 8006346:	4648      	mov	r0, r9
 8006348:	3101      	adds	r1, #1
 800634a:	f7fd ffe5 	bl	8004318 <_Balloc>
 800634e:	4682      	mov	sl, r0
 8006350:	b918      	cbnz	r0, 800635a <__gethex+0x3f6>
 8006352:	4602      	mov	r2, r0
 8006354:	2184      	movs	r1, #132	; 0x84
 8006356:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <__gethex+0x45c>)
 8006358:	e6b1      	b.n	80060be <__gethex+0x15a>
 800635a:	6922      	ldr	r2, [r4, #16]
 800635c:	f104 010c 	add.w	r1, r4, #12
 8006360:	3202      	adds	r2, #2
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	300c      	adds	r0, #12
 8006366:	f7ff fd4f 	bl	8005e08 <memcpy>
 800636a:	4621      	mov	r1, r4
 800636c:	4648      	mov	r0, r9
 800636e:	f7fe f813 	bl	8004398 <_Bfree>
 8006372:	4654      	mov	r4, sl
 8006374:	6922      	ldr	r2, [r4, #16]
 8006376:	1c51      	adds	r1, r2, #1
 8006378:	6121      	str	r1, [r4, #16]
 800637a:	2101      	movs	r1, #1
 800637c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006380:	6151      	str	r1, [r2, #20]
 8006382:	e7bc      	b.n	80062fe <__gethex+0x39a>
 8006384:	6921      	ldr	r1, [r4, #16]
 8006386:	4559      	cmp	r1, fp
 8006388:	dd0b      	ble.n	80063a2 <__gethex+0x43e>
 800638a:	2101      	movs	r1, #1
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fd81 	bl	8005e94 <rshift>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	3601      	adds	r6, #1
 8006396:	42b3      	cmp	r3, r6
 8006398:	f6ff aeda 	blt.w	8006150 <__gethex+0x1ec>
 800639c:	f04f 0801 	mov.w	r8, #1
 80063a0:	e7c2      	b.n	8006328 <__gethex+0x3c4>
 80063a2:	f015 051f 	ands.w	r5, r5, #31
 80063a6:	d0f9      	beq.n	800639c <__gethex+0x438>
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	f1c5 0520 	rsb	r5, r5, #32
 80063ae:	441a      	add	r2, r3
 80063b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80063b4:	f7fe f8a2 	bl	80044fc <__hi0bits>
 80063b8:	42a8      	cmp	r0, r5
 80063ba:	dbe6      	blt.n	800638a <__gethex+0x426>
 80063bc:	e7ee      	b.n	800639c <__gethex+0x438>
 80063be:	bf00      	nop
 80063c0:	08006c70 	.word	0x08006c70

080063c4 <L_shift>:
 80063c4:	f1c2 0208 	rsb	r2, r2, #8
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	b570      	push	{r4, r5, r6, lr}
 80063cc:	f1c2 0620 	rsb	r6, r2, #32
 80063d0:	6843      	ldr	r3, [r0, #4]
 80063d2:	6804      	ldr	r4, [r0, #0]
 80063d4:	fa03 f506 	lsl.w	r5, r3, r6
 80063d8:	432c      	orrs	r4, r5
 80063da:	40d3      	lsrs	r3, r2
 80063dc:	6004      	str	r4, [r0, #0]
 80063de:	f840 3f04 	str.w	r3, [r0, #4]!
 80063e2:	4288      	cmp	r0, r1
 80063e4:	d3f4      	bcc.n	80063d0 <L_shift+0xc>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}

080063e8 <__match>:
 80063e8:	b530      	push	{r4, r5, lr}
 80063ea:	6803      	ldr	r3, [r0, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f2:	b914      	cbnz	r4, 80063fa <__match+0x12>
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	2001      	movs	r0, #1
 80063f8:	bd30      	pop	{r4, r5, pc}
 80063fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006402:	2d19      	cmp	r5, #25
 8006404:	bf98      	it	ls
 8006406:	3220      	addls	r2, #32
 8006408:	42a2      	cmp	r2, r4
 800640a:	d0f0      	beq.n	80063ee <__match+0x6>
 800640c:	2000      	movs	r0, #0
 800640e:	e7f3      	b.n	80063f8 <__match+0x10>

08006410 <__hexnan>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	2500      	movs	r5, #0
 8006416:	680b      	ldr	r3, [r1, #0]
 8006418:	4682      	mov	sl, r0
 800641a:	115e      	asrs	r6, r3, #5
 800641c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006420:	f013 031f 	ands.w	r3, r3, #31
 8006424:	bf18      	it	ne
 8006426:	3604      	addne	r6, #4
 8006428:	1f37      	subs	r7, r6, #4
 800642a:	4690      	mov	r8, r2
 800642c:	46b9      	mov	r9, r7
 800642e:	463c      	mov	r4, r7
 8006430:	46ab      	mov	fp, r5
 8006432:	b087      	sub	sp, #28
 8006434:	6801      	ldr	r1, [r0, #0]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	f846 5c04 	str.w	r5, [r6, #-4]
 800643c:	9502      	str	r5, [sp, #8]
 800643e:	784a      	ldrb	r2, [r1, #1]
 8006440:	1c4b      	adds	r3, r1, #1
 8006442:	9303      	str	r3, [sp, #12]
 8006444:	b342      	cbz	r2, 8006498 <__hexnan+0x88>
 8006446:	4610      	mov	r0, r2
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	9204      	str	r2, [sp, #16]
 800644c:	f7ff fd75 	bl	8005f3a <__hexdig_fun>
 8006450:	2800      	cmp	r0, #0
 8006452:	d14f      	bne.n	80064f4 <__hexnan+0xe4>
 8006454:	9a04      	ldr	r2, [sp, #16]
 8006456:	9905      	ldr	r1, [sp, #20]
 8006458:	2a20      	cmp	r2, #32
 800645a:	d818      	bhi.n	800648e <__hexnan+0x7e>
 800645c:	9b02      	ldr	r3, [sp, #8]
 800645e:	459b      	cmp	fp, r3
 8006460:	dd13      	ble.n	800648a <__hexnan+0x7a>
 8006462:	454c      	cmp	r4, r9
 8006464:	d206      	bcs.n	8006474 <__hexnan+0x64>
 8006466:	2d07      	cmp	r5, #7
 8006468:	dc04      	bgt.n	8006474 <__hexnan+0x64>
 800646a:	462a      	mov	r2, r5
 800646c:	4649      	mov	r1, r9
 800646e:	4620      	mov	r0, r4
 8006470:	f7ff ffa8 	bl	80063c4 <L_shift>
 8006474:	4544      	cmp	r4, r8
 8006476:	d950      	bls.n	800651a <__hexnan+0x10a>
 8006478:	2300      	movs	r3, #0
 800647a:	f1a4 0904 	sub.w	r9, r4, #4
 800647e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006482:	461d      	mov	r5, r3
 8006484:	464c      	mov	r4, r9
 8006486:	f8cd b008 	str.w	fp, [sp, #8]
 800648a:	9903      	ldr	r1, [sp, #12]
 800648c:	e7d7      	b.n	800643e <__hexnan+0x2e>
 800648e:	2a29      	cmp	r2, #41	; 0x29
 8006490:	d155      	bne.n	800653e <__hexnan+0x12e>
 8006492:	3102      	adds	r1, #2
 8006494:	f8ca 1000 	str.w	r1, [sl]
 8006498:	f1bb 0f00 	cmp.w	fp, #0
 800649c:	d04f      	beq.n	800653e <__hexnan+0x12e>
 800649e:	454c      	cmp	r4, r9
 80064a0:	d206      	bcs.n	80064b0 <__hexnan+0xa0>
 80064a2:	2d07      	cmp	r5, #7
 80064a4:	dc04      	bgt.n	80064b0 <__hexnan+0xa0>
 80064a6:	462a      	mov	r2, r5
 80064a8:	4649      	mov	r1, r9
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff ff8a 	bl	80063c4 <L_shift>
 80064b0:	4544      	cmp	r4, r8
 80064b2:	d934      	bls.n	800651e <__hexnan+0x10e>
 80064b4:	4623      	mov	r3, r4
 80064b6:	f1a8 0204 	sub.w	r2, r8, #4
 80064ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80064be:	429f      	cmp	r7, r3
 80064c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80064c4:	d2f9      	bcs.n	80064ba <__hexnan+0xaa>
 80064c6:	1b3b      	subs	r3, r7, r4
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	3304      	adds	r3, #4
 80064ce:	3e03      	subs	r6, #3
 80064d0:	3401      	adds	r4, #1
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	bf38      	it	cc
 80064d6:	2304      	movcc	r3, #4
 80064d8:	2200      	movs	r2, #0
 80064da:	4443      	add	r3, r8
 80064dc:	f843 2b04 	str.w	r2, [r3], #4
 80064e0:	429f      	cmp	r7, r3
 80064e2:	d2fb      	bcs.n	80064dc <__hexnan+0xcc>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	b91b      	cbnz	r3, 80064f0 <__hexnan+0xe0>
 80064e8:	4547      	cmp	r7, r8
 80064ea:	d126      	bne.n	800653a <__hexnan+0x12a>
 80064ec:	2301      	movs	r3, #1
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	2005      	movs	r0, #5
 80064f2:	e025      	b.n	8006540 <__hexnan+0x130>
 80064f4:	3501      	adds	r5, #1
 80064f6:	2d08      	cmp	r5, #8
 80064f8:	f10b 0b01 	add.w	fp, fp, #1
 80064fc:	dd06      	ble.n	800650c <__hexnan+0xfc>
 80064fe:	4544      	cmp	r4, r8
 8006500:	d9c3      	bls.n	800648a <__hexnan+0x7a>
 8006502:	2300      	movs	r3, #0
 8006504:	2501      	movs	r5, #1
 8006506:	f844 3c04 	str.w	r3, [r4, #-4]
 800650a:	3c04      	subs	r4, #4
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	f000 000f 	and.w	r0, r0, #15
 8006512:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006516:	6020      	str	r0, [r4, #0]
 8006518:	e7b7      	b.n	800648a <__hexnan+0x7a>
 800651a:	2508      	movs	r5, #8
 800651c:	e7b5      	b.n	800648a <__hexnan+0x7a>
 800651e:	9b01      	ldr	r3, [sp, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0df      	beq.n	80064e4 <__hexnan+0xd4>
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	f1c3 0320 	rsb	r3, r3, #32
 800652c:	40da      	lsrs	r2, r3
 800652e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006532:	4013      	ands	r3, r2
 8006534:	f846 3c04 	str.w	r3, [r6, #-4]
 8006538:	e7d4      	b.n	80064e4 <__hexnan+0xd4>
 800653a:	3f04      	subs	r7, #4
 800653c:	e7d2      	b.n	80064e4 <__hexnan+0xd4>
 800653e:	2004      	movs	r0, #4
 8006540:	b007      	add	sp, #28
 8006542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006546 <__ascii_mbtowc>:
 8006546:	b082      	sub	sp, #8
 8006548:	b901      	cbnz	r1, 800654c <__ascii_mbtowc+0x6>
 800654a:	a901      	add	r1, sp, #4
 800654c:	b142      	cbz	r2, 8006560 <__ascii_mbtowc+0x1a>
 800654e:	b14b      	cbz	r3, 8006564 <__ascii_mbtowc+0x1e>
 8006550:	7813      	ldrb	r3, [r2, #0]
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	1e10      	subs	r0, r2, #0
 8006558:	bf18      	it	ne
 800655a:	2001      	movne	r0, #1
 800655c:	b002      	add	sp, #8
 800655e:	4770      	bx	lr
 8006560:	4610      	mov	r0, r2
 8006562:	e7fb      	b.n	800655c <__ascii_mbtowc+0x16>
 8006564:	f06f 0001 	mvn.w	r0, #1
 8006568:	e7f8      	b.n	800655c <__ascii_mbtowc+0x16>

0800656a <_realloc_r>:
 800656a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	4680      	mov	r8, r0
 8006570:	4614      	mov	r4, r2
 8006572:	460e      	mov	r6, r1
 8006574:	b921      	cbnz	r1, 8006580 <_realloc_r+0x16>
 8006576:	4611      	mov	r1, r2
 8006578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	f7fd be40 	b.w	8004200 <_malloc_r>
 8006580:	b92a      	cbnz	r2, 800658e <_realloc_r+0x24>
 8006582:	f7fd fdcd 	bl	8004120 <_free_r>
 8006586:	4625      	mov	r5, r4
 8006588:	4628      	mov	r0, r5
 800658a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800658e:	f000 f842 	bl	8006616 <_malloc_usable_size_r>
 8006592:	4284      	cmp	r4, r0
 8006594:	4607      	mov	r7, r0
 8006596:	d802      	bhi.n	800659e <_realloc_r+0x34>
 8006598:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800659c:	d812      	bhi.n	80065c4 <_realloc_r+0x5a>
 800659e:	4621      	mov	r1, r4
 80065a0:	4640      	mov	r0, r8
 80065a2:	f7fd fe2d 	bl	8004200 <_malloc_r>
 80065a6:	4605      	mov	r5, r0
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d0ed      	beq.n	8006588 <_realloc_r+0x1e>
 80065ac:	42bc      	cmp	r4, r7
 80065ae:	4622      	mov	r2, r4
 80065b0:	4631      	mov	r1, r6
 80065b2:	bf28      	it	cs
 80065b4:	463a      	movcs	r2, r7
 80065b6:	f7ff fc27 	bl	8005e08 <memcpy>
 80065ba:	4631      	mov	r1, r6
 80065bc:	4640      	mov	r0, r8
 80065be:	f7fd fdaf 	bl	8004120 <_free_r>
 80065c2:	e7e1      	b.n	8006588 <_realloc_r+0x1e>
 80065c4:	4635      	mov	r5, r6
 80065c6:	e7df      	b.n	8006588 <_realloc_r+0x1e>

080065c8 <__ascii_wctomb>:
 80065c8:	4603      	mov	r3, r0
 80065ca:	4608      	mov	r0, r1
 80065cc:	b141      	cbz	r1, 80065e0 <__ascii_wctomb+0x18>
 80065ce:	2aff      	cmp	r2, #255	; 0xff
 80065d0:	d904      	bls.n	80065dc <__ascii_wctomb+0x14>
 80065d2:	228a      	movs	r2, #138	; 0x8a
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	4770      	bx	lr
 80065dc:	2001      	movs	r0, #1
 80065de:	700a      	strb	r2, [r1, #0]
 80065e0:	4770      	bx	lr
	...

080065e4 <fiprintf>:
 80065e4:	b40e      	push	{r1, r2, r3}
 80065e6:	b503      	push	{r0, r1, lr}
 80065e8:	4601      	mov	r1, r0
 80065ea:	ab03      	add	r3, sp, #12
 80065ec:	4805      	ldr	r0, [pc, #20]	; (8006604 <fiprintf+0x20>)
 80065ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f2:	6800      	ldr	r0, [r0, #0]
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	f000 f83d 	bl	8006674 <_vfiprintf_r>
 80065fa:	b002      	add	sp, #8
 80065fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006600:	b003      	add	sp, #12
 8006602:	4770      	bx	lr
 8006604:	20000064 	.word	0x20000064

08006608 <abort>:
 8006608:	2006      	movs	r0, #6
 800660a:	b508      	push	{r3, lr}
 800660c:	f000 fa0a 	bl	8006a24 <raise>
 8006610:	2001      	movs	r0, #1
 8006612:	f7fb f8ed 	bl	80017f0 <_exit>

08006616 <_malloc_usable_size_r>:
 8006616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661a:	1f18      	subs	r0, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfbc      	itt	lt
 8006620:	580b      	ldrlt	r3, [r1, r0]
 8006622:	18c0      	addlt	r0, r0, r3
 8006624:	4770      	bx	lr

08006626 <__sfputc_r>:
 8006626:	6893      	ldr	r3, [r2, #8]
 8006628:	b410      	push	{r4}
 800662a:	3b01      	subs	r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	6093      	str	r3, [r2, #8]
 8006630:	da07      	bge.n	8006642 <__sfputc_r+0x1c>
 8006632:	6994      	ldr	r4, [r2, #24]
 8006634:	42a3      	cmp	r3, r4
 8006636:	db01      	blt.n	800663c <__sfputc_r+0x16>
 8006638:	290a      	cmp	r1, #10
 800663a:	d102      	bne.n	8006642 <__sfputc_r+0x1c>
 800663c:	bc10      	pop	{r4}
 800663e:	f000 b933 	b.w	80068a8 <__swbuf_r>
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	1c58      	adds	r0, r3, #1
 8006646:	6010      	str	r0, [r2, #0]
 8006648:	7019      	strb	r1, [r3, #0]
 800664a:	4608      	mov	r0, r1
 800664c:	bc10      	pop	{r4}
 800664e:	4770      	bx	lr

08006650 <__sfputs_r>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4606      	mov	r6, r0
 8006654:	460f      	mov	r7, r1
 8006656:	4614      	mov	r4, r2
 8006658:	18d5      	adds	r5, r2, r3
 800665a:	42ac      	cmp	r4, r5
 800665c:	d101      	bne.n	8006662 <__sfputs_r+0x12>
 800665e:	2000      	movs	r0, #0
 8006660:	e007      	b.n	8006672 <__sfputs_r+0x22>
 8006662:	463a      	mov	r2, r7
 8006664:	4630      	mov	r0, r6
 8006666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666a:	f7ff ffdc 	bl	8006626 <__sfputc_r>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d1f3      	bne.n	800665a <__sfputs_r+0xa>
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006674 <_vfiprintf_r>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	460d      	mov	r5, r1
 800667a:	4614      	mov	r4, r2
 800667c:	4698      	mov	r8, r3
 800667e:	4606      	mov	r6, r0
 8006680:	b09d      	sub	sp, #116	; 0x74
 8006682:	b118      	cbz	r0, 800668c <_vfiprintf_r+0x18>
 8006684:	6a03      	ldr	r3, [r0, #32]
 8006686:	b90b      	cbnz	r3, 800668c <_vfiprintf_r+0x18>
 8006688:	f7fc fdb0 	bl	80031ec <__sinit>
 800668c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800668e:	07d9      	lsls	r1, r3, #31
 8006690:	d405      	bmi.n	800669e <_vfiprintf_r+0x2a>
 8006692:	89ab      	ldrh	r3, [r5, #12]
 8006694:	059a      	lsls	r2, r3, #22
 8006696:	d402      	bmi.n	800669e <_vfiprintf_r+0x2a>
 8006698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669a:	f7fc febe 	bl	800341a <__retarget_lock_acquire_recursive>
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	071b      	lsls	r3, r3, #28
 80066a2:	d501      	bpl.n	80066a8 <_vfiprintf_r+0x34>
 80066a4:	692b      	ldr	r3, [r5, #16]
 80066a6:	b99b      	cbnz	r3, 80066d0 <_vfiprintf_r+0x5c>
 80066a8:	4629      	mov	r1, r5
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 f93a 	bl	8006924 <__swsetup_r>
 80066b0:	b170      	cbz	r0, 80066d0 <_vfiprintf_r+0x5c>
 80066b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066b4:	07dc      	lsls	r4, r3, #31
 80066b6:	d504      	bpl.n	80066c2 <_vfiprintf_r+0x4e>
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	b01d      	add	sp, #116	; 0x74
 80066be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	0598      	lsls	r0, r3, #22
 80066c6:	d4f7      	bmi.n	80066b8 <_vfiprintf_r+0x44>
 80066c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ca:	f7fc fea7 	bl	800341c <__retarget_lock_release_recursive>
 80066ce:	e7f3      	b.n	80066b8 <_vfiprintf_r+0x44>
 80066d0:	2300      	movs	r3, #0
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	2320      	movs	r3, #32
 80066d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066da:	2330      	movs	r3, #48	; 0x30
 80066dc:	f04f 0901 	mov.w	r9, #1
 80066e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006894 <_vfiprintf_r+0x220>
 80066e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ec:	4623      	mov	r3, r4
 80066ee:	469a      	mov	sl, r3
 80066f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f4:	b10a      	cbz	r2, 80066fa <_vfiprintf_r+0x86>
 80066f6:	2a25      	cmp	r2, #37	; 0x25
 80066f8:	d1f9      	bne.n	80066ee <_vfiprintf_r+0x7a>
 80066fa:	ebba 0b04 	subs.w	fp, sl, r4
 80066fe:	d00b      	beq.n	8006718 <_vfiprintf_r+0xa4>
 8006700:	465b      	mov	r3, fp
 8006702:	4622      	mov	r2, r4
 8006704:	4629      	mov	r1, r5
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff ffa2 	bl	8006650 <__sfputs_r>
 800670c:	3001      	adds	r0, #1
 800670e:	f000 80a9 	beq.w	8006864 <_vfiprintf_r+0x1f0>
 8006712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006714:	445a      	add	r2, fp
 8006716:	9209      	str	r2, [sp, #36]	; 0x24
 8006718:	f89a 3000 	ldrb.w	r3, [sl]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a1 	beq.w	8006864 <_vfiprintf_r+0x1f0>
 8006722:	2300      	movs	r3, #0
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672c:	f10a 0a01 	add.w	sl, sl, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006738:	931a      	str	r3, [sp, #104]	; 0x68
 800673a:	4654      	mov	r4, sl
 800673c:	2205      	movs	r2, #5
 800673e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006742:	4854      	ldr	r0, [pc, #336]	; (8006894 <_vfiprintf_r+0x220>)
 8006744:	f7fc fe6b 	bl	800341e <memchr>
 8006748:	9a04      	ldr	r2, [sp, #16]
 800674a:	b9d8      	cbnz	r0, 8006784 <_vfiprintf_r+0x110>
 800674c:	06d1      	lsls	r1, r2, #27
 800674e:	bf44      	itt	mi
 8006750:	2320      	movmi	r3, #32
 8006752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006756:	0713      	lsls	r3, r2, #28
 8006758:	bf44      	itt	mi
 800675a:	232b      	movmi	r3, #43	; 0x2b
 800675c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006760:	f89a 3000 	ldrb.w	r3, [sl]
 8006764:	2b2a      	cmp	r3, #42	; 0x2a
 8006766:	d015      	beq.n	8006794 <_vfiprintf_r+0x120>
 8006768:	4654      	mov	r4, sl
 800676a:	2000      	movs	r0, #0
 800676c:	f04f 0c0a 	mov.w	ip, #10
 8006770:	9a07      	ldr	r2, [sp, #28]
 8006772:	4621      	mov	r1, r4
 8006774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006778:	3b30      	subs	r3, #48	; 0x30
 800677a:	2b09      	cmp	r3, #9
 800677c:	d94d      	bls.n	800681a <_vfiprintf_r+0x1a6>
 800677e:	b1b0      	cbz	r0, 80067ae <_vfiprintf_r+0x13a>
 8006780:	9207      	str	r2, [sp, #28]
 8006782:	e014      	b.n	80067ae <_vfiprintf_r+0x13a>
 8006784:	eba0 0308 	sub.w	r3, r0, r8
 8006788:	fa09 f303 	lsl.w	r3, r9, r3
 800678c:	4313      	orrs	r3, r2
 800678e:	46a2      	mov	sl, r4
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	e7d2      	b.n	800673a <_vfiprintf_r+0xc6>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1d19      	adds	r1, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	9103      	str	r1, [sp, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	bfbb      	ittet	lt
 80067a0:	425b      	neglt	r3, r3
 80067a2:	f042 0202 	orrlt.w	r2, r2, #2
 80067a6:	9307      	strge	r3, [sp, #28]
 80067a8:	9307      	strlt	r3, [sp, #28]
 80067aa:	bfb8      	it	lt
 80067ac:	9204      	strlt	r2, [sp, #16]
 80067ae:	7823      	ldrb	r3, [r4, #0]
 80067b0:	2b2e      	cmp	r3, #46	; 0x2e
 80067b2:	d10c      	bne.n	80067ce <_vfiprintf_r+0x15a>
 80067b4:	7863      	ldrb	r3, [r4, #1]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d134      	bne.n	8006824 <_vfiprintf_r+0x1b0>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3402      	adds	r4, #2
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006898 <_vfiprintf_r+0x224>
 80067d2:	2203      	movs	r2, #3
 80067d4:	4650      	mov	r0, sl
 80067d6:	7821      	ldrb	r1, [r4, #0]
 80067d8:	f7fc fe21 	bl	800341e <memchr>
 80067dc:	b138      	cbz	r0, 80067ee <_vfiprintf_r+0x17a>
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	eba0 000a 	sub.w	r0, r0, sl
 80067e6:	4082      	lsls	r2, r0
 80067e8:	4313      	orrs	r3, r2
 80067ea:	3401      	adds	r4, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f2:	2206      	movs	r2, #6
 80067f4:	4829      	ldr	r0, [pc, #164]	; (800689c <_vfiprintf_r+0x228>)
 80067f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fa:	f7fc fe10 	bl	800341e <memchr>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d03f      	beq.n	8006882 <_vfiprintf_r+0x20e>
 8006802:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <_vfiprintf_r+0x22c>)
 8006804:	bb1b      	cbnz	r3, 800684e <_vfiprintf_r+0x1da>
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	3307      	adds	r3, #7
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	3308      	adds	r3, #8
 8006810:	9303      	str	r3, [sp, #12]
 8006812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006814:	443b      	add	r3, r7
 8006816:	9309      	str	r3, [sp, #36]	; 0x24
 8006818:	e768      	b.n	80066ec <_vfiprintf_r+0x78>
 800681a:	460c      	mov	r4, r1
 800681c:	2001      	movs	r0, #1
 800681e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006822:	e7a6      	b.n	8006772 <_vfiprintf_r+0xfe>
 8006824:	2300      	movs	r3, #0
 8006826:	f04f 0c0a 	mov.w	ip, #10
 800682a:	4619      	mov	r1, r3
 800682c:	3401      	adds	r4, #1
 800682e:	9305      	str	r3, [sp, #20]
 8006830:	4620      	mov	r0, r4
 8006832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006836:	3a30      	subs	r2, #48	; 0x30
 8006838:	2a09      	cmp	r2, #9
 800683a:	d903      	bls.n	8006844 <_vfiprintf_r+0x1d0>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0c6      	beq.n	80067ce <_vfiprintf_r+0x15a>
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	e7c4      	b.n	80067ce <_vfiprintf_r+0x15a>
 8006844:	4604      	mov	r4, r0
 8006846:	2301      	movs	r3, #1
 8006848:	fb0c 2101 	mla	r1, ip, r1, r2
 800684c:	e7f0      	b.n	8006830 <_vfiprintf_r+0x1bc>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4630      	mov	r0, r6
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <_vfiprintf_r+0x230>)
 8006858:	a904      	add	r1, sp, #16
 800685a:	f7fb fe6b 	bl	8002534 <_printf_float>
 800685e:	4607      	mov	r7, r0
 8006860:	1c78      	adds	r0, r7, #1
 8006862:	d1d6      	bne.n	8006812 <_vfiprintf_r+0x19e>
 8006864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d405      	bmi.n	8006876 <_vfiprintf_r+0x202>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	059a      	lsls	r2, r3, #22
 800686e:	d402      	bmi.n	8006876 <_vfiprintf_r+0x202>
 8006870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006872:	f7fc fdd3 	bl	800341c <__retarget_lock_release_recursive>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	065b      	lsls	r3, r3, #25
 800687a:	f53f af1d 	bmi.w	80066b8 <_vfiprintf_r+0x44>
 800687e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006880:	e71c      	b.n	80066bc <_vfiprintf_r+0x48>
 8006882:	ab03      	add	r3, sp, #12
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	462a      	mov	r2, r5
 8006888:	4630      	mov	r0, r6
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <_vfiprintf_r+0x230>)
 800688c:	a904      	add	r1, sp, #16
 800688e:	f7fc f8f1 	bl	8002a74 <_printf_i>
 8006892:	e7e4      	b.n	800685e <_vfiprintf_r+0x1ea>
 8006894:	08006f31 	.word	0x08006f31
 8006898:	08006f37 	.word	0x08006f37
 800689c:	08006f3b 	.word	0x08006f3b
 80068a0:	08002535 	.word	0x08002535
 80068a4:	08006651 	.word	0x08006651

080068a8 <__swbuf_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	460e      	mov	r6, r1
 80068ac:	4614      	mov	r4, r2
 80068ae:	4605      	mov	r5, r0
 80068b0:	b118      	cbz	r0, 80068ba <__swbuf_r+0x12>
 80068b2:	6a03      	ldr	r3, [r0, #32]
 80068b4:	b90b      	cbnz	r3, 80068ba <__swbuf_r+0x12>
 80068b6:	f7fc fc99 	bl	80031ec <__sinit>
 80068ba:	69a3      	ldr	r3, [r4, #24]
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	071a      	lsls	r2, r3, #28
 80068c2:	d525      	bpl.n	8006910 <__swbuf_r+0x68>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	b31b      	cbz	r3, 8006910 <__swbuf_r+0x68>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	6922      	ldr	r2, [r4, #16]
 80068cc:	b2f6      	uxtb	r6, r6
 80068ce:	1a98      	subs	r0, r3, r2
 80068d0:	6963      	ldr	r3, [r4, #20]
 80068d2:	4637      	mov	r7, r6
 80068d4:	4283      	cmp	r3, r0
 80068d6:	dc04      	bgt.n	80068e2 <__swbuf_r+0x3a>
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f7ff fa30 	bl	8005d40 <_fflush_r>
 80068e0:	b9e0      	cbnz	r0, 800691c <__swbuf_r+0x74>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	701e      	strb	r6, [r3, #0]
 80068f0:	6962      	ldr	r2, [r4, #20]
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d004      	beq.n	8006902 <__swbuf_r+0x5a>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d506      	bpl.n	800690c <__swbuf_r+0x64>
 80068fe:	2e0a      	cmp	r6, #10
 8006900:	d104      	bne.n	800690c <__swbuf_r+0x64>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f7ff fa1b 	bl	8005d40 <_fflush_r>
 800690a:	b938      	cbnz	r0, 800691c <__swbuf_r+0x74>
 800690c:	4638      	mov	r0, r7
 800690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006910:	4621      	mov	r1, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f806 	bl	8006924 <__swsetup_r>
 8006918:	2800      	cmp	r0, #0
 800691a:	d0d5      	beq.n	80068c8 <__swbuf_r+0x20>
 800691c:	f04f 37ff 	mov.w	r7, #4294967295
 8006920:	e7f4      	b.n	800690c <__swbuf_r+0x64>
	...

08006924 <__swsetup_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <__swsetup_r+0xac>)
 8006928:	4605      	mov	r5, r0
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	460c      	mov	r4, r1
 800692e:	b118      	cbz	r0, 8006938 <__swsetup_r+0x14>
 8006930:	6a03      	ldr	r3, [r0, #32]
 8006932:	b90b      	cbnz	r3, 8006938 <__swsetup_r+0x14>
 8006934:	f7fc fc5a 	bl	80031ec <__sinit>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800693e:	0718      	lsls	r0, r3, #28
 8006940:	d422      	bmi.n	8006988 <__swsetup_r+0x64>
 8006942:	06d9      	lsls	r1, r3, #27
 8006944:	d407      	bmi.n	8006956 <__swsetup_r+0x32>
 8006946:	2309      	movs	r3, #9
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800694e:	f04f 30ff 	mov.w	r0, #4294967295
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	e034      	b.n	80069c0 <__swsetup_r+0x9c>
 8006956:	0758      	lsls	r0, r3, #29
 8006958:	d512      	bpl.n	8006980 <__swsetup_r+0x5c>
 800695a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695c:	b141      	cbz	r1, 8006970 <__swsetup_r+0x4c>
 800695e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006962:	4299      	cmp	r1, r3
 8006964:	d002      	beq.n	800696c <__swsetup_r+0x48>
 8006966:	4628      	mov	r0, r5
 8006968:	f7fd fbda 	bl	8004120 <_free_r>
 800696c:	2300      	movs	r3, #0
 800696e:	6363      	str	r3, [r4, #52]	; 0x34
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	2300      	movs	r3, #0
 800697a:	6063      	str	r3, [r4, #4]
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f043 0308 	orr.w	r3, r3, #8
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	b94b      	cbnz	r3, 80069a0 <__swsetup_r+0x7c>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006996:	d003      	beq.n	80069a0 <__swsetup_r+0x7c>
 8006998:	4621      	mov	r1, r4
 800699a:	4628      	mov	r0, r5
 800699c:	f000 f883 	bl	8006aa6 <__smakebuf_r>
 80069a0:	89a0      	ldrh	r0, [r4, #12]
 80069a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a6:	f010 0301 	ands.w	r3, r0, #1
 80069aa:	d00a      	beq.n	80069c2 <__swsetup_r+0x9e>
 80069ac:	2300      	movs	r3, #0
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6963      	ldr	r3, [r4, #20]
 80069b2:	425b      	negs	r3, r3
 80069b4:	61a3      	str	r3, [r4, #24]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	b943      	cbnz	r3, 80069cc <__swsetup_r+0xa8>
 80069ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069be:	d1c4      	bne.n	800694a <__swsetup_r+0x26>
 80069c0:	bd38      	pop	{r3, r4, r5, pc}
 80069c2:	0781      	lsls	r1, r0, #30
 80069c4:	bf58      	it	pl
 80069c6:	6963      	ldrpl	r3, [r4, #20]
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	e7f4      	b.n	80069b6 <__swsetup_r+0x92>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7f7      	b.n	80069c0 <__swsetup_r+0x9c>
 80069d0:	20000064 	.word	0x20000064

080069d4 <_raise_r>:
 80069d4:	291f      	cmp	r1, #31
 80069d6:	b538      	push	{r3, r4, r5, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	d904      	bls.n	80069e8 <_raise_r+0x14>
 80069de:	2316      	movs	r3, #22
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069ea:	b112      	cbz	r2, 80069f2 <_raise_r+0x1e>
 80069ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069f0:	b94b      	cbnz	r3, 8006a06 <_raise_r+0x32>
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f830 	bl	8006a58 <_getpid_r>
 80069f8:	462a      	mov	r2, r5
 80069fa:	4601      	mov	r1, r0
 80069fc:	4620      	mov	r0, r4
 80069fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a02:	f000 b817 	b.w	8006a34 <_kill_r>
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d00a      	beq.n	8006a20 <_raise_r+0x4c>
 8006a0a:	1c59      	adds	r1, r3, #1
 8006a0c:	d103      	bne.n	8006a16 <_raise_r+0x42>
 8006a0e:	2316      	movs	r3, #22
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	2001      	movs	r0, #1
 8006a14:	e7e7      	b.n	80069e6 <_raise_r+0x12>
 8006a16:	2400      	movs	r4, #0
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a1e:	4798      	blx	r3
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7e0      	b.n	80069e6 <_raise_r+0x12>

08006a24 <raise>:
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <raise+0xc>)
 8006a26:	4601      	mov	r1, r0
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f7ff bfd3 	b.w	80069d4 <_raise_r>
 8006a2e:	bf00      	nop
 8006a30:	20000064 	.word	0x20000064

08006a34 <_kill_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	2300      	movs	r3, #0
 8006a38:	4d06      	ldr	r5, [pc, #24]	; (8006a54 <_kill_r+0x20>)
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	f7fa fecd 	bl	80017e0 <_kill>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d102      	bne.n	8006a50 <_kill_r+0x1c>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b103      	cbz	r3, 8006a50 <_kill_r+0x1c>
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	20000418 	.word	0x20000418

08006a58 <_getpid_r>:
 8006a58:	f7fa bec0 	b.w	80017dc <_getpid>

08006a5c <__swhatbuf_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	460c      	mov	r4, r1
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	4615      	mov	r5, r2
 8006a66:	2900      	cmp	r1, #0
 8006a68:	461e      	mov	r6, r3
 8006a6a:	b096      	sub	sp, #88	; 0x58
 8006a6c:	da0c      	bge.n	8006a88 <__swhatbuf_r+0x2c>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	2100      	movs	r1, #0
 8006a72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a76:	bf0c      	ite	eq
 8006a78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a7c:	2340      	movne	r3, #64	; 0x40
 8006a7e:	2000      	movs	r0, #0
 8006a80:	6031      	str	r1, [r6, #0]
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	b016      	add	sp, #88	; 0x58
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	466a      	mov	r2, sp
 8006a8a:	f000 f849 	bl	8006b20 <_fstat_r>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	dbed      	blt.n	8006a6e <__swhatbuf_r+0x12>
 8006a92:	9901      	ldr	r1, [sp, #4]
 8006a94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a9c:	4259      	negs	r1, r3
 8006a9e:	4159      	adcs	r1, r3
 8006aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa4:	e7eb      	b.n	8006a7e <__swhatbuf_r+0x22>

08006aa6 <__smakebuf_r>:
 8006aa6:	898b      	ldrh	r3, [r1, #12]
 8006aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aaa:	079d      	lsls	r5, r3, #30
 8006aac:	4606      	mov	r6, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	d507      	bpl.n	8006ac2 <__smakebuf_r+0x1c>
 8006ab2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	2301      	movs	r3, #1
 8006abc:	6163      	str	r3, [r4, #20]
 8006abe:	b002      	add	sp, #8
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	466a      	mov	r2, sp
 8006ac4:	ab01      	add	r3, sp, #4
 8006ac6:	f7ff ffc9 	bl	8006a5c <__swhatbuf_r>
 8006aca:	9900      	ldr	r1, [sp, #0]
 8006acc:	4605      	mov	r5, r0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7fd fb96 	bl	8004200 <_malloc_r>
 8006ad4:	b948      	cbnz	r0, 8006aea <__smakebuf_r+0x44>
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	059a      	lsls	r2, r3, #22
 8006adc:	d4ef      	bmi.n	8006abe <__smakebuf_r+0x18>
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	f043 0302 	orr.w	r3, r3, #2
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	e7e3      	b.n	8006ab2 <__smakebuf_r+0xc>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	6020      	str	r0, [r4, #0]
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	6120      	str	r0, [r4, #16]
 8006af8:	6163      	str	r3, [r4, #20]
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	b15b      	cbz	r3, 8006b16 <__smakebuf_r+0x70>
 8006afe:	4630      	mov	r0, r6
 8006b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b04:	f000 f81e 	bl	8006b44 <_isatty_r>
 8006b08:	b128      	cbz	r0, 8006b16 <__smakebuf_r+0x70>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f023 0303 	bic.w	r3, r3, #3
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	431d      	orrs	r5, r3
 8006b1a:	81a5      	strh	r5, [r4, #12]
 8006b1c:	e7cf      	b.n	8006abe <__smakebuf_r+0x18>
	...

08006b20 <_fstat_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	2300      	movs	r3, #0
 8006b24:	4d06      	ldr	r5, [pc, #24]	; (8006b40 <_fstat_r+0x20>)
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	f7fa fe84 	bl	800183a <_fstat>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	d102      	bne.n	8006b3c <_fstat_r+0x1c>
 8006b36:	682b      	ldr	r3, [r5, #0]
 8006b38:	b103      	cbz	r3, 8006b3c <_fstat_r+0x1c>
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000418 	.word	0x20000418

08006b44 <_isatty_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	2300      	movs	r3, #0
 8006b48:	4d05      	ldr	r5, [pc, #20]	; (8006b60 <_isatty_r+0x1c>)
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fa fe78 	bl	8001844 <_isatty>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_isatty_r+0x1a>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_isatty_r+0x1a>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000418 	.word	0x20000418

08006b64 <_init>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr

08006b70 <_fini>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr
